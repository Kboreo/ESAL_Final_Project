L 1 "i2c_slave.c"
N//#include "i2c_slave.h"
N
N//#include <stdint.h>
N//#include <stdbool.h>
N//#include "inc/hw_ints.h"
N//#include "inc/hw_i2c.h"
N//#include "inc/hw_memmap.h"
N//#include "inc/hw_types.h"
N//#include "inc/hw_gpio.h"
N//#include "driverlib/interrupt.h"
N//#include "driverlib/i2c.h"
N//#include "driverlib/sysctl.h"
N//#include "driverlib/gpio.h"
N//#include "driverlib/pin_map.h"
N//#include "driverlib/uart.h"
N////#include "utils/uartstdio.h"
N////#include "utils/uartstdio.c"
N
N//#define SLAVE_ADDRESS 0x3C
N//volatile uint32_t   result = 'V';
N
N////void InitConsole(void)
N////{
N////    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
N
N////    GPIOPinConfigure(GPIO_PA0_U0RX);
N////    GPIOPinConfigure(GPIO_PA1_U0TX);
N
N////    SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
N////    UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC);
N////    GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
N////    UARTStdioConfig(0, 115200, 16000000);
N////}
N
N
N//void I2C1_Slave_Init(void)
N//{
N//		
N//    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
N//    while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA));
N
N//    SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C1);
N//    SysCtlPeripheralReset(SYSCTL_PERIPH_I2C1);
N
N//    GPIOPinConfigure(GPIO_PA6_I2C1SCL);
N//    GPIOPinConfigure(GPIO_PA7_I2C1SDA);
N
N//    GPIOPinTypeI2CSCL(GPIO_PORTA_BASE, GPIO_PIN_6);
N//    GPIOPinTypeI2C(GPIO_PORTA_BASE, GPIO_PIN_7);
N
N//    I2CSlaveEnable(I2C1_BASE);
N//    I2CSlaveInit(I2C1_BASE, SLAVE_ADDRESS);
N//	
N//	//	I2CMasterInitExpClk(I2C0_BASE, SysCtlClockGet(), false);
N//}
N
N//void I2C1SlaveIntHandler(void)
N//{
N//    // Clear the I2C0 interrupt flag.
N//    I2CSlaveIntClear(I2C1_BASE);
N//    // Read the data from the slave.
N//    result = I2CSlaveDataGet(I2C1_BASE);
N//}
N
N//int I2CSend(speed)
N//{
N//    //SysCtlClockSet(SYSCTL_SYSDIV_1| SYSCTL_USE_OSC| SYSCTL_OSC_MAIN| SYSCTL_XTAL_16MHZ);
N
N//   // InitConsole();
N////    I2C1_Slave_Init();
N
N////    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
N////    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
N////    GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
N
N////    IntEnable(INT_I2C1);
N////    I2CSlaveIntEnableEx(I2C1_BASE, I2C_SLAVE_INT_DATA);
N////    IntMasterEnable();
N
N////    while(1)
N////    {
N////        //I2CSlaveDataPut(I2C1_BASE, result);
N////        printf(" Slave receive: '%c' \n", result);
N////        SysCtlDelay(SysCtlClockGet()/12);
N
N////        //while(!(I2CSlaveStatus(I2C1_BASE) & I2C_SLAVE_ACT_TREQ));
N
N//        I2CSlaveDataPut(I2C1_BASE, speed);
N//    }
N//int I2CGET(uSpeed)
N//{
N//	uSpeed = I2CSlaveDataGet(I2C1_BASE);
N//	return uSpeed;
N//	
N//}
