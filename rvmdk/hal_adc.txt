; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\rvmdk\hal_adc.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\hal_adc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\.. -I.\driverlib -I.\src -I.\inc -I.\RTE\_project -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DTM4C123GH6PM -Drvmdk -DPART_TM4C123GH6PM -DTARGET_IS_TM4C123_RB1 --omf_browse=.\rvmdk\hal_adc.crf HAL_ADC.c]
                          THUMB

                          AREA ||i.ADCReadChan||, CODE, READONLY, ALIGN=2

                  ADCReadChan PROC
;;;73     //Function to read the ADC value from the Channel
;;;74     double ADCReadChan()
000000  b510              PUSH     {r4,lr}
;;;75     {	
;;;76     //	SysTickWait10msDN(10); //Delay Function
;;;77     	//printf("\n");
;;;78     	int32_t scratch;
;;;79     	//
;;;80     	// Trigger the sample sequence.
;;;81     	//
;;;82     	ADCProcessorTrigger(ADC0_BASE, 0);
000002  2100              MOVS     r1,#0
000004  4814              LDR      r0,|L1.88|
000006  f7fffffe          BL       ADCProcessorTrigger
;;;83     	//
;;;84     	// Wait until the sample sequence has completed.
;;;85     	//
;;;86     	while(ADCBusy(ADC0_BASE)){};
00000a  bf00              NOP      
                  |L1.12|
00000c  4812              LDR      r0,|L1.88|
00000e  f7fffffe          BL       ADCBusy
000012  2800              CMP      r0,#0
000014  d1fa              BNE      |L1.12|
;;;87     	//while(!ADCIntStatus(ADC0_BASE, 0, false))
;;;88     	{
;;;89     	}
;;;90     	//
;;;91     	// Read the value from the ADC.
;;;92     	//	
;;;93     	scratch = (ADCSequenceDataGet(ADC0_BASE, 0, ADC_Values));
000016  4a11              LDR      r2,|L1.92|
000018  2100              MOVS     r1,#0
00001a  480f              LDR      r0,|L1.88|
00001c  f7fffffe          BL       ADCSequenceDataGet
000020  4604              MOV      r4,r0
;;;94     	if (scratch < 13)
000022  2c0d              CMP      r4,#0xd
000024  da01              BGE      |L1.42|
;;;95     	{
;;;96     		ADC_Values[12]=scratch;
000026  480d              LDR      r0,|L1.92|
000028  6304              STR      r4,[r0,#0x30]  ; ADC_Values
                  |L1.42|
;;;97     	}
;;;98     		 
;;;99     	
;;;100    	ADCVALUE = ADC_Values[0];		
00002a  490c              LDR      r1,|L1.92|
00002c  6808              LDR      r0,[r1,#0]  ; ADC_Values
00002e  f7fffffe          BL       __aeabi_ui2d
000032  4a0b              LDR      r2,|L1.96|
000034  c203              STM      r2!,{r0,r1}
;;;101    	//x = x * .000807;  //Multiple the x value with the "offset" to get it to the correct value		voltage div k21.2 ohm and 79 kohm
;;;102    	ADCVALUE = ADCVALUE * .0037415;  //Multiple the x value with the "offset" to get it to the correct value		voltage div k21.2 ohm and 79 kohm
000036  ed9f0b0b          VLDR     d0,|L1.100|
00003a  ec532b10          VMOV     r2,r3,d0
00003e  4808              LDR      r0,|L1.96|
000040  ed900b00          VLDR     d0,[r0,#0]
000044  ec510b10          VMOV     r0,r1,d0
000048  f7fffffe          BL       __aeabi_dmul
00004c  4a04              LDR      r2,|L1.96|
00004e  c203              STM      r2!,{r0,r1}
;;;103    	//printf("Voltage on PE3 is, %.2fV \n\n", x);  //Displays voltage to the End user	
;;;104    	return ADCVALUE;
000050  4803              LDR      r0,|L1.96|
000052  ed900b00          VLDR     d0,[r0,#0]
;;;105    }
000056  bd10              POP      {r4,pc}
;;;106    
                          ENDP

                  |L1.88|
                          DCD      0x40038000
                  |L1.92|
                          DCD      ADC_Values
                  |L1.96|
                          DCD      ADCVALUE
                  |L1.100|
000064  846a5d6c          DCFD     0x3f6ea67e846a5d6c ; 0.0037415
000068  3f6ea67e

                          AREA ||i.SetupADC||, CODE, READONLY, ALIGN=2

                  SetupADC PROC
;;;36     //Function that sets the HW up for the ADC module
;;;37     void SetupADC()
000000  b510              PUSH     {r4,lr}
;;;38     {	
;;;39     	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
000002  4828              LDR      r0,|L2.164|
000004  f7fffffe          BL       SysCtlPeripheralEnable
;;;40     	while (!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOE))
000008  bf00              NOP      
                  |L2.10|
00000a  4826              LDR      r0,|L2.164|
00000c  f7fffffe          BL       SysCtlPeripheralReady
000010  2800              CMP      r0,#0
000012  d0fa              BEQ      |L2.10|
;;;41     	{
;;;42     	}
;;;43     	
;;;44     	//
;;;45     	// Enable the ADC0 module.
;;;46     	//
;;;47     	SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);
000014  4824              LDR      r0,|L2.168|
000016  f7fffffe          BL       SysCtlPeripheralEnable
;;;48     	//
;;;49     	// Wait for the ADC0 module to be ready.
;;;50     	//
;;;51     	while(!SysCtlPeripheralReady(SYSCTL_PERIPH_ADC0))
00001a  bf00              NOP      
                  |L2.28|
00001c  4822              LDR      r0,|L2.168|
00001e  f7fffffe          BL       SysCtlPeripheralReady
000022  2800              CMP      r0,#0
000024  d0fa              BEQ      |L2.28|
;;;52     	{
;;;53     	}
;;;54     	
;;;55     	ADCReferenceSet(ADC0_BASE, ADC_REF_EXT_3V);
000026  2101              MOVS     r1,#1
000028  4820              LDR      r0,|L2.172|
00002a  f7fffffe          BL       ADCReferenceSet
;;;56     	//
;;;57     	// Enable the first sample sequencer to capture the value of channel 0 when
;;;58     	// the processor trigger occurs.
;;;59     	//
;;;60     	ADCSequenceDisable(ADC0_BASE,0);
00002e  2100              MOVS     r1,#0
000030  481e              LDR      r0,|L2.172|
000032  f7fffffe          BL       ADCSequenceDisable
;;;61     	ADCSequenceConfigure(ADC0_BASE, 0, ADC_TRIGGER_PROCESSOR, 0);
000036  2300              MOVS     r3,#0
000038  461a              MOV      r2,r3
00003a  4619              MOV      r1,r3
00003c  481b              LDR      r0,|L2.172|
00003e  f7fffffe          BL       ADCSequenceConfigure
;;;62     	ADCSequenceStepConfigure(ADC0_BASE, 0, 0, ADC_CTL_CH0 );
000042  2300              MOVS     r3,#0
000044  461a              MOV      r2,r3
000046  4619              MOV      r1,r3
000048  4818              LDR      r0,|L2.172|
00004a  f7fffffe          BL       ADCSequenceStepConfigure
;;;63       ADCSequenceStepConfigure(ADC0_BASE, 0, 1, ADC_CTL_CH1 );	
00004e  2301              MOVS     r3,#1
000050  461a              MOV      r2,r3
000052  2100              MOVS     r1,#0
000054  4815              LDR      r0,|L2.172|
000056  f7fffffe          BL       ADCSequenceStepConfigure
;;;64       ADCSequenceStepConfigure(ADC0_BASE, 0, 2, ADC_CTL_CH2 );	
00005a  2302              MOVS     r3,#2
00005c  461a              MOV      r2,r3
00005e  2100              MOVS     r1,#0
000060  4812              LDR      r0,|L2.172|
000062  f7fffffe          BL       ADCSequenceStepConfigure
;;;65     	ADCSequenceStepConfigure(ADC0_BASE, 0, 3, ADC_CTL_CH4 );	
000066  2304              MOVS     r3,#4
000068  2203              MOVS     r2,#3
00006a  2100              MOVS     r1,#0
00006c  480f              LDR      r0,|L2.172|
00006e  f7fffffe          BL       ADCSequenceStepConfigure
;;;66     	ADCSequenceStepConfigure(ADC0_BASE, 0, 4, ADC_CTL_CH5 );	
000072  2305              MOVS     r3,#5
000074  2204              MOVS     r2,#4
000076  2100              MOVS     r1,#0
000078  480c              LDR      r0,|L2.172|
00007a  f7fffffe          BL       ADCSequenceStepConfigure
;;;67     	ADCSequenceStepConfigure(ADC0_BASE, 0, 5, ADC_CTL_CH6 );	
00007e  2306              MOVS     r3,#6
000080  2205              MOVS     r2,#5
000082  2100              MOVS     r1,#0
000084  4809              LDR      r0,|L2.172|
000086  f7fffffe          BL       ADCSequenceStepConfigure
;;;68     	ADCSequenceStepConfigure(ADC0_BASE, 0, 6, ADC_CTL_CH7 | ADC_CTL_END);	
00008a  2327              MOVS     r3,#0x27
00008c  2206              MOVS     r2,#6
00008e  2100              MOVS     r1,#0
000090  4806              LDR      r0,|L2.172|
000092  f7fffffe          BL       ADCSequenceStepConfigure
;;;69     	ADCSequenceEnable(ADC0_BASE, 0);
000096  2100              MOVS     r1,#0
000098  4804              LDR      r0,|L2.172|
00009a  f7fffffe          BL       ADCSequenceEnable
;;;70     	SetupADCPins(); //setup the GPIO		
00009e  f7fffffe          BL       SetupADCPins
;;;71     }
0000a2  bd10              POP      {r4,pc}
;;;72     
                          ENDP

                  |L2.164|
                          DCD      0xf0000804
                  |L2.168|
                          DCD      0xf0003800
                  |L2.172|
                          DCD      0x40038000

                          AREA ||i.SetupADCPins||, CODE, READONLY, ALIGN=2

                  SetupADCPins PROC
;;;23     //set up for 2 pots and accelerometer + 1 extra
;;;24     void SetupADCPins()
000000  b510              PUSH     {r4,lr}
;;;25     {
;;;26     		//Need to Unlock PD7
;;;27     	HWREG(GPIO_PORTE_BASE + GPIO_O_LOCK) = GPIO_LOCK_KEY;
000002  4807              LDR      r0,|L3.32|
000004  4907              LDR      r1,|L3.36|
000006  6008              STR      r0,[r1,#0]
;;;28     	HWREG(GPIO_PORTE_BASE + GPIO_O_CR) = 0xFF;
000008  20ff              MOVS     r0,#0xff
00000a  1d09              ADDS     r1,r1,#4
00000c  6008              STR      r0,[r1,#0]
;;;29       HWREG(GPIO_PORTE_BASE + GPIO_O_LOCK) = 0;
00000e  2000              MOVS     r0,#0
000010  1f09              SUBS     r1,r1,#4
000012  6008              STR      r0,[r1,#0]
;;;30     	GPIOPinTypeADC(GPIO_PORTE_BASE,GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2);
000014  210e              MOVS     r1,#0xe
000016  4804              LDR      r0,|L3.40|
000018  f7fffffe          BL       GPIOPinTypeADC
;;;31     	//GPIOPinTypeADC(GPIO_PORTD_BASE,GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);
;;;32     	//GPIOPinTypeADC(GPIO_PORTE_BASE,GPIO_PIN_2);
;;;33     	
;;;34     }
00001c  bd10              POP      {r4,pc}
;;;35     
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x4c4f434b
                  |L3.36|
                          DCD      0x40024520
                  |L3.40|
                          DCD      0x40024000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ADC_Values
                          %        52

                          AREA ||.data||, DATA, ALIGN=3

                  ADCVALUE
                          %        8
