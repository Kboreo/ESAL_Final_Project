L 1 "i2c.c"
N//*****************************************************************************
N//
N// i2c.c - Driver for Inter-IC (I2C) bus block.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N//! \addtogroup i2c_api
N//! @{
N//
N//*****************************************************************************
N
N#include <stdbool.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdbool.h" 1
N/* stdbool.h: ISO/IEC 9899:1999 (C99), section 7.16 */
N
N/* Copyright (C) ARM Ltd., 2002
N * All rights reserved
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: drodgman $
N */
N
N#ifndef __bool_true_false_are_defined
N#define __bool_true_false_are_defined 1
N#define __ARMCLIB_VERSION 5060034
N
N  #ifndef __cplusplus /* In C++, 'bool', 'true' and 'false' and keywords */
N    #define bool _Bool
N    #define true 1
N    #define false 0
N  #else
S    #ifdef __GNUC__
S      /* GNU C++ supports direct inclusion of stdbool.h to provide C99
S         compatibility by defining _Bool */
S      #define _Bool bool
S    #endif
N  #endif
N
N#endif /* __bool_true_false_are_defined */
N
L 48 "i2c.c" 2
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060034
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 49 "i2c.c" 2
N#include "inc/hw_i2c.h"
L 1 "inc/hw_i2c.h" 1
N//*****************************************************************************
N//
N// hw_i2c.h - Macros used when accessing the I2C master and slave hardware.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_I2C_H__
N#define __HW_I2C_H__
N
N//*****************************************************************************
N//
N// The following are defines for the I2C register offsets.
N//
N//*****************************************************************************
N#define I2C_O_MSA               0x00000000  // I2C Master Slave Address
N#define I2C_O_MCS               0x00000004  // I2C Master Control/Status
N#define I2C_O_MDR               0x00000008  // I2C Master Data
N#define I2C_O_MTPR              0x0000000C  // I2C Master Timer Period
N#define I2C_O_MIMR              0x00000010  // I2C Master Interrupt Mask
N#define I2C_O_MRIS              0x00000014  // I2C Master Raw Interrupt Status
N#define I2C_O_MMIS              0x00000018  // I2C Master Masked Interrupt
N                                            // Status
N#define I2C_O_MICR              0x0000001C  // I2C Master Interrupt Clear
N#define I2C_O_MCR               0x00000020  // I2C Master Configuration
N#define I2C_O_MCLKOCNT          0x00000024  // I2C Master Clock Low Timeout
N                                            // Count
N#define I2C_O_MBMON             0x0000002C  // I2C Master Bus Monitor
N#define I2C_O_MBLEN             0x00000030  // I2C Master Burst Length
N#define I2C_O_MBCNT             0x00000034  // I2C Master Burst Count
N#define I2C_O_MCR2              0x00000038  // I2C Master Configuration 2
N#define I2C_O_SOAR              0x00000800  // I2C Slave Own Address
N#define I2C_O_SCSR              0x00000804  // I2C Slave Control/Status
N#define I2C_O_SDR               0x00000808  // I2C Slave Data
N#define I2C_O_SIMR              0x0000080C  // I2C Slave Interrupt Mask
N#define I2C_O_SRIS              0x00000810  // I2C Slave Raw Interrupt Status
N#define I2C_O_SMIS              0x00000814  // I2C Slave Masked Interrupt
N                                            // Status
N#define I2C_O_SICR              0x00000818  // I2C Slave Interrupt Clear
N#define I2C_O_SOAR2             0x0000081C  // I2C Slave Own Address 2
N#define I2C_O_SACKCTL           0x00000820  // I2C Slave ACK Control
N#define I2C_O_FIFODATA          0x00000F00  // I2C FIFO Data
N#define I2C_O_FIFOCTL           0x00000F04  // I2C FIFO Control
N#define I2C_O_FIFOSTATUS        0x00000F08  // I2C FIFO Status
N#define I2C_O_PP                0x00000FC0  // I2C Peripheral Properties
N#define I2C_O_PC                0x00000FC4  // I2C Peripheral Configuration
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MSA register.
N//
N//*****************************************************************************
N#define I2C_MSA_SA_M            0x000000FE  // I2C Slave Address
N#define I2C_MSA_RS              0x00000001  // Receive not send
N#define I2C_MSA_SA_S            1
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCS register.
N//
N//*****************************************************************************
N#define I2C_MCS_ACTDMARX        0x80000000  // DMA RX Active Status
N#define I2C_MCS_ACTDMATX        0x40000000  // DMA TX Active Status
N#define I2C_MCS_CLKTO           0x00000080  // Clock Timeout Error
N#define I2C_MCS_BURST           0x00000040  // Burst Enable
N#define I2C_MCS_BUSBSY          0x00000040  // Bus Busy
N#define I2C_MCS_IDLE            0x00000020  // I2C Idle
N#define I2C_MCS_QCMD            0x00000020  // Quick Command
N#define I2C_MCS_ARBLST          0x00000010  // Arbitration Lost
N#define I2C_MCS_HS              0x00000010  // High-Speed Enable
N#define I2C_MCS_ACK             0x00000008  // Data Acknowledge Enable
N#define I2C_MCS_DATACK          0x00000008  // Acknowledge Data
N#define I2C_MCS_ADRACK          0x00000004  // Acknowledge Address
N#define I2C_MCS_STOP            0x00000004  // Generate STOP
N#define I2C_MCS_ERROR           0x00000002  // Error
N#define I2C_MCS_START           0x00000002  // Generate START
N#define I2C_MCS_RUN             0x00000001  // I2C Master Enable
N#define I2C_MCS_BUSY            0x00000001  // I2C Busy
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MDR register.
N//
N//*****************************************************************************
N#define I2C_MDR_DATA_M          0x000000FF  // This byte contains the data
N                                            // transferred during a transaction
N#define I2C_MDR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MTPR register.
N//
N//*****************************************************************************
N#define I2C_MTPR_PULSEL_M       0x00070000  // Glitch Suppression Pulse Width
N#define I2C_MTPR_PULSEL_BYPASS  0x00000000  // Bypass
N#define I2C_MTPR_PULSEL_1       0x00010000  // 1 clock
N#define I2C_MTPR_PULSEL_2       0x00020000  // 2 clocks
N#define I2C_MTPR_PULSEL_3       0x00030000  // 3 clocks
N#define I2C_MTPR_PULSEL_4       0x00040000  // 4 clocks
N#define I2C_MTPR_PULSEL_8       0x00050000  // 8 clocks
N#define I2C_MTPR_PULSEL_16      0x00060000  // 16 clocks
N#define I2C_MTPR_PULSEL_31      0x00070000  // 31 clocks
N#define I2C_MTPR_HS             0x00000080  // High-Speed Enable
N#define I2C_MTPR_TPR_M          0x0000007F  // Timer Period
N#define I2C_MTPR_TPR_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MIMR register.
N//
N//*****************************************************************************
N#define I2C_MIMR_RXFFIM         0x00000800  // Receive FIFO Full Interrupt Mask
N#define I2C_MIMR_TXFEIM         0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_MIMR_RXIM           0x00000200  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_MIMR_TXIM           0x00000100  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_MIMR_ARBLOSTIM      0x00000080  // Arbitration Lost Interrupt Mask
N#define I2C_MIMR_STOPIM         0x00000040  // STOP Detection Interrupt Mask
N#define I2C_MIMR_STARTIM        0x00000020  // START Detection Interrupt Mask
N#define I2C_MIMR_NACKIM         0x00000010  // Address/Data NACK Interrupt Mask
N#define I2C_MIMR_DMATXIM        0x00000008  // Transmit DMA Interrupt Mask
N#define I2C_MIMR_DMARXIM        0x00000004  // Receive DMA Interrupt Mask
N#define I2C_MIMR_CLKIM          0x00000002  // Clock Timeout Interrupt Mask
N#define I2C_MIMR_IM             0x00000001  // Master Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MRIS register.
N//
N//*****************************************************************************
N#define I2C_MRIS_RXFFRIS        0x00000800  // Receive FIFO Full Raw Interrupt
N                                            // Status
N#define I2C_MRIS_TXFERIS        0x00000400  // Transmit FIFO Empty Raw
N                                            // Interrupt Status
N#define I2C_MRIS_RXRIS          0x00000200  // Receive FIFO Request Raw
N                                            // Interrupt Status
N#define I2C_MRIS_TXRIS          0x00000100  // Transmit Request Raw Interrupt
N                                            // Status
N#define I2C_MRIS_ARBLOSTRIS     0x00000080  // Arbitration Lost Raw Interrupt
N                                            // Status
N#define I2C_MRIS_STOPRIS        0x00000040  // STOP Detection Raw Interrupt
N                                            // Status
N#define I2C_MRIS_STARTRIS       0x00000020  // START Detection Raw Interrupt
N                                            // Status
N#define I2C_MRIS_NACKRIS        0x00000010  // Address/Data NACK Raw Interrupt
N                                            // Status
N#define I2C_MRIS_DMATXRIS       0x00000008  // Transmit DMA Raw Interrupt
N                                            // Status
N#define I2C_MRIS_DMARXRIS       0x00000004  // Receive DMA Raw Interrupt Status
N#define I2C_MRIS_CLKRIS         0x00000002  // Clock Timeout Raw Interrupt
N                                            // Status
N#define I2C_MRIS_RIS            0x00000001  // Master Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MMIS register.
N//
N//*****************************************************************************
N#define I2C_MMIS_RXFFMIS        0x00000800  // Receive FIFO Full Interrupt Mask
N#define I2C_MMIS_TXFEMIS        0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_MMIS_RXMIS          0x00000200  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_MMIS_TXMIS          0x00000100  // Transmit Request Interrupt Mask
N#define I2C_MMIS_ARBLOSTMIS     0x00000080  // Arbitration Lost Interrupt Mask
N#define I2C_MMIS_STOPMIS        0x00000040  // STOP Detection Interrupt Mask
N#define I2C_MMIS_STARTMIS       0x00000020  // START Detection Interrupt Mask
N#define I2C_MMIS_NACKMIS        0x00000010  // Address/Data NACK Interrupt Mask
N#define I2C_MMIS_DMATXMIS       0x00000008  // Transmit DMA Interrupt Status
N#define I2C_MMIS_DMARXMIS       0x00000004  // Receive DMA Interrupt Status
N#define I2C_MMIS_CLKMIS         0x00000002  // Clock Timeout Masked Interrupt
N                                            // Status
N#define I2C_MMIS_MIS            0x00000001  // Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MICR register.
N//
N//*****************************************************************************
N#define I2C_MICR_RXFFIC         0x00000800  // Receive FIFO Full Interrupt
N                                            // Clear
N#define I2C_MICR_TXFEIC         0x00000400  // Transmit FIFO Empty Interrupt
N                                            // Clear
N#define I2C_MICR_RXIC           0x00000200  // Receive FIFO Request Interrupt
N                                            // Clear
N#define I2C_MICR_TXIC           0x00000100  // Transmit FIFO Request Interrupt
N                                            // Clear
N#define I2C_MICR_ARBLOSTIC      0x00000080  // Arbitration Lost Interrupt Clear
N#define I2C_MICR_STOPIC         0x00000040  // STOP Detection Interrupt Clear
N#define I2C_MICR_STARTIC        0x00000020  // START Detection Interrupt Clear
N#define I2C_MICR_NACKIC         0x00000010  // Address/Data NACK Interrupt
N                                            // Clear
N#define I2C_MICR_DMATXIC        0x00000008  // Transmit DMA Interrupt Clear
N#define I2C_MICR_DMARXIC        0x00000004  // Receive DMA Interrupt Clear
N#define I2C_MICR_CLKIC          0x00000002  // Clock Timeout Interrupt Clear
N#define I2C_MICR_IC             0x00000001  // Master Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCR register.
N//
N//*****************************************************************************
N#define I2C_MCR_GFE             0x00000040  // I2C Glitch Filter Enable
N#define I2C_MCR_SFE             0x00000020  // I2C Slave Function Enable
N#define I2C_MCR_MFE             0x00000010  // I2C Master Function Enable
N#define I2C_MCR_LPBK            0x00000001  // I2C Loopback
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCLKOCNT register.
N//
N//*****************************************************************************
N#define I2C_MCLKOCNT_CNTL_M     0x000000FF  // I2C Master Count
N#define I2C_MCLKOCNT_CNTL_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBMON register.
N//
N//*****************************************************************************
N#define I2C_MBMON_SDA           0x00000002  // I2C SDA Status
N#define I2C_MBMON_SCL           0x00000001  // I2C SCL Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBLEN register.
N//
N//*****************************************************************************
N#define I2C_MBLEN_CNTL_M        0x000000FF  // I2C Burst Length
N#define I2C_MBLEN_CNTL_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MBCNT register.
N//
N//*****************************************************************************
N#define I2C_MBCNT_CNTL_M        0x000000FF  // I2C Master Burst Count
N#define I2C_MBCNT_CNTL_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_MCR2 register.
N//
N//*****************************************************************************
N#define I2C_MCR2_GFPW_M         0x00000070  // I2C Glitch Filter Pulse Width
N#define I2C_MCR2_GFPW_BYPASS    0x00000000  // Bypass
N#define I2C_MCR2_GFPW_1         0x00000010  // 1 clock
N#define I2C_MCR2_GFPW_2         0x00000020  // 2 clocks
N#define I2C_MCR2_GFPW_3         0x00000030  // 3 clocks
N#define I2C_MCR2_GFPW_4         0x00000040  // 4 clocks
N#define I2C_MCR2_GFPW_8         0x00000050  // 8 clocks
N#define I2C_MCR2_GFPW_16        0x00000060  // 16 clocks
N#define I2C_MCR2_GFPW_31        0x00000070  // 31 clocks
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SOAR register.
N//
N//*****************************************************************************
N#define I2C_SOAR_OAR_M          0x0000007F  // I2C Slave Own Address
N#define I2C_SOAR_OAR_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SCSR register.
N//
N//*****************************************************************************
N#define I2C_SCSR_ACTDMARX       0x80000000  // DMA RX Active Status
N#define I2C_SCSR_ACTDMATX       0x40000000  // DMA TX Active Status
N#define I2C_SCSR_QCMDRW         0x00000020  // Quick Command Read / Write
N#define I2C_SCSR_QCMDST         0x00000010  // Quick Command Status
N#define I2C_SCSR_OAR2SEL        0x00000008  // OAR2 Address Matched
N#define I2C_SCSR_FBR            0x00000004  // First Byte Received
N#define I2C_SCSR_RXFIFO         0x00000004  // RX FIFO Enable
N#define I2C_SCSR_TXFIFO         0x00000002  // TX FIFO Enable
N#define I2C_SCSR_TREQ           0x00000002  // Transmit Request
N#define I2C_SCSR_DA             0x00000001  // Device Active
N#define I2C_SCSR_RREQ           0x00000001  // Receive Request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SDR register.
N//
N//*****************************************************************************
N#define I2C_SDR_DATA_M          0x000000FF  // Data for Transfer
N#define I2C_SDR_DATA_S          0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SIMR register.
N//
N//*****************************************************************************
N#define I2C_SIMR_RXFFIM         0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SIMR_TXFEIM         0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SIMR_RXIM           0x00000040  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_SIMR_TXIM           0x00000020  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_SIMR_DMATXIM        0x00000010  // Transmit DMA Interrupt Mask
N#define I2C_SIMR_DMARXIM        0x00000008  // Receive DMA Interrupt Mask
N#define I2C_SIMR_STOPIM         0x00000004  // Stop Condition Interrupt Mask
N#define I2C_SIMR_STARTIM        0x00000002  // Start Condition Interrupt Mask
N#define I2C_SIMR_DATAIM         0x00000001  // Data Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SRIS register.
N//
N//*****************************************************************************
N#define I2C_SRIS_RXFFRIS        0x00000100  // Receive FIFO Full Raw Interrupt
N                                            // Status
N#define I2C_SRIS_TXFERIS        0x00000080  // Transmit FIFO Empty Raw
N                                            // Interrupt Status
N#define I2C_SRIS_RXRIS          0x00000040  // Receive FIFO Request Raw
N                                            // Interrupt Status
N#define I2C_SRIS_TXRIS          0x00000020  // Transmit Request Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DMATXRIS       0x00000010  // Transmit DMA Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DMARXRIS       0x00000008  // Receive DMA Raw Interrupt Status
N#define I2C_SRIS_STOPRIS        0x00000004  // Stop Condition Raw Interrupt
N                                            // Status
N#define I2C_SRIS_STARTRIS       0x00000002  // Start Condition Raw Interrupt
N                                            // Status
N#define I2C_SRIS_DATARIS        0x00000001  // Data Raw Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SMIS register.
N//
N//*****************************************************************************
N#define I2C_SMIS_RXFFMIS        0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SMIS_TXFEMIS        0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SMIS_RXMIS          0x00000040  // Receive FIFO Request Interrupt
N                                            // Mask
N#define I2C_SMIS_TXMIS          0x00000020  // Transmit FIFO Request Interrupt
N                                            // Mask
N#define I2C_SMIS_DMATXMIS       0x00000010  // Transmit DMA Masked Interrupt
N                                            // Status
N#define I2C_SMIS_DMARXMIS       0x00000008  // Receive DMA Masked Interrupt
N                                            // Status
N#define I2C_SMIS_STOPMIS        0x00000004  // Stop Condition Masked Interrupt
N                                            // Status
N#define I2C_SMIS_STARTMIS       0x00000002  // Start Condition Masked Interrupt
N                                            // Status
N#define I2C_SMIS_DATAMIS        0x00000001  // Data Masked Interrupt Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SICR register.
N//
N//*****************************************************************************
N#define I2C_SICR_RXFFIC         0x00000100  // Receive FIFO Full Interrupt Mask
N#define I2C_SICR_TXFEIC         0x00000080  // Transmit FIFO Empty Interrupt
N                                            // Mask
N#define I2C_SICR_RXIC           0x00000040  // Receive Request Interrupt Mask
N#define I2C_SICR_TXIC           0x00000020  // Transmit Request Interrupt Mask
N#define I2C_SICR_DMATXIC        0x00000010  // Transmit DMA Interrupt Clear
N#define I2C_SICR_DMARXIC        0x00000008  // Receive DMA Interrupt Clear
N#define I2C_SICR_STOPIC         0x00000004  // Stop Condition Interrupt Clear
N#define I2C_SICR_STARTIC        0x00000002  // Start Condition Interrupt Clear
N#define I2C_SICR_DATAIC         0x00000001  // Data Interrupt Clear
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SOAR2 register.
N//
N//*****************************************************************************
N#define I2C_SOAR2_OAR2EN        0x00000080  // I2C Slave Own Address 2 Enable
N#define I2C_SOAR2_OAR2_M        0x0000007F  // I2C Slave Own Address 2
N#define I2C_SOAR2_OAR2_S        0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_SACKCTL register.
N//
N//*****************************************************************************
N#define I2C_SACKCTL_ACKOVAL     0x00000002  // I2C Slave ACK Override Value
N#define I2C_SACKCTL_ACKOEN      0x00000001  // I2C Slave ACK Override Enable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFODATA register.
N//
N//*****************************************************************************
N#define I2C_FIFODATA_DATA_M     0x000000FF  // I2C TX FIFO Write Data Byte
N#define I2C_FIFODATA_DATA_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFOCTL register.
N//
N//*****************************************************************************
N#define I2C_FIFOCTL_RXASGNMT    0x80000000  // RX Control Assignment
N#define I2C_FIFOCTL_RXFLUSH     0x40000000  // RX FIFO Flush
N#define I2C_FIFOCTL_DMARXENA    0x20000000  // DMA RX Channel Enable
N#define I2C_FIFOCTL_RXTRIG_M    0x00070000  // RX FIFO Trigger
N#define I2C_FIFOCTL_TXASGNMT    0x00008000  // TX Control Assignment
N#define I2C_FIFOCTL_TXFLUSH     0x00004000  // TX FIFO Flush
N#define I2C_FIFOCTL_DMATXENA    0x00002000  // DMA TX Channel Enable
N#define I2C_FIFOCTL_TXTRIG_M    0x00000007  // TX FIFO Trigger
N#define I2C_FIFOCTL_RXTRIG_S    16
N#define I2C_FIFOCTL_TXTRIG_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_FIFOSTATUS
N// register.
N//
N//*****************************************************************************
N#define I2C_FIFOSTATUS_RXABVTRIG                                              \
N                                0x00040000  // RX FIFO Above Trigger Level
X#define I2C_FIFOSTATUS_RXABVTRIG                                                                              0x00040000  
N#define I2C_FIFOSTATUS_RXFF     0x00020000  // RX FIFO Full
N#define I2C_FIFOSTATUS_RXFE     0x00010000  // RX FIFO Empty
N#define I2C_FIFOSTATUS_TXBLWTRIG                                              \
N                                0x00000004  // TX FIFO Below Trigger Level
X#define I2C_FIFOSTATUS_TXBLWTRIG                                                                              0x00000004  
N#define I2C_FIFOSTATUS_TXFF     0x00000002  // TX FIFO Full
N#define I2C_FIFOSTATUS_TXFE     0x00000001  // TX FIFO Empty
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_PP register.
N//
N//*****************************************************************************
N#define I2C_PP_HS               0x00000001  // High-Speed Capable
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the I2C_O_PC register.
N//
N//*****************************************************************************
N#define I2C_PC_HS               0x00000001  // High-Speed Capable
N
N#endif // __HW_I2C_H__
L 50 "i2c.c" 2
N#include "inc/hw_ints.h"
L 1 "inc/hw_ints.h" 1
N//*****************************************************************************
N//
N// hw_ints.h - Macros that define the interrupt assignment on Tiva C Series
N// MCUs.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_INTS_H__
N#define __HW_INTS_H__
N
N//*****************************************************************************
N//
N// The following are defines for the fault assignments.
N//
N//*****************************************************************************
N#define FAULT_NMI               2           // NMI fault
N#define FAULT_HARD              3           // Hard fault
N#define FAULT_MPU               4           // MPU fault
N#define FAULT_BUS               5           // Bus fault
N#define FAULT_USAGE             6           // Usage fault
N#define FAULT_SVCALL            11          // SVCall
N#define FAULT_DEBUG             12          // Debug monitor
N#define FAULT_PENDSV            14          // PendSV
N#define FAULT_SYSTICK           15          // System Tick
N
N//*****************************************************************************
N//
N// TM4C123 Class Interrupts
N//
N//*****************************************************************************
N#define INT_GPIOA_TM4C123       16          // GPIO Port A
N#define INT_GPIOB_TM4C123       17          // GPIO Port B
N#define INT_GPIOC_TM4C123       18          // GPIO Port C
N#define INT_GPIOD_TM4C123       19          // GPIO Port D
N#define INT_GPIOE_TM4C123       20          // GPIO Port E
N#define INT_UART0_TM4C123       21          // UART0
N#define INT_UART1_TM4C123       22          // UART1
N#define INT_SSI0_TM4C123        23          // SSI0
N#define INT_I2C0_TM4C123        24          // I2C0
N#define INT_PWM0_FAULT_TM4C123  25          // PWM0 Fault
N#define INT_PWM0_0_TM4C123      26          // PWM0 Generator 0
N#define INT_PWM0_1_TM4C123      27          // PWM0 Generator 1
N#define INT_PWM0_2_TM4C123      28          // PWM0 Generator 2
N#define INT_QEI0_TM4C123        29          // QEI0
N#define INT_ADC0SS0_TM4C123     30          // ADC0 Sequence 0
N#define INT_ADC0SS1_TM4C123     31          // ADC0 Sequence 1
N#define INT_ADC0SS2_TM4C123     32          // ADC0 Sequence 2
N#define INT_ADC0SS3_TM4C123     33          // ADC0 Sequence 3
N#define INT_WATCHDOG_TM4C123    34          // Watchdog Timers 0 and 1
N#define INT_TIMER0A_TM4C123     35          // 16/32-Bit Timer 0A
N#define INT_TIMER0B_TM4C123     36          // 16/32-Bit Timer 0B
N#define INT_TIMER1A_TM4C123     37          // 16/32-Bit Timer 1A
N#define INT_TIMER1B_TM4C123     38          // 16/32-Bit Timer 1B
N#define INT_TIMER2A_TM4C123     39          // 16/32-Bit Timer 2A
N#define INT_TIMER2B_TM4C123     40          // 16/32-Bit Timer 2B
N#define INT_COMP0_TM4C123       41          // Analog Comparator 0
N#define INT_COMP1_TM4C123       42          // Analog Comparator 1
N#define INT_COMP2_TM4C123       43          // Analog Comparator 2
N#define INT_SYSCTL_TM4C123      44          // System Control
N#define INT_FLASH_TM4C123       45          // Flash Memory Control and EEPROM
N                                            // Control
N#define INT_GPIOF_TM4C123       46          // GPIO Port F
N#define INT_GPIOG_TM4C123       47          // GPIO Port G
N#define INT_GPIOH_TM4C123       48          // GPIO Port H
N#define INT_UART2_TM4C123       49          // UART2
N#define INT_SSI1_TM4C123        50          // SSI1
N#define INT_TIMER3A_TM4C123     51          // 16/32-Bit Timer 3A
N#define INT_TIMER3B_TM4C123     52          // Timer 3B
N#define INT_I2C1_TM4C123        53          // I2C1
N#define INT_QEI1_TM4C123        54          // QEI1
N#define INT_CAN0_TM4C123        55          // CAN0
N#define INT_CAN1_TM4C123        56          // CAN1
N#define INT_HIBERNATE_TM4C123   59          // Hibernation Module
N#define INT_USB0_TM4C123        60          // USB
N#define INT_PWM0_3_TM4C123      61          // PWM Generator 3
N#define INT_UDMA_TM4C123        62          // uDMA Software
N#define INT_UDMAERR_TM4C123     63          // uDMA Error
N#define INT_ADC1SS0_TM4C123     64          // ADC1 Sequence 0
N#define INT_ADC1SS1_TM4C123     65          // ADC1 Sequence 1
N#define INT_ADC1SS2_TM4C123     66          // ADC1 Sequence 2
N#define INT_ADC1SS3_TM4C123     67          // ADC1 Sequence 3
N#define INT_GPIOJ_TM4C123       70          // GPIO Port J
N#define INT_GPIOK_TM4C123       71          // GPIO Port K
N#define INT_GPIOL_TM4C123       72          // GPIO Port L
N#define INT_SSI2_TM4C123        73          // SSI2
N#define INT_SSI3_TM4C123        74          // SSI3
N#define INT_UART3_TM4C123       75          // UART3
N#define INT_UART4_TM4C123       76          // UART4
N#define INT_UART5_TM4C123       77          // UART5
N#define INT_UART6_TM4C123       78          // UART6
N#define INT_UART7_TM4C123       79          // UART7
N#define INT_I2C2_TM4C123        84          // I2C2
N#define INT_I2C3_TM4C123        85          // I2C3
N#define INT_TIMER4A_TM4C123     86          // 16/32-Bit Timer 4A
N#define INT_TIMER4B_TM4C123     87          // 16/32-Bit Timer 4B
N#define INT_TIMER5A_TM4C123     108         // 16/32-Bit Timer 5A
N#define INT_TIMER5B_TM4C123     109         // 16/32-Bit Timer 5B
N#define INT_WTIMER0A_TM4C123    110         // 32/64-Bit Timer 0A
N#define INT_WTIMER0B_TM4C123    111         // 32/64-Bit Timer 0B
N#define INT_WTIMER1A_TM4C123    112         // 32/64-Bit Timer 1A
N#define INT_WTIMER1B_TM4C123    113         // 32/64-Bit Timer 1B
N#define INT_WTIMER2A_TM4C123    114         // 32/64-Bit Timer 2A
N#define INT_WTIMER2B_TM4C123    115         // 32/64-Bit Timer 2B
N#define INT_WTIMER3A_TM4C123    116         // 32/64-Bit Timer 3A
N#define INT_WTIMER3B_TM4C123    117         // 32/64-Bit Timer 3B
N#define INT_WTIMER4A_TM4C123    118         // 32/64-Bit Timer 4A
N#define INT_WTIMER4B_TM4C123    119         // 32/64-Bit Timer 4B
N#define INT_WTIMER5A_TM4C123    120         // 32/64-Bit Timer 5A
N#define INT_WTIMER5B_TM4C123    121         // 32/64-Bit Timer 5B
N#define INT_SYSEXC_TM4C123      122         // System Exception (imprecise)
N#define INT_I2C4_TM4C123        125         // I2C4
N#define INT_I2C5_TM4C123        126         // I2C5
N#define INT_GPIOM_TM4C123       127         // GPIO Port M
N#define INT_GPION_TM4C123       128         // GPIO Port N
N#define INT_GPIOP0_TM4C123      132         // GPIO Port P (Summary or P0)
N#define INT_GPIOP1_TM4C123      133         // GPIO Port P1
N#define INT_GPIOP2_TM4C123      134         // GPIO Port P2
N#define INT_GPIOP3_TM4C123      135         // GPIO Port P3
N#define INT_GPIOP4_TM4C123      136         // GPIO Port P4
N#define INT_GPIOP5_TM4C123      137         // GPIO Port P5
N#define INT_GPIOP6_TM4C123      138         // GPIO Port P6
N#define INT_GPIOP7_TM4C123      139         // GPIO Port P7
N#define INT_GPIOQ0_TM4C123      140         // GPIO Port Q (Summary or Q0)
N#define INT_GPIOQ1_TM4C123      141         // GPIO Port Q1
N#define INT_GPIOQ2_TM4C123      142         // GPIO Port Q2
N#define INT_GPIOQ3_TM4C123      143         // GPIO Port Q3
N#define INT_GPIOQ4_TM4C123      144         // GPIO Port Q4
N#define INT_GPIOQ5_TM4C123      145         // GPIO Port Q5
N#define INT_GPIOQ6_TM4C123      146         // GPIO Port Q6
N#define INT_GPIOQ7_TM4C123      147         // GPIO Port Q7
N#define INT_PWM1_0_TM4C123      150         // PWM1 Generator 0
N#define INT_PWM1_1_TM4C123      151         // PWM1 Generator 1
N#define INT_PWM1_2_TM4C123      152         // PWM1 Generator 2
N#define INT_PWM1_3_TM4C123      153         // PWM1 Generator 3
N#define INT_PWM1_FAULT_TM4C123  154         // PWM1 Fault
N#define NUM_INTERRUPTS_TM4C123  155
N
N//*****************************************************************************
N//
N// TM4C129 Class Interrupts
N//
N//*****************************************************************************
N#define INT_GPIOA_TM4C129       16          // GPIO Port A
N#define INT_GPIOB_TM4C129       17          // GPIO Port B
N#define INT_GPIOC_TM4C129       18          // GPIO Port C
N#define INT_GPIOD_TM4C129       19          // GPIO Port D
N#define INT_GPIOE_TM4C129       20          // GPIO Port E
N#define INT_UART0_TM4C129       21          // UART0
N#define INT_UART1_TM4C129       22          // UART1
N#define INT_SSI0_TM4C129        23          // SSI0
N#define INT_I2C0_TM4C129        24          // I2C0
N#define INT_PWM0_FAULT_TM4C129  25          // PWM Fault
N#define INT_PWM0_0_TM4C129      26          // PWM Generator 0
N#define INT_PWM0_1_TM4C129      27          // PWM Generator 1
N#define INT_PWM0_2_TM4C129      28          // PWM Generator 2
N#define INT_QEI0_TM4C129        29          // QEI0
N#define INT_ADC0SS0_TM4C129     30          // ADC0 Sequence 0
N#define INT_ADC0SS1_TM4C129     31          // ADC0 Sequence 1
N#define INT_ADC0SS2_TM4C129     32          // ADC0 Sequence 2
N#define INT_ADC0SS3_TM4C129     33          // ADC0 Sequence 3
N#define INT_WATCHDOG_TM4C129    34          // Watchdog Timers 0 and 1
N#define INT_TIMER0A_TM4C129     35          // 16/32-Bit Timer 0A
N#define INT_TIMER0B_TM4C129     36          // 16/32-Bit Timer 0B
N#define INT_TIMER1A_TM4C129     37          // 16/32-Bit Timer 1A
N#define INT_TIMER1B_TM4C129     38          // 16/32-Bit Timer 1B
N#define INT_TIMER2A_TM4C129     39          // 16/32-Bit Timer 2A
N#define INT_TIMER2B_TM4C129     40          // 16/32-Bit Timer 2B
N#define INT_COMP0_TM4C129       41          // Analog Comparator 0
N#define INT_COMP1_TM4C129       42          // Analog Comparator 1
N#define INT_COMP2_TM4C129       43          // Analog Comparator 2
N#define INT_SYSCTL_TM4C129      44          // System Control
N#define INT_FLASH_TM4C129       45          // Flash Memory Control
N#define INT_GPIOF_TM4C129       46          // GPIO Port F
N#define INT_GPIOG_TM4C129       47          // GPIO Port G
N#define INT_GPIOH_TM4C129       48          // GPIO Port H
N#define INT_UART2_TM4C129       49          // UART2
N#define INT_SSI1_TM4C129        50          // SSI1
N#define INT_TIMER3A_TM4C129     51          // 16/32-Bit Timer 3A
N#define INT_TIMER3B_TM4C129     52          // 16/32-Bit Timer 3B
N#define INT_I2C1_TM4C129        53          // I2C1
N#define INT_CAN0_TM4C129        54          // CAN 0
N#define INT_CAN1_TM4C129        55          // CAN1
N#define INT_EMAC0_TM4C129       56          // Ethernet MAC
N#define INT_HIBERNATE_TM4C129   57          // HIB
N#define INT_USB0_TM4C129        58          // USB MAC
N#define INT_PWM0_3_TM4C129      59          // PWM Generator 3
N#define INT_UDMA_TM4C129        60          // uDMA 0 Software
N#define INT_UDMAERR_TM4C129     61          // uDMA 0 Error
N#define INT_ADC1SS0_TM4C129     62          // ADC1 Sequence 0
N#define INT_ADC1SS1_TM4C129     63          // ADC1 Sequence 1
N#define INT_ADC1SS2_TM4C129     64          // ADC1 Sequence 2
N#define INT_ADC1SS3_TM4C129     65          // ADC1 Sequence 3
N#define INT_EPI0_TM4C129        66          // EPI 0
N#define INT_GPIOJ_TM4C129       67          // GPIO Port J
N#define INT_GPIOK_TM4C129       68          // GPIO Port K
N#define INT_GPIOL_TM4C129       69          // GPIO Port L
N#define INT_SSI2_TM4C129        70          // SSI 2
N#define INT_SSI3_TM4C129        71          // SSI 3
N#define INT_UART3_TM4C129       72          // UART 3
N#define INT_UART4_TM4C129       73          // UART 4
N#define INT_UART5_TM4C129       74          // UART 5
N#define INT_UART6_TM4C129       75          // UART 6
N#define INT_UART7_TM4C129       76          // UART 7
N#define INT_I2C2_TM4C129        77          // I2C 2
N#define INT_I2C3_TM4C129        78          // I2C 3
N#define INT_TIMER4A_TM4C129     79          // Timer 4A
N#define INT_TIMER4B_TM4C129     80          // Timer 4B
N#define INT_TIMER5A_TM4C129     81          // Timer 5A
N#define INT_TIMER5B_TM4C129     82          // Timer 5B
N#define INT_SYSEXC_TM4C129      83          // Floating-Point Exception
N                                            // (imprecise)
N#define INT_I2C4_TM4C129        86          // I2C 4
N#define INT_I2C5_TM4C129        87          // I2C 5
N#define INT_GPIOM_TM4C129       88          // GPIO Port M
N#define INT_GPION_TM4C129       89          // GPIO Port N
N#define INT_TAMPER0_TM4C129     91          // Tamper
N#define INT_GPIOP0_TM4C129      92          // GPIO Port P (Summary or P0)
N#define INT_GPIOP1_TM4C129      93          // GPIO Port P1
N#define INT_GPIOP2_TM4C129      94          // GPIO Port P2
N#define INT_GPIOP3_TM4C129      95          // GPIO Port P3
N#define INT_GPIOP4_TM4C129      96          // GPIO Port P4
N#define INT_GPIOP5_TM4C129      97          // GPIO Port P5
N#define INT_GPIOP6_TM4C129      98          // GPIO Port P6
N#define INT_GPIOP7_TM4C129      99          // GPIO Port P7
N#define INT_GPIOQ0_TM4C129      100         // GPIO Port Q (Summary or Q0)
N#define INT_GPIOQ1_TM4C129      101         // GPIO Port Q1
N#define INT_GPIOQ2_TM4C129      102         // GPIO Port Q2
N#define INT_GPIOQ3_TM4C129      103         // GPIO Port Q3
N#define INT_GPIOQ4_TM4C129      104         // GPIO Port Q4
N#define INT_GPIOQ5_TM4C129      105         // GPIO Port Q5
N#define INT_GPIOQ6_TM4C129      106         // GPIO Port Q6
N#define INT_GPIOQ7_TM4C129      107         // GPIO Port Q7
N#define INT_GPIOR_TM4C129       108         // GPIO Port R
N#define INT_GPIOS_TM4C129       109         // GPIO Port S
N#define INT_SHA0_TM4C129        110         // SHA/MD5
N#define INT_AES0_TM4C129        111         // AES
N#define INT_DES0_TM4C129        112         // DES
N#define INT_LCD0_TM4C129        113         // LCD
N#define INT_TIMER6A_TM4C129     114         // 16/32-Bit Timer 6A
N#define INT_TIMER6B_TM4C129     115         // 16/32-Bit Timer 6B
N#define INT_TIMER7A_TM4C129     116         // 16/32-Bit Timer 7A
N#define INT_TIMER7B_TM4C129     117         // 16/32-Bit Timer 7B
N#define INT_I2C6_TM4C129        118         // I2C 6
N#define INT_I2C7_TM4C129        119         // I2C 7
N#define INT_ONEWIRE0_TM4C129    121         // 1-Wire
N#define INT_I2C8_TM4C129        125         // I2C 8
N#define INT_I2C9_TM4C129        126         // I2C 9
N#define INT_GPIOT_TM4C129       127         // GPIO T
N#define NUM_INTERRUPTS_TM4C129  129
N
N//*****************************************************************************
N//
N// TM4C123 Interrupt Class Definition
N//
N//*****************************************************************************
N#if defined(TARGET_IS_TM4C123_RA1) || defined(TARGET_IS_TM4C123_RA2) || \
N    defined(TARGET_IS_TM4C123_RA3) || defined(TARGET_IS_TM4C123_RB0) || \
N    defined(TARGET_IS_TM4C123_RB1) || defined(PART_TM4C1230C3PM) || \
N    defined(PART_TM4C1230D5PM) || defined(PART_TM4C1230E6PM) || \
N    defined(PART_TM4C1230H6PM) || defined(PART_TM4C1231C3PM) || \
N    defined(PART_TM4C1231D5PM) || defined(PART_TM4C1231D5PZ) || \
N    defined(PART_TM4C1231E6PM) || defined(PART_TM4C1231E6PZ) || \
N    defined(PART_TM4C1231H6PM) || defined(PART_TM4C1231H6PZ) || \
N    defined(PART_TM4C1232C3PM) || defined(PART_TM4C1232D5PM) || \
N    defined(PART_TM4C1232E6PM) || defined(PART_TM4C1232H6PM) || \
N    defined(PART_TM4C1233C3PM) || defined(PART_TM4C1233D5PM) || \
N    defined(PART_TM4C1233D5PZ) || defined(PART_TM4C1233E6PM) || \
N    defined(PART_TM4C1233E6PZ) || defined(PART_TM4C1233H6PM) || \
N    defined(PART_TM4C1233H6PZ) || defined(PART_TM4C1236D5PM) || \
N    defined(PART_TM4C1236E6PM) || defined(PART_TM4C1236H6PM) || \
N    defined(PART_TM4C1237D5PM) || defined(PART_TM4C1237D5PZ) || \
N    defined(PART_TM4C1237E6PM) || defined(PART_TM4C1237E6PZ) || \
N    defined(PART_TM4C1237H6PM) || defined(PART_TM4C1237H6PZ) || \
N    defined(PART_TM4C123AE6PM) || defined(PART_TM4C123AH6PM) || \
N    defined(PART_TM4C123BE6PM) || defined(PART_TM4C123BE6PZ) || \
N    defined(PART_TM4C123BH6PM) || defined(PART_TM4C123BH6PZ) || \
N    defined(PART_TM4C123FE6PM) || defined(PART_TM4C123FH6PM) || \
N    defined(PART_TM4C123GE6PM) || defined(PART_TM4C123GE6PZ) || \
N    defined(PART_TM4C123GH6PM) || defined(PART_TM4C123GH6PZ) || \
N    defined(PART_TM4C1231H6PGE) || defined(PART_TM4C1233H6PGE) || \
N    defined(PART_TM4C1237H6PGE) || defined(PART_TM4C123BH6PGE) || \
N    defined(PART_TM4C123BH6ZRB) || defined(PART_TM4C123GH6PGE) || \
N    defined(PART_TM4C123GH6ZRB) || defined(PART_TM4C123GH6ZXR)
X#if 0L || 0L ||     0L || 0L ||     1L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     1L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L ||     0L || 0L
N#define INT_RESOLVE(intname, class) intname##TM4C123
N
N//*****************************************************************************
N//
N// TM4C129 Interrupt Class Definition
N//
N//*****************************************************************************
N#elif defined(TARGET_IS_TM4C129_RA0) || defined(PART_TM4C1290NCPDT) || \
N    defined(PART_TM4C1290NCZAD) || defined(PART_TM4C1292NCPDT) || \
N    defined(PART_TM4C1292NCZAD) || defined(PART_TM4C1294KCPDT) || \
N    defined(PART_TM4C1294NCPDT) || defined(PART_TM4C1294NCZAD) || \
N    defined(PART_TM4C1297NCZAD) || defined(PART_TM4C1299KCZAD) || \
N    defined(PART_TM4C1299NCZAD) || defined(PART_TM4C129CNCPDT) || \
N    defined(PART_TM4C129CNCZAD) || defined(PART_TM4C129DNCPDT) || \
N    defined(PART_TM4C129DNCZAD) || defined(PART_TM4C129EKCPDT) || \
N    defined(PART_TM4C129ENCPDT) || defined(PART_TM4C129ENCZAD) || \
N    defined(PART_TM4C129LNCZAD) || defined(PART_TM4C129XKCZAD) || \
N    defined(PART_TM4C129XNCZAD)
X#elif defined(TARGET_IS_TM4C129_RA0) || defined(PART_TM4C1290NCPDT) ||     defined(PART_TM4C1290NCZAD) || defined(PART_TM4C1292NCPDT) ||     defined(PART_TM4C1292NCZAD) || defined(PART_TM4C1294KCPDT) ||     defined(PART_TM4C1294NCPDT) || defined(PART_TM4C1294NCZAD) ||     defined(PART_TM4C1297NCZAD) || defined(PART_TM4C1299KCZAD) ||     defined(PART_TM4C1299NCZAD) || defined(PART_TM4C129CNCPDT) ||     defined(PART_TM4C129CNCZAD) || defined(PART_TM4C129DNCPDT) ||     defined(PART_TM4C129DNCZAD) || defined(PART_TM4C129EKCPDT) ||     defined(PART_TM4C129ENCPDT) || defined(PART_TM4C129ENCZAD) ||     defined(PART_TM4C129LNCZAD) || defined(PART_TM4C129XKCZAD) ||     defined(PART_TM4C129XNCZAD)
S#define INT_RESOLVE(intname, class) intname##TM4C129
S#else
S#define INT_DEVICE_CLASS        "UNKNOWN"
N#endif
N
N//*****************************************************************************
N//
N// Macros to resolve the INT_PERIPH_CLASS name to a common INT_PERIPH name.
N//
N//*****************************************************************************
N#define INT_CONCAT(intname, class)  INT_RESOLVE(intname, class)
N
N//*****************************************************************************
N//
N// The following are defines for the interrupt assignments.
N//
N//*****************************************************************************
N#define INT_ADC0SS0             INT_CONCAT(INT_ADC0SS0_, INT_DEVICE_CLASS)
N#define INT_ADC0SS1             INT_CONCAT(INT_ADC0SS1_, INT_DEVICE_CLASS)
N#define INT_ADC0SS2             INT_CONCAT(INT_ADC0SS2_, INT_DEVICE_CLASS)
N#define INT_ADC0SS3             INT_CONCAT(INT_ADC0SS3_, INT_DEVICE_CLASS)
N#define INT_ADC1SS0             INT_CONCAT(INT_ADC1SS0_, INT_DEVICE_CLASS)
N#define INT_ADC1SS1             INT_CONCAT(INT_ADC1SS1_, INT_DEVICE_CLASS)
N#define INT_ADC1SS2             INT_CONCAT(INT_ADC1SS2_, INT_DEVICE_CLASS)
N#define INT_ADC1SS3             INT_CONCAT(INT_ADC1SS3_, INT_DEVICE_CLASS)
N#define INT_AES0                INT_CONCAT(INT_AES0_, INT_DEVICE_CLASS)
N#define INT_CAN0                INT_CONCAT(INT_CAN0_, INT_DEVICE_CLASS)
N#define INT_CAN1                INT_CONCAT(INT_CAN1_, INT_DEVICE_CLASS)
N#define INT_COMP0               INT_CONCAT(INT_COMP0_, INT_DEVICE_CLASS)
N#define INT_COMP1               INT_CONCAT(INT_COMP1_, INT_DEVICE_CLASS)
N#define INT_COMP2               INT_CONCAT(INT_COMP2_, INT_DEVICE_CLASS)
N#define INT_DES0                INT_CONCAT(INT_DES0_, INT_DEVICE_CLASS)
N#define INT_EMAC0               INT_CONCAT(INT_EMAC0_, INT_DEVICE_CLASS)
N#define INT_EPI0                INT_CONCAT(INT_EPI0_, INT_DEVICE_CLASS)
N#define INT_FLASH               INT_CONCAT(INT_FLASH_, INT_DEVICE_CLASS)
N#define INT_GPIOA               INT_CONCAT(INT_GPIOA_, INT_DEVICE_CLASS)
N#define INT_GPIOB               INT_CONCAT(INT_GPIOB_, INT_DEVICE_CLASS)
N#define INT_GPIOC               INT_CONCAT(INT_GPIOC_, INT_DEVICE_CLASS)
N#define INT_GPIOD               INT_CONCAT(INT_GPIOD_, INT_DEVICE_CLASS)
N#define INT_GPIOE               INT_CONCAT(INT_GPIOE_, INT_DEVICE_CLASS)
N#define INT_GPIOF               INT_CONCAT(INT_GPIOF_, INT_DEVICE_CLASS)
N#define INT_GPIOG               INT_CONCAT(INT_GPIOG_, INT_DEVICE_CLASS)
N#define INT_GPIOH               INT_CONCAT(INT_GPIOH_, INT_DEVICE_CLASS)
N#define INT_GPIOJ               INT_CONCAT(INT_GPIOJ_, INT_DEVICE_CLASS)
N#define INT_GPIOK               INT_CONCAT(INT_GPIOK_, INT_DEVICE_CLASS)
N#define INT_GPIOL               INT_CONCAT(INT_GPIOL_, INT_DEVICE_CLASS)
N#define INT_GPIOM               INT_CONCAT(INT_GPIOM_, INT_DEVICE_CLASS)
N#define INT_GPION               INT_CONCAT(INT_GPION_, INT_DEVICE_CLASS)
N#define INT_GPIOP0              INT_CONCAT(INT_GPIOP0_, INT_DEVICE_CLASS)
N#define INT_GPIOP1              INT_CONCAT(INT_GPIOP1_, INT_DEVICE_CLASS)
N#define INT_GPIOP2              INT_CONCAT(INT_GPIOP2_, INT_DEVICE_CLASS)
N#define INT_GPIOP3              INT_CONCAT(INT_GPIOP3_, INT_DEVICE_CLASS)
N#define INT_GPIOP4              INT_CONCAT(INT_GPIOP4_, INT_DEVICE_CLASS)
N#define INT_GPIOP5              INT_CONCAT(INT_GPIOP5_, INT_DEVICE_CLASS)
N#define INT_GPIOP6              INT_CONCAT(INT_GPIOP6_, INT_DEVICE_CLASS)
N#define INT_GPIOP7              INT_CONCAT(INT_GPIOP7_, INT_DEVICE_CLASS)
N#define INT_GPIOQ0              INT_CONCAT(INT_GPIOQ0_, INT_DEVICE_CLASS)
N#define INT_GPIOQ1              INT_CONCAT(INT_GPIOQ1_, INT_DEVICE_CLASS)
N#define INT_GPIOQ2              INT_CONCAT(INT_GPIOQ2_, INT_DEVICE_CLASS)
N#define INT_GPIOQ3              INT_CONCAT(INT_GPIOQ3_, INT_DEVICE_CLASS)
N#define INT_GPIOQ4              INT_CONCAT(INT_GPIOQ4_, INT_DEVICE_CLASS)
N#define INT_GPIOQ5              INT_CONCAT(INT_GPIOQ5_, INT_DEVICE_CLASS)
N#define INT_GPIOQ6              INT_CONCAT(INT_GPIOQ6_, INT_DEVICE_CLASS)
N#define INT_GPIOQ7              INT_CONCAT(INT_GPIOQ7_, INT_DEVICE_CLASS)
N#define INT_GPIOR               INT_CONCAT(INT_GPIOR_, INT_DEVICE_CLASS)
N#define INT_GPIOS               INT_CONCAT(INT_GPIOS_, INT_DEVICE_CLASS)
N#define INT_GPIOT               INT_CONCAT(INT_GPIOT_, INT_DEVICE_CLASS)
N#define INT_HIBERNATE           INT_CONCAT(INT_HIBERNATE_, INT_DEVICE_CLASS)
N#define INT_I2C0                INT_CONCAT(INT_I2C0_, INT_DEVICE_CLASS)
N#define INT_I2C1                INT_CONCAT(INT_I2C1_, INT_DEVICE_CLASS)
N#define INT_I2C2                INT_CONCAT(INT_I2C2_, INT_DEVICE_CLASS)
N#define INT_I2C3                INT_CONCAT(INT_I2C3_, INT_DEVICE_CLASS)
N#define INT_I2C4                INT_CONCAT(INT_I2C4_, INT_DEVICE_CLASS)
N#define INT_I2C5                INT_CONCAT(INT_I2C5_, INT_DEVICE_CLASS)
N#define INT_I2C6                INT_CONCAT(INT_I2C6_, INT_DEVICE_CLASS)
N#define INT_I2C7                INT_CONCAT(INT_I2C7_, INT_DEVICE_CLASS)
N#define INT_I2C8                INT_CONCAT(INT_I2C8_, INT_DEVICE_CLASS)
N#define INT_I2C9                INT_CONCAT(INT_I2C9_, INT_DEVICE_CLASS)
N#define INT_LCD0                INT_CONCAT(INT_LCD0_, INT_DEVICE_CLASS)
N#define INT_ONEWIRE0            INT_CONCAT(INT_ONEWIRE0_, INT_DEVICE_CLASS)
N#define INT_PWM0_0              INT_CONCAT(INT_PWM0_0_, INT_DEVICE_CLASS)
N#define INT_PWM0_1              INT_CONCAT(INT_PWM0_1_, INT_DEVICE_CLASS)
N#define INT_PWM0_2              INT_CONCAT(INT_PWM0_2_, INT_DEVICE_CLASS)
N#define INT_PWM0_3              INT_CONCAT(INT_PWM0_3_, INT_DEVICE_CLASS)
N#define INT_PWM0_FAULT          INT_CONCAT(INT_PWM0_FAULT_, INT_DEVICE_CLASS)
N#define INT_PWM1_0              INT_CONCAT(INT_PWM1_0_, INT_DEVICE_CLASS)
N#define INT_PWM1_1              INT_CONCAT(INT_PWM1_1_, INT_DEVICE_CLASS)
N#define INT_PWM1_2              INT_CONCAT(INT_PWM1_2_, INT_DEVICE_CLASS)
N#define INT_PWM1_3              INT_CONCAT(INT_PWM1_3_, INT_DEVICE_CLASS)
N#define INT_PWM1_FAULT          INT_CONCAT(INT_PWM1_FAULT_, INT_DEVICE_CLASS)
N#define INT_QEI0                INT_CONCAT(INT_QEI0_, INT_DEVICE_CLASS)
N#define INT_QEI1                INT_CONCAT(INT_QEI1_, INT_DEVICE_CLASS)
N#define INT_SHA0                INT_CONCAT(INT_SHA0_, INT_DEVICE_CLASS)
N#define INT_SSI0                INT_CONCAT(INT_SSI0_, INT_DEVICE_CLASS)
N#define INT_SSI1                INT_CONCAT(INT_SSI1_, INT_DEVICE_CLASS)
N#define INT_SSI2                INT_CONCAT(INT_SSI2_, INT_DEVICE_CLASS)
N#define INT_SSI3                INT_CONCAT(INT_SSI3_, INT_DEVICE_CLASS)
N#define INT_SYSCTL              INT_CONCAT(INT_SYSCTL_, INT_DEVICE_CLASS)
N#define INT_SYSEXC              INT_CONCAT(INT_SYSEXC_, INT_DEVICE_CLASS)
N#define INT_TAMPER0             INT_CONCAT(INT_TAMPER0_, INT_DEVICE_CLASS)
N#define INT_TIMER0A             INT_CONCAT(INT_TIMER0A_, INT_DEVICE_CLASS)
N#define INT_TIMER0B             INT_CONCAT(INT_TIMER0B_, INT_DEVICE_CLASS)
N#define INT_TIMER1A             INT_CONCAT(INT_TIMER1A_, INT_DEVICE_CLASS)
N#define INT_TIMER1B             INT_CONCAT(INT_TIMER1B_, INT_DEVICE_CLASS)
N#define INT_TIMER2A             INT_CONCAT(INT_TIMER2A_, INT_DEVICE_CLASS)
N#define INT_TIMER2B             INT_CONCAT(INT_TIMER2B_, INT_DEVICE_CLASS)
N#define INT_TIMER3A             INT_CONCAT(INT_TIMER3A_, INT_DEVICE_CLASS)
N#define INT_TIMER3B             INT_CONCAT(INT_TIMER3B_, INT_DEVICE_CLASS)
N#define INT_TIMER4A             INT_CONCAT(INT_TIMER4A_, INT_DEVICE_CLASS)
N#define INT_TIMER4B             INT_CONCAT(INT_TIMER4B_, INT_DEVICE_CLASS)
N#define INT_TIMER5A             INT_CONCAT(INT_TIMER5A_, INT_DEVICE_CLASS)
N#define INT_TIMER5B             INT_CONCAT(INT_TIMER5B_, INT_DEVICE_CLASS)
N#define INT_TIMER6A             INT_CONCAT(INT_TIMER6A_, INT_DEVICE_CLASS)
N#define INT_TIMER6B             INT_CONCAT(INT_TIMER6B_, INT_DEVICE_CLASS)
N#define INT_TIMER7A             INT_CONCAT(INT_TIMER7A_, INT_DEVICE_CLASS)
N#define INT_TIMER7B             INT_CONCAT(INT_TIMER7B_, INT_DEVICE_CLASS)
N#define INT_UART0               INT_CONCAT(INT_UART0_, INT_DEVICE_CLASS)
N#define INT_UART1               INT_CONCAT(INT_UART1_, INT_DEVICE_CLASS)
N#define INT_UART2               INT_CONCAT(INT_UART2_, INT_DEVICE_CLASS)
N#define INT_UART3               INT_CONCAT(INT_UART3_, INT_DEVICE_CLASS)
N#define INT_UART4               INT_CONCAT(INT_UART4_, INT_DEVICE_CLASS)
N#define INT_UART5               INT_CONCAT(INT_UART5_, INT_DEVICE_CLASS)
N#define INT_UART6               INT_CONCAT(INT_UART6_, INT_DEVICE_CLASS)
N#define INT_UART7               INT_CONCAT(INT_UART7_, INT_DEVICE_CLASS)
N#define INT_UDMA                INT_CONCAT(INT_UDMA_, INT_DEVICE_CLASS)
N#define INT_UDMAERR             INT_CONCAT(INT_UDMAERR_, INT_DEVICE_CLASS)
N#define INT_USB0                INT_CONCAT(INT_USB0_, INT_DEVICE_CLASS)
N#define INT_WATCHDOG            INT_CONCAT(INT_WATCHDOG_, INT_DEVICE_CLASS)
N#define INT_WTIMER0A            INT_CONCAT(INT_WTIMER0A_, INT_DEVICE_CLASS)
N#define INT_WTIMER0B            INT_CONCAT(INT_WTIMER0B_, INT_DEVICE_CLASS)
N#define INT_WTIMER1A            INT_CONCAT(INT_WTIMER1A_, INT_DEVICE_CLASS)
N#define INT_WTIMER1B            INT_CONCAT(INT_WTIMER1B_, INT_DEVICE_CLASS)
N#define INT_WTIMER2A            INT_CONCAT(INT_WTIMER2A_, INT_DEVICE_CLASS)
N#define INT_WTIMER2B            INT_CONCAT(INT_WTIMER2B_, INT_DEVICE_CLASS)
N#define INT_WTIMER3A            INT_CONCAT(INT_WTIMER3A_, INT_DEVICE_CLASS)
N#define INT_WTIMER3B            INT_CONCAT(INT_WTIMER3B_, INT_DEVICE_CLASS)
N#define INT_WTIMER4A            INT_CONCAT(INT_WTIMER4A_, INT_DEVICE_CLASS)
N#define INT_WTIMER4B            INT_CONCAT(INT_WTIMER4B_, INT_DEVICE_CLASS)
N#define INT_WTIMER5A            INT_CONCAT(INT_WTIMER5A_, INT_DEVICE_CLASS)
N#define INT_WTIMER5B            INT_CONCAT(INT_WTIMER5B_, INT_DEVICE_CLASS)
N
N//*****************************************************************************
N//
N// The following are defines for the total number of interrupts.
N//
N//*****************************************************************************
N#define NUM_INTERRUPTS          INT_CONCAT(NUM_INTERRUPTS_, INT_DEVICE_CLASS)
N
N//*****************************************************************************
N//
N// The following are defines for the total number of priority levels.
N//
N//*****************************************************************************
N#define NUM_PRIORITY            8
N#define NUM_PRIORITY_BITS       3
N
N#endif // __HW_INTS_H__
L 51 "i2c.c" 2
N#include "inc/hw_memmap.h"
L 1 "inc/hw_memmap.h" 1
N//*****************************************************************************
N//
N// hw_memmap.h - Macros defining the memory map of the device.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_MEMMAP_H__
N#define __HW_MEMMAP_H__
N
N//*****************************************************************************
N//
N// The following are defines for the base address of the memories and
N// peripherals.
N//
N//*****************************************************************************
N#define FLASH_BASE              0x00000000  // FLASH memory
N#define SRAM_BASE               0x20000000  // SRAM memory
N#define WATCHDOG0_BASE          0x40000000  // Watchdog0
N#define WATCHDOG1_BASE          0x40001000  // Watchdog1
N#define GPIO_PORTA_BASE         0x40004000  // GPIO Port A
N#define GPIO_PORTB_BASE         0x40005000  // GPIO Port B
N#define GPIO_PORTC_BASE         0x40006000  // GPIO Port C
N#define GPIO_PORTD_BASE         0x40007000  // GPIO Port D
N#define SSI0_BASE               0x40008000  // SSI0
N#define SSI1_BASE               0x40009000  // SSI1
N#define SSI2_BASE               0x4000A000  // SSI2
N#define SSI3_BASE               0x4000B000  // SSI3
N#define UART0_BASE              0x4000C000  // UART0
N#define UART1_BASE              0x4000D000  // UART1
N#define UART2_BASE              0x4000E000  // UART2
N#define UART3_BASE              0x4000F000  // UART3
N#define UART4_BASE              0x40010000  // UART4
N#define UART5_BASE              0x40011000  // UART5
N#define UART6_BASE              0x40012000  // UART6
N#define UART7_BASE              0x40013000  // UART7
N#define I2C0_BASE               0x40020000  // I2C0
N#define I2C1_BASE               0x40021000  // I2C1
N#define I2C2_BASE               0x40022000  // I2C2
N#define I2C3_BASE               0x40023000  // I2C3
N#define GPIO_PORTE_BASE         0x40024000  // GPIO Port E
N#define GPIO_PORTF_BASE         0x40025000  // GPIO Port F
N#define GPIO_PORTG_BASE         0x40026000  // GPIO Port G
N#define GPIO_PORTH_BASE         0x40027000  // GPIO Port H
N#define PWM0_BASE               0x40028000  // Pulse Width Modulator (PWM)
N#define PWM1_BASE               0x40029000  // Pulse Width Modulator (PWM)
N#define QEI0_BASE               0x4002C000  // QEI0
N#define QEI1_BASE               0x4002D000  // QEI1
N#define TIMER0_BASE             0x40030000  // Timer0
N#define TIMER1_BASE             0x40031000  // Timer1
N#define TIMER2_BASE             0x40032000  // Timer2
N#define TIMER3_BASE             0x40033000  // Timer3
N#define TIMER4_BASE             0x40034000  // Timer4
N#define TIMER5_BASE             0x40035000  // Timer5
N#define WTIMER0_BASE            0x40036000  // Wide Timer0
N#define WTIMER1_BASE            0x40037000  // Wide Timer1
N#define ADC0_BASE               0x40038000  // ADC0
N#define ADC1_BASE               0x40039000  // ADC1
N#define COMP_BASE               0x4003C000  // Analog comparators
N#define GPIO_PORTJ_BASE         0x4003D000  // GPIO Port J
N#define CAN0_BASE               0x40040000  // CAN0
N#define CAN1_BASE               0x40041000  // CAN1
N#define WTIMER2_BASE            0x4004C000  // Wide Timer2
N#define WTIMER3_BASE            0x4004D000  // Wide Timer3
N#define WTIMER4_BASE            0x4004E000  // Wide Timer4
N#define WTIMER5_BASE            0x4004F000  // Wide Timer5
N#define USB0_BASE               0x40050000  // USB 0 Controller
N#define GPIO_PORTA_AHB_BASE     0x40058000  // GPIO Port A (high speed)
N#define GPIO_PORTB_AHB_BASE     0x40059000  // GPIO Port B (high speed)
N#define GPIO_PORTC_AHB_BASE     0x4005A000  // GPIO Port C (high speed)
N#define GPIO_PORTD_AHB_BASE     0x4005B000  // GPIO Port D (high speed)
N#define GPIO_PORTE_AHB_BASE     0x4005C000  // GPIO Port E (high speed)
N#define GPIO_PORTF_AHB_BASE     0x4005D000  // GPIO Port F (high speed)
N#define GPIO_PORTG_AHB_BASE     0x4005E000  // GPIO Port G (high speed)
N#define GPIO_PORTH_AHB_BASE     0x4005F000  // GPIO Port H (high speed)
N#define GPIO_PORTJ_AHB_BASE     0x40060000  // GPIO Port J (high speed)
N#define GPIO_PORTK_BASE         0x40061000  // GPIO Port K
N#define GPIO_PORTL_BASE         0x40062000  // GPIO Port L
N#define GPIO_PORTM_BASE         0x40063000  // GPIO Port M
N#define GPIO_PORTN_BASE         0x40064000  // GPIO Port N
N#define GPIO_PORTP_BASE         0x40065000  // GPIO Port P
N#define GPIO_PORTQ_BASE         0x40066000  // GPIO Port Q
N#define GPIO_PORTR_BASE         0x40067000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTS_BASE         0x40068000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define GPIO_PORTT_BASE         0x40069000  // General-Purpose Input/Outputs
N                                            // (GPIOs)
N#define EEPROM_BASE             0x400AF000  // EEPROM memory
N#define ONEWIRE0_BASE           0x400B6000  // 1-Wire Master Module
N#define I2C8_BASE               0x400B8000  // I2C8
N#define I2C9_BASE               0x400B9000  // I2C9
N#define I2C4_BASE               0x400C0000  // I2C4
N#define I2C5_BASE               0x400C1000  // I2C5
N#define I2C6_BASE               0x400C2000  // I2C6
N#define I2C7_BASE               0x400C3000  // I2C7
N#define EPI0_BASE               0x400D0000  // EPI0
N#define TIMER6_BASE             0x400E0000  // General-Purpose Timers
N#define TIMER7_BASE             0x400E1000  // General-Purpose Timers
N#define EMAC0_BASE              0x400EC000  // Ethernet Controller
N#define SYSEXC_BASE             0x400F9000  // System Exception Module
N#define HIB_BASE                0x400FC000  // Hibernation Module
N#define FLASH_CTRL_BASE         0x400FD000  // FLASH Controller
N#define SYSCTL_BASE             0x400FE000  // System Control
N#define UDMA_BASE               0x400FF000  // uDMA Controller
N#define CCM0_BASE               0x44030000  // Cyclical Redundancy Check (CRC)
N#define SHAMD5_BASE             0x44034000  // SHA/MD5 Accelerator
N#define AES_BASE                0x44036000  // Advance Encryption
N                                            // Hardware-Accelerated Module
N#define DES_BASE                0x44038000  // Data Encryption Standard
N                                            // Accelerator (DES)
N#define LCD0_BASE               0x44050000  // LCD Controller
N#define ITM_BASE                0xE0000000  // Instrumentation Trace Macrocell
N#define DWT_BASE                0xE0001000  // Data Watchpoint and Trace
N#define FPB_BASE                0xE0002000  // FLASH Patch and Breakpoint
N#define NVIC_BASE               0xE000E000  // Nested Vectored Interrupt Ctrl
N#define TPIU_BASE               0xE0040000  // Trace Port Interface Unit
N
N#endif // __HW_MEMMAP_H__
L 52 "i2c.c" 2
N#include "inc/hw_sysctl.h"
L 1 "inc/hw_sysctl.h" 1
N//*****************************************************************************
N//
N// hw_sysctl.h - Macros used when accessing the system control hardware.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_SYSCTL_H__
N#define __HW_SYSCTL_H__
N
N//*****************************************************************************
N//
N// The following are defines for the System Control register addresses.
N//
N//*****************************************************************************
N#define SYSCTL_DID0             0x400FE000  // Device Identification 0
N#define SYSCTL_DID1             0x400FE004  // Device Identification 1
N#define SYSCTL_DC0              0x400FE008  // Device Capabilities 0
N#define SYSCTL_DC1              0x400FE010  // Device Capabilities 1
N#define SYSCTL_DC2              0x400FE014  // Device Capabilities 2
N#define SYSCTL_DC3              0x400FE018  // Device Capabilities 3
N#define SYSCTL_DC4              0x400FE01C  // Device Capabilities 4
N#define SYSCTL_DC5              0x400FE020  // Device Capabilities 5
N#define SYSCTL_DC6              0x400FE024  // Device Capabilities 6
N#define SYSCTL_DC7              0x400FE028  // Device Capabilities 7
N#define SYSCTL_DC8              0x400FE02C  // Device Capabilities 8
N#define SYSCTL_PBORCTL          0x400FE030  // Brown-Out Reset Control
N#define SYSCTL_PTBOCTL          0x400FE038  // Power-Temp Brown Out Control
N#define SYSCTL_SRCR0            0x400FE040  // Software Reset Control 0
N#define SYSCTL_SRCR1            0x400FE044  // Software Reset Control 1
N#define SYSCTL_SRCR2            0x400FE048  // Software Reset Control 2
N#define SYSCTL_RIS              0x400FE050  // Raw Interrupt Status
N#define SYSCTL_IMC              0x400FE054  // Interrupt Mask Control
N#define SYSCTL_MISC             0x400FE058  // Masked Interrupt Status and
N                                            // Clear
N#define SYSCTL_RESC             0x400FE05C  // Reset Cause
N#define SYSCTL_PWRTC            0x400FE060  // Power-Temperature Cause
N#define SYSCTL_RCC              0x400FE060  // Run-Mode Clock Configuration
N#define SYSCTL_NMIC             0x400FE064  // NMI Cause Register
N#define SYSCTL_GPIOHBCTL        0x400FE06C  // GPIO High-Performance Bus
N                                            // Control
N#define SYSCTL_RCC2             0x400FE070  // Run-Mode Clock Configuration 2
N#define SYSCTL_MOSCCTL          0x400FE07C  // Main Oscillator Control
N#define SYSCTL_RSCLKCFG         0x400FE0B0  // Run and Sleep Mode Configuration
N                                            // Register
N#define SYSCTL_MEMTIM0          0x400FE0C0  // Memory Timing Parameter Register
N                                            // 0 for Main Flash and EEPROM
N#define SYSCTL_RCGC0            0x400FE100  // Run Mode Clock Gating Control
N                                            // Register 0
N#define SYSCTL_RCGC1            0x400FE104  // Run Mode Clock Gating Control
N                                            // Register 1
N#define SYSCTL_RCGC2            0x400FE108  // Run Mode Clock Gating Control
N                                            // Register 2
N#define SYSCTL_SCGC0            0x400FE110  // Sleep Mode Clock Gating Control
N                                            // Register 0
N#define SYSCTL_SCGC1            0x400FE114  // Sleep Mode Clock Gating Control
N                                            // Register 1
N#define SYSCTL_SCGC2            0x400FE118  // Sleep Mode Clock Gating Control
N                                            // Register 2
N#define SYSCTL_DCGC0            0x400FE120  // Deep Sleep Mode Clock Gating
N                                            // Control Register 0
N#define SYSCTL_DCGC1            0x400FE124  // Deep-Sleep Mode Clock Gating
N                                            // Control Register 1
N#define SYSCTL_DCGC2            0x400FE128  // Deep Sleep Mode Clock Gating
N                                            // Control Register 2
N#define SYSCTL_ALTCLKCFG        0x400FE138  // Alternate Clock Configuration
N#define SYSCTL_DSLPCLKCFG       0x400FE144  // Deep Sleep Clock Configuration
N#define SYSCTL_DSCLKCFG         0x400FE144  // Deep Sleep Clock Configuration
N                                            // Register
N#define SYSCTL_DIVSCLK          0x400FE148  // Divisor and Source Clock
N                                            // Configuration
N#define SYSCTL_SYSPROP          0x400FE14C  // System Properties
N#define SYSCTL_PIOSCCAL         0x400FE150  // Precision Internal Oscillator
N                                            // Calibration
N#define SYSCTL_PIOSCSTAT        0x400FE154  // Precision Internal Oscillator
N                                            // Statistics
N#define SYSCTL_PLLFREQ0         0x400FE160  // PLL Frequency 0
N#define SYSCTL_PLLFREQ1         0x400FE164  // PLL Frequency 1
N#define SYSCTL_PLLSTAT          0x400FE168  // PLL Status
N#define SYSCTL_SLPPWRCFG        0x400FE188  // Sleep Power Configuration
N#define SYSCTL_DSLPPWRCFG       0x400FE18C  // Deep-Sleep Power Configuration
N#define SYSCTL_DC9              0x400FE190  // Device Capabilities 9
N#define SYSCTL_NVMSTAT          0x400FE1A0  // Non-Volatile Memory Information
N#define SYSCTL_LDOSPCTL         0x400FE1B4  // LDO Sleep Power Control
N#define SYSCTL_LDODPCTL         0x400FE1BC  // LDO Deep-Sleep Power Control
N#define SYSCTL_RESBEHAVCTL      0x400FE1D8  // Reset Behavior Control Register
N#define SYSCTL_HSSR             0x400FE1F4  // Hardware System Service Request
N#define SYSCTL_USBPDS           0x400FE280  // USB Power Domain Status
N#define SYSCTL_USBMPC           0x400FE284  // USB Memory Power Control
N#define SYSCTL_EMACPDS          0x400FE288  // Ethernet MAC Power Domain Status
N#define SYSCTL_EMACMPC          0x400FE28C  // Ethernet MAC Memory Power
N                                            // Control
N#define SYSCTL_LCDMPC           0x400FE294  // LCD Memory Power Control
N#define SYSCTL_PPWD             0x400FE300  // Watchdog Timer Peripheral
N                                            // Present
N#define SYSCTL_PPTIMER          0x400FE304  // 16/32-Bit General-Purpose Timer
N                                            // Peripheral Present
N#define SYSCTL_PPGPIO           0x400FE308  // General-Purpose Input/Output
N                                            // Peripheral Present
N#define SYSCTL_PPDMA            0x400FE30C  // Micro Direct Memory Access
N                                            // Peripheral Present
N#define SYSCTL_PPEPI            0x400FE310  // EPI Peripheral Present
N#define SYSCTL_PPHIB            0x400FE314  // Hibernation Peripheral Present
N#define SYSCTL_PPUART           0x400FE318  // Universal Asynchronous
N                                            // Receiver/Transmitter Peripheral
N                                            // Present
N#define SYSCTL_PPSSI            0x400FE31C  // Synchronous Serial Interface
N                                            // Peripheral Present
N#define SYSCTL_PPI2C            0x400FE320  // Inter-Integrated Circuit
N                                            // Peripheral Present
N#define SYSCTL_PPUSB            0x400FE328  // Universal Serial Bus Peripheral
N                                            // Present
N#define SYSCTL_PPEPHY           0x400FE330  // Ethernet PHY Peripheral Present
N#define SYSCTL_PPCAN            0x400FE334  // Controller Area Network
N                                            // Peripheral Present
N#define SYSCTL_PPADC            0x400FE338  // Analog-to-Digital Converter
N                                            // Peripheral Present
N#define SYSCTL_PPACMP           0x400FE33C  // Analog Comparator Peripheral
N                                            // Present
N#define SYSCTL_PPPWM            0x400FE340  // Pulse Width Modulator Peripheral
N                                            // Present
N#define SYSCTL_PPQEI            0x400FE344  // Quadrature Encoder Interface
N                                            // Peripheral Present
N#define SYSCTL_PPLPC            0x400FE348  // Low Pin Count Interface
N                                            // Peripheral Present
N#define SYSCTL_PPPECI           0x400FE350  // Platform Environment Control
N                                            // Interface Peripheral Present
N#define SYSCTL_PPFAN            0x400FE354  // Fan Control Peripheral Present
N#define SYSCTL_PPEEPROM         0x400FE358  // EEPROM Peripheral Present
N#define SYSCTL_PPWTIMER         0x400FE35C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Peripheral Present
N#define SYSCTL_PPRTS            0x400FE370  // Remote Temperature Sensor
N                                            // Peripheral Present
N#define SYSCTL_PPCCM            0x400FE374  // CRC and Cryptographic Modules
N                                            // Peripheral Present
N#define SYSCTL_PPLCD            0x400FE390  // LCD Peripheral Present
N#define SYSCTL_PPOWIRE          0x400FE398  // 1-Wire Peripheral Present
N#define SYSCTL_PPEMAC           0x400FE39C  // Ethernet MAC Peripheral Present
N#define SYSCTL_PPHIM            0x400FE3A4  // Human Interface Master
N                                            // Peripheral Present
N#define SYSCTL_SRWD             0x400FE500  // Watchdog Timer Software Reset
N#define SYSCTL_SRTIMER          0x400FE504  // 16/32-Bit General-Purpose Timer
N                                            // Software Reset
N#define SYSCTL_SRGPIO           0x400FE508  // General-Purpose Input/Output
N                                            // Software Reset
N#define SYSCTL_SRDMA            0x400FE50C  // Micro Direct Memory Access
N                                            // Software Reset
N#define SYSCTL_SREPI            0x400FE510  // EPI Software Reset
N#define SYSCTL_SRHIB            0x400FE514  // Hibernation Software Reset
N#define SYSCTL_SRUART           0x400FE518  // Universal Asynchronous
N                                            // Receiver/Transmitter Software
N                                            // Reset
N#define SYSCTL_SRSSI            0x400FE51C  // Synchronous Serial Interface
N                                            // Software Reset
N#define SYSCTL_SRI2C            0x400FE520  // Inter-Integrated Circuit
N                                            // Software Reset
N#define SYSCTL_SRUSB            0x400FE528  // Universal Serial Bus Software
N                                            // Reset
N#define SYSCTL_SREPHY           0x400FE530  // Ethernet PHY Software Reset
N#define SYSCTL_SRCAN            0x400FE534  // Controller Area Network Software
N                                            // Reset
N#define SYSCTL_SRADC            0x400FE538  // Analog-to-Digital Converter
N                                            // Software Reset
N#define SYSCTL_SRACMP           0x400FE53C  // Analog Comparator Software Reset
N#define SYSCTL_SRPWM            0x400FE540  // Pulse Width Modulator Software
N                                            // Reset
N#define SYSCTL_SRQEI            0x400FE544  // Quadrature Encoder Interface
N                                            // Software Reset
N#define SYSCTL_SREEPROM         0x400FE558  // EEPROM Software Reset
N#define SYSCTL_SRWTIMER         0x400FE55C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Software Reset
N#define SYSCTL_SRCCM            0x400FE574  // CRC and Cryptographic Modules
N                                            // Software Reset
N#define SYSCTL_SRLCD            0x400FE590  // LCD Controller Software Reset
N#define SYSCTL_SROWIRE          0x400FE598  // 1-Wire Software Reset
N#define SYSCTL_SREMAC           0x400FE59C  // Ethernet MAC Software Reset
N#define SYSCTL_RCGCWD           0x400FE600  // Watchdog Timer Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCTIMER        0x400FE604  // 16/32-Bit General-Purpose Timer
N                                            // Run Mode Clock Gating Control
N#define SYSCTL_RCGCGPIO         0x400FE608  // General-Purpose Input/Output Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCDMA          0x400FE60C  // Micro Direct Memory Access Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCEPI          0x400FE610  // EPI Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCHIB          0x400FE614  // Hibernation Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART         0x400FE618  // Universal Asynchronous
N                                            // Receiver/Transmitter Run Mode
N                                            // Clock Gating Control
N#define SYSCTL_RCGCSSI          0x400FE61C  // Synchronous Serial Interface Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCI2C          0x400FE620  // Inter-Integrated Circuit Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCUSB          0x400FE628  // Universal Serial Bus Run Mode
N                                            // Clock Gating Control
N#define SYSCTL_RCGCEPHY         0x400FE630  // Ethernet PHY Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCCAN          0x400FE634  // Controller Area Network Run Mode
N                                            // Clock Gating Control
N#define SYSCTL_RCGCADC          0x400FE638  // Analog-to-Digital Converter Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCACMP         0x400FE63C  // Analog Comparator Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCPWM          0x400FE640  // Pulse Width Modulator Run Mode
N                                            // Clock Gating Control
N#define SYSCTL_RCGCQEI          0x400FE644  // Quadrature Encoder Interface Run
N                                            // Mode Clock Gating Control
N#define SYSCTL_RCGCEEPROM       0x400FE658  // EEPROM Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER       0x400FE65C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCCCM          0x400FE674  // CRC and Cryptographic Modules
N                                            // Run Mode Clock Gating Control
N#define SYSCTL_RCGCLCD          0x400FE690  // LCD Controller Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCOWIRE        0x400FE698  // 1-Wire Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCEMAC         0x400FE69C  // Ethernet MAC Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCWD           0x400FE700  // Watchdog Timer Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCTIMER        0x400FE704  // 16/32-Bit General-Purpose Timer
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCGPIO         0x400FE708  // General-Purpose Input/Output
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCDMA          0x400FE70C  // Micro Direct Memory Access Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_SCGCEPI          0x400FE710  // EPI Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCHIB          0x400FE714  // Hibernation Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART         0x400FE718  // Universal Asynchronous
N                                            // Receiver/Transmitter Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCSSI          0x400FE71C  // Synchronous Serial Interface
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCI2C          0x400FE720  // Inter-Integrated Circuit Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_SCGCUSB          0x400FE728  // Universal Serial Bus Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCEPHY         0x400FE730  // Ethernet PHY Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCCAN          0x400FE734  // Controller Area Network Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_SCGCADC          0x400FE738  // Analog-to-Digital Converter
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCACMP         0x400FE73C  // Analog Comparator Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCPWM          0x400FE740  // Pulse Width Modulator Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCQEI          0x400FE744  // Quadrature Encoder Interface
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCEEPROM       0x400FE758  // EEPROM Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER       0x400FE75C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCCCM          0x400FE774  // CRC and Cryptographic Modules
N                                            // Sleep Mode Clock Gating Control
N#define SYSCTL_SCGCLCD          0x400FE790  // LCD Controller Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCOWIRE        0x400FE798  // 1-Wire Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCEMAC         0x400FE79C  // Ethernet MAC Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWD           0x400FE800  // Watchdog Timer Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCTIMER        0x400FE804  // 16/32-Bit General-Purpose Timer
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCGPIO         0x400FE808  // General-Purpose Input/Output
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCDMA          0x400FE80C  // Micro Direct Memory Access
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCEPI          0x400FE810  // EPI Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCHIB          0x400FE814  // Hibernation Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART         0x400FE818  // Universal Asynchronous
N                                            // Receiver/Transmitter Deep-Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_DCGCSSI          0x400FE81C  // Synchronous Serial Interface
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCI2C          0x400FE820  // Inter-Integrated Circuit
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCUSB          0x400FE828  // Universal Serial Bus Deep-Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_DCGCEPHY         0x400FE830  // Ethernet PHY Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCCAN          0x400FE834  // Controller Area Network
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCADC          0x400FE838  // Analog-to-Digital Converter
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCACMP         0x400FE83C  // Analog Comparator Deep-Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_DCGCPWM          0x400FE840  // Pulse Width Modulator Deep-Sleep
N                                            // Mode Clock Gating Control
N#define SYSCTL_DCGCQEI          0x400FE844  // Quadrature Encoder Interface
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCEEPROM       0x400FE858  // EEPROM Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER       0x400FE85C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCCCM          0x400FE874  // CRC and Cryptographic Modules
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCLCD          0x400FE890  // LCD Controller Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCOWIRE        0x400FE898  // 1-Wire Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCEMAC         0x400FE89C  // Ethernet MAC Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_PCWD             0x400FE900  // Watchdog Timer Power Control
N#define SYSCTL_PCTIMER          0x400FE904  // 16/32-Bit General-Purpose Timer
N                                            // Power Control
N#define SYSCTL_PCGPIO           0x400FE908  // General-Purpose Input/Output
N                                            // Power Control
N#define SYSCTL_PCDMA            0x400FE90C  // Micro Direct Memory Access Power
N                                            // Control
N#define SYSCTL_PCEPI            0x400FE910  // External Peripheral Interface
N                                            // Power Control
N#define SYSCTL_PCHIB            0x400FE914  // Hibernation Power Control
N#define SYSCTL_PCUART           0x400FE918  // Universal Asynchronous
N                                            // Receiver/Transmitter Power
N                                            // Control
N#define SYSCTL_PCSSI            0x400FE91C  // Synchronous Serial Interface
N                                            // Power Control
N#define SYSCTL_PCI2C            0x400FE920  // Inter-Integrated Circuit Power
N                                            // Control
N#define SYSCTL_PCUSB            0x400FE928  // Universal Serial Bus Power
N                                            // Control
N#define SYSCTL_PCEPHY           0x400FE930  // Ethernet PHY Power Control
N#define SYSCTL_PCCAN            0x400FE934  // Controller Area Network Power
N                                            // Control
N#define SYSCTL_PCADC            0x400FE938  // Analog-to-Digital Converter
N                                            // Power Control
N#define SYSCTL_PCACMP           0x400FE93C  // Analog Comparator Power Control
N#define SYSCTL_PCPWM            0x400FE940  // Pulse Width Modulator Power
N                                            // Control
N#define SYSCTL_PCQEI            0x400FE944  // Quadrature Encoder Interface
N                                            // Power Control
N#define SYSCTL_PCEEPROM         0x400FE958  // EEPROM Power Control
N#define SYSCTL_PCCCM            0x400FE974  // CRC and Cryptographic Modules
N                                            // Power Control
N#define SYSCTL_PCLCD            0x400FE990  // LCD Controller Power Control
N#define SYSCTL_PCOWIRE          0x400FE998  // 1-Wire Power Control
N#define SYSCTL_PCEMAC           0x400FE99C  // Ethernet MAC Power Control
N#define SYSCTL_PRWD             0x400FEA00  // Watchdog Timer Peripheral Ready
N#define SYSCTL_PRTIMER          0x400FEA04  // 16/32-Bit General-Purpose Timer
N                                            // Peripheral Ready
N#define SYSCTL_PRGPIO           0x400FEA08  // General-Purpose Input/Output
N                                            // Peripheral Ready
N#define SYSCTL_PRDMA            0x400FEA0C  // Micro Direct Memory Access
N                                            // Peripheral Ready
N#define SYSCTL_PREPI            0x400FEA10  // EPI Peripheral Ready
N#define SYSCTL_PRHIB            0x400FEA14  // Hibernation Peripheral Ready
N#define SYSCTL_PRUART           0x400FEA18  // Universal Asynchronous
N                                            // Receiver/Transmitter Peripheral
N                                            // Ready
N#define SYSCTL_PRSSI            0x400FEA1C  // Synchronous Serial Interface
N                                            // Peripheral Ready
N#define SYSCTL_PRI2C            0x400FEA20  // Inter-Integrated Circuit
N                                            // Peripheral Ready
N#define SYSCTL_PRUSB            0x400FEA28  // Universal Serial Bus Peripheral
N                                            // Ready
N#define SYSCTL_PREPHY           0x400FEA30  // Ethernet PHY Peripheral Ready
N#define SYSCTL_PRCAN            0x400FEA34  // Controller Area Network
N                                            // Peripheral Ready
N#define SYSCTL_PRADC            0x400FEA38  // Analog-to-Digital Converter
N                                            // Peripheral Ready
N#define SYSCTL_PRACMP           0x400FEA3C  // Analog Comparator Peripheral
N                                            // Ready
N#define SYSCTL_PRPWM            0x400FEA40  // Pulse Width Modulator Peripheral
N                                            // Ready
N#define SYSCTL_PRQEI            0x400FEA44  // Quadrature Encoder Interface
N                                            // Peripheral Ready
N#define SYSCTL_PREEPROM         0x400FEA58  // EEPROM Peripheral Ready
N#define SYSCTL_PRWTIMER         0x400FEA5C  // 32/64-Bit Wide General-Purpose
N                                            // Timer Peripheral Ready
N#define SYSCTL_PRCCM            0x400FEA74  // CRC and Cryptographic Modules
N                                            // Peripheral Ready
N#define SYSCTL_PRLCD            0x400FEA90  // LCD Controller Peripheral Ready
N#define SYSCTL_PROWIRE          0x400FEA98  // 1-Wire Peripheral Ready
N#define SYSCTL_PREMAC           0x400FEA9C  // Ethernet MAC Peripheral Ready
N#define SYSCTL_UNIQUEID0        0x400FEF20  // Unique ID 0
N#define SYSCTL_UNIQUEID1        0x400FEF24  // Unique ID 1
N#define SYSCTL_UNIQUEID2        0x400FEF28  // Unique ID 2
N#define SYSCTL_UNIQUEID3        0x400FEF2C  // Unique ID 3
N#define SYSCTL_CCMCGREQ         0x44030204  // Cryptographic Modules Clock
N                                            // Gating Request
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DID0 register.
N//
N//*****************************************************************************
N#define SYSCTL_DID0_VER_M       0x70000000  // DID0 Version
N#define SYSCTL_DID0_VER_1       0x10000000  // Second version of the DID0
N                                            // register format.
N#define SYSCTL_DID0_CLASS_M     0x00FF0000  // Device Class
N#define SYSCTL_DID0_CLASS_TM4C123                                             \
N                                0x00050000  // Tiva TM4C123x and TM4E123x
X#define SYSCTL_DID0_CLASS_TM4C123                                                                             0x00050000  
N                                            // microcontrollers
N#define SYSCTL_DID0_CLASS_TM4C129                                             \
N                                0x000A0000  // Tiva(TM) TM4C129-class
X#define SYSCTL_DID0_CLASS_TM4C129                                                                             0x000A0000  
N                                            // microcontrollers
N#define SYSCTL_DID0_MAJ_M       0x0000FF00  // Major Revision
N#define SYSCTL_DID0_MAJ_REVA    0x00000000  // Revision A (initial device)
N#define SYSCTL_DID0_MAJ_REVB    0x00000100  // Revision B (first base layer
N                                            // revision)
N#define SYSCTL_DID0_MAJ_REVC    0x00000200  // Revision C (second base layer
N                                            // revision)
N#define SYSCTL_DID0_MIN_M       0x000000FF  // Minor Revision
N#define SYSCTL_DID0_MIN_0       0x00000000  // Initial device, or a major
N                                            // revision update
N#define SYSCTL_DID0_MIN_1       0x00000001  // First metal layer change
N#define SYSCTL_DID0_MIN_2       0x00000002  // Second metal layer change
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DID1 register.
N//
N//*****************************************************************************
N#define SYSCTL_DID1_VER_M       0xF0000000  // DID1 Version
N#define SYSCTL_DID1_VER_1       0x10000000  // fury_ib
N#define SYSCTL_DID1_FAM_M       0x0F000000  // Family
N#define SYSCTL_DID1_FAM_TIVA    0x00000000  // Tiva family of microcontollers
N#define SYSCTL_DID1_PRTNO_M     0x00FF0000  // Part Number
N#define SYSCTL_DID1_PRTNO_TM4C1230C3PM                                        \
N                                0x00220000  // TM4C1230C3PM
X#define SYSCTL_DID1_PRTNO_TM4C1230C3PM                                                                        0x00220000  
N#define SYSCTL_DID1_PRTNO_TM4C1230D5PM                                        \
N                                0x00230000  // TM4C1230D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1230D5PM                                                                        0x00230000  
N#define SYSCTL_DID1_PRTNO_TM4C1230E6PM                                        \
N                                0x00200000  // TM4C1230E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1230E6PM                                                                        0x00200000  
N#define SYSCTL_DID1_PRTNO_TM4C1230H6PM                                        \
N                                0x00210000  // TM4C1230H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1230H6PM                                                                        0x00210000  
N#define SYSCTL_DID1_PRTNO_TM4C1231C3PM                                        \
N                                0x00180000  // TM4C1231C3PM
X#define SYSCTL_DID1_PRTNO_TM4C1231C3PM                                                                        0x00180000  
N#define SYSCTL_DID1_PRTNO_TM4C1231D5PM                                        \
N                                0x00190000  // TM4C1231D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1231D5PM                                                                        0x00190000  
N#define SYSCTL_DID1_PRTNO_TM4C1231D5PZ                                        \
N                                0x00360000  // TM4C1231D5PZ
X#define SYSCTL_DID1_PRTNO_TM4C1231D5PZ                                                                        0x00360000  
N#define SYSCTL_DID1_PRTNO_TM4C1231E6PM                                        \
N                                0x00100000  // TM4C1231E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1231E6PM                                                                        0x00100000  
N#define SYSCTL_DID1_PRTNO_TM4C1231E6PZ                                        \
N                                0x00300000  // TM4C1231E6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1231E6PZ                                                                        0x00300000  
N#define SYSCTL_DID1_PRTNO_TM4C1231H6PGE                                       \
N                                0x00350000  // TM4C1231H6PGE
X#define SYSCTL_DID1_PRTNO_TM4C1231H6PGE                                                                       0x00350000  
N#define SYSCTL_DID1_PRTNO_TM4C1231H6PM                                        \
N                                0x00110000  // TM4C1231H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1231H6PM                                                                        0x00110000  
N#define SYSCTL_DID1_PRTNO_TM4C1231H6PZ                                        \
N                                0x00310000  // TM4C1231H6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1231H6PZ                                                                        0x00310000  
N#define SYSCTL_DID1_PRTNO_TM4C1232C3PM                                        \
N                                0x00080000  // TM4C1232C3PM
X#define SYSCTL_DID1_PRTNO_TM4C1232C3PM                                                                        0x00080000  
N#define SYSCTL_DID1_PRTNO_TM4C1232D5PM                                        \
N                                0x00090000  // TM4C1232D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1232D5PM                                                                        0x00090000  
N#define SYSCTL_DID1_PRTNO_TM4C1232E6PM                                        \
N                                0x000A0000  // TM4C1232E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1232E6PM                                                                        0x000A0000  
N#define SYSCTL_DID1_PRTNO_TM4C1232H6PM                                        \
N                                0x000B0000  // TM4C1232H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1232H6PM                                                                        0x000B0000  
N#define SYSCTL_DID1_PRTNO_TM4C1233C3PM                                        \
N                                0x00010000  // TM4C1233C3PM
X#define SYSCTL_DID1_PRTNO_TM4C1233C3PM                                                                        0x00010000  
N#define SYSCTL_DID1_PRTNO_TM4C1233D5PM                                        \
N                                0x00020000  // TM4C1233D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1233D5PM                                                                        0x00020000  
N#define SYSCTL_DID1_PRTNO_TM4C1233D5PZ                                        \
N                                0x00D00000  // TM4C1233D5PZ
X#define SYSCTL_DID1_PRTNO_TM4C1233D5PZ                                                                        0x00D00000  
N#define SYSCTL_DID1_PRTNO_TM4C1233E6PM                                        \
N                                0x00030000  // TM4C1233E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1233E6PM                                                                        0x00030000  
N#define SYSCTL_DID1_PRTNO_TM4C1233E6PZ                                        \
N                                0x00D10000  // TM4C1233E6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1233E6PZ                                                                        0x00D10000  
N#define SYSCTL_DID1_PRTNO_TM4C1233H6PGE                                       \
N                                0x00D60000  // TM4C1233H6PGE
X#define SYSCTL_DID1_PRTNO_TM4C1233H6PGE                                                                       0x00D60000  
N#define SYSCTL_DID1_PRTNO_TM4C1233H6PM                                        \
N                                0x00040000  // TM4C1233H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1233H6PM                                                                        0x00040000  
N#define SYSCTL_DID1_PRTNO_TM4C1233H6PZ                                        \
N                                0x00D20000  // TM4C1233H6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1233H6PZ                                                                        0x00D20000  
N#define SYSCTL_DID1_PRTNO_TM4C1236D5PM                                        \
N                                0x00520000  // TM4C1236D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1236D5PM                                                                        0x00520000  
N#define SYSCTL_DID1_PRTNO_TM4C1236E6PM                                        \
N                                0x00500000  // TM4C1236E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1236E6PM                                                                        0x00500000  
N#define SYSCTL_DID1_PRTNO_TM4C1236H6PM                                        \
N                                0x00510000  // TM4C1236H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1236H6PM                                                                        0x00510000  
N#define SYSCTL_DID1_PRTNO_TM4C1237D5PM                                        \
N                                0x00480000  // TM4C1237D5PM
X#define SYSCTL_DID1_PRTNO_TM4C1237D5PM                                                                        0x00480000  
N#define SYSCTL_DID1_PRTNO_TM4C1237D5PZ                                        \
N                                0x00660000  // TM4C1237D5PZ
X#define SYSCTL_DID1_PRTNO_TM4C1237D5PZ                                                                        0x00660000  
N#define SYSCTL_DID1_PRTNO_TM4C1237E6PM                                        \
N                                0x00400000  // TM4C1237E6PM
X#define SYSCTL_DID1_PRTNO_TM4C1237E6PM                                                                        0x00400000  
N#define SYSCTL_DID1_PRTNO_TM4C1237E6PZ                                        \
N                                0x00600000  // TM4C1237E6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1237E6PZ                                                                        0x00600000  
N#define SYSCTL_DID1_PRTNO_TM4C1237H6PGE                                       \
N                                0x00650000  // TM4C1237H6PGE
X#define SYSCTL_DID1_PRTNO_TM4C1237H6PGE                                                                       0x00650000  
N#define SYSCTL_DID1_PRTNO_TM4C1237H6PM                                        \
N                                0x00410000  // TM4C1237H6PM
X#define SYSCTL_DID1_PRTNO_TM4C1237H6PM                                                                        0x00410000  
N#define SYSCTL_DID1_PRTNO_TM4C1237H6PZ                                        \
N                                0x00610000  // TM4C1237H6PZ
X#define SYSCTL_DID1_PRTNO_TM4C1237H6PZ                                                                        0x00610000  
N#define SYSCTL_DID1_PRTNO_TM4C123AE6PM                                        \
N                                0x00800000  // TM4C123AE6PM
X#define SYSCTL_DID1_PRTNO_TM4C123AE6PM                                                                        0x00800000  
N#define SYSCTL_DID1_PRTNO_TM4C123AH6PM                                        \
N                                0x00830000  // TM4C123AH6PM
X#define SYSCTL_DID1_PRTNO_TM4C123AH6PM                                                                        0x00830000  
N#define SYSCTL_DID1_PRTNO_TM4C123BE6PM                                        \
N                                0x00700000  // TM4C123BE6PM
X#define SYSCTL_DID1_PRTNO_TM4C123BE6PM                                                                        0x00700000  
N#define SYSCTL_DID1_PRTNO_TM4C123BE6PZ                                        \
N                                0x00C30000  // TM4C123BE6PZ
X#define SYSCTL_DID1_PRTNO_TM4C123BE6PZ                                                                        0x00C30000  
N#define SYSCTL_DID1_PRTNO_TM4C123BH6PGE                                       \
N                                0x00C60000  // TM4C123BH6PGE
X#define SYSCTL_DID1_PRTNO_TM4C123BH6PGE                                                                       0x00C60000  
N#define SYSCTL_DID1_PRTNO_TM4C123BH6PM                                        \
N                                0x00730000  // TM4C123BH6PM
X#define SYSCTL_DID1_PRTNO_TM4C123BH6PM                                                                        0x00730000  
N#define SYSCTL_DID1_PRTNO_TM4C123BH6PZ                                        \
N                                0x00C40000  // TM4C123BH6PZ
X#define SYSCTL_DID1_PRTNO_TM4C123BH6PZ                                                                        0x00C40000  
N#define SYSCTL_DID1_PRTNO_TM4C123BH6ZRB                                       \
N                                0x00E90000  // TM4C123BH6ZRB
X#define SYSCTL_DID1_PRTNO_TM4C123BH6ZRB                                                                       0x00E90000  
N#define SYSCTL_DID1_PRTNO_TM4C123FE6PM                                        \
N                                0x00B00000  // TM4C123FE6PM
X#define SYSCTL_DID1_PRTNO_TM4C123FE6PM                                                                        0x00B00000  
N#define SYSCTL_DID1_PRTNO_TM4C123FH6PM                                        \
N                                0x00B10000  // TM4C123FH6PM
X#define SYSCTL_DID1_PRTNO_TM4C123FH6PM                                                                        0x00B10000  
N#define SYSCTL_DID1_PRTNO_TM4C123GE6PM                                        \
N                                0x00A00000  // TM4C123GE6PM
X#define SYSCTL_DID1_PRTNO_TM4C123GE6PM                                                                        0x00A00000  
N#define SYSCTL_DID1_PRTNO_TM4C123GE6PZ                                        \
N                                0x00C00000  // TM4C123GE6PZ
X#define SYSCTL_DID1_PRTNO_TM4C123GE6PZ                                                                        0x00C00000  
N#define SYSCTL_DID1_PRTNO_TM4C123GH6PGE                                       \
N                                0x00C50000  // TM4C123GH6PGE
X#define SYSCTL_DID1_PRTNO_TM4C123GH6PGE                                                                       0x00C50000  
N#define SYSCTL_DID1_PRTNO_TM4C123GH6PM                                        \
N                                0x00A10000  // TM4C123GH6PM
X#define SYSCTL_DID1_PRTNO_TM4C123GH6PM                                                                        0x00A10000  
N#define SYSCTL_DID1_PRTNO_TM4C123GH6PZ                                        \
N                                0x00C10000  // TM4C123GH6PZ
X#define SYSCTL_DID1_PRTNO_TM4C123GH6PZ                                                                        0x00C10000  
N#define SYSCTL_DID1_PRTNO_TM4C123GH6ZRB                                       \
N                                0x00E30000  // TM4C123GH6ZRB
X#define SYSCTL_DID1_PRTNO_TM4C123GH6ZRB                                                                       0x00E30000  
N#define SYSCTL_DID1_PRTNO_TM4C1290NCPDT                                       \
N                                0x00190000  // TM4C1290NCPDT
X#define SYSCTL_DID1_PRTNO_TM4C1290NCPDT                                                                       0x00190000  
N#define SYSCTL_DID1_PRTNO_TM4C1290NCZAD                                       \
N                                0x001B0000  // TM4C1290NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1290NCZAD                                                                       0x001B0000  
N#define SYSCTL_DID1_PRTNO_TM4C1292NCPDT                                       \
N                                0x001C0000  // TM4C1292NCPDT
X#define SYSCTL_DID1_PRTNO_TM4C1292NCPDT                                                                       0x001C0000  
N#define SYSCTL_DID1_PRTNO_TM4C1292NCZAD                                       \
N                                0x001E0000  // TM4C1292NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1292NCZAD                                                                       0x001E0000  
N#define SYSCTL_DID1_PRTNO_TM4C1294KCPDT                                       \
N                                0x00340000  // TM4C1294KCPDT
X#define SYSCTL_DID1_PRTNO_TM4C1294KCPDT                                                                       0x00340000  
N#define SYSCTL_DID1_PRTNO_TM4C1294NCPDT                                       \
N                                0x001F0000  // TM4C1294NCPDT
X#define SYSCTL_DID1_PRTNO_TM4C1294NCPDT                                                                       0x001F0000  
N#define SYSCTL_DID1_PRTNO_TM4C1294NCZAD                                       \
N                                0x00210000  // TM4C1294NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1294NCZAD                                                                       0x00210000  
N#define SYSCTL_DID1_PRTNO_TM4C1297NCZAD                                       \
N                                0x00220000  // TM4C1297NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1297NCZAD                                                                       0x00220000  
N#define SYSCTL_DID1_PRTNO_TM4C1299KCZAD                                       \
N                                0x00360000  // TM4C1299KCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1299KCZAD                                                                       0x00360000  
N#define SYSCTL_DID1_PRTNO_TM4C1299NCZAD                                       \
N                                0x00230000  // TM4C1299NCZAD
X#define SYSCTL_DID1_PRTNO_TM4C1299NCZAD                                                                       0x00230000  
N#define SYSCTL_DID1_PRTNO_TM4C129CNCPDT                                       \
N                                0x00240000  // TM4C129CNCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129CNCPDT                                                                       0x00240000  
N#define SYSCTL_DID1_PRTNO_TM4C129CNCZAD                                       \
N                                0x00260000  // TM4C129CNCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129CNCZAD                                                                       0x00260000  
N#define SYSCTL_DID1_PRTNO_TM4C129DNCPDT                                       \
N                                0x00270000  // TM4C129DNCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129DNCPDT                                                                       0x00270000  
N#define SYSCTL_DID1_PRTNO_TM4C129DNCZAD                                       \
N                                0x00290000  // TM4C129DNCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129DNCZAD                                                                       0x00290000  
N#define SYSCTL_DID1_PRTNO_TM4C129EKCPDT                                       \
N                                0x00350000  // TM4C129EKCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129EKCPDT                                                                       0x00350000  
N#define SYSCTL_DID1_PRTNO_TM4C129ENCPDT                                       \
N                                0x002D0000  // TM4C129ENCPDT
X#define SYSCTL_DID1_PRTNO_TM4C129ENCPDT                                                                       0x002D0000  
N#define SYSCTL_DID1_PRTNO_TM4C129ENCZAD                                       \
N                                0x002F0000  // TM4C129ENCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129ENCZAD                                                                       0x002F0000  
N#define SYSCTL_DID1_PRTNO_TM4C129LNCZAD                                       \
N                                0x00300000  // TM4C129LNCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129LNCZAD                                                                       0x00300000  
N#define SYSCTL_DID1_PRTNO_TM4C129XKCZAD                                       \
N                                0x00370000  // TM4C129XKCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129XKCZAD                                                                       0x00370000  
N#define SYSCTL_DID1_PRTNO_TM4C129XNCZAD                                       \
N                                0x00320000  // TM4C129XNCZAD
X#define SYSCTL_DID1_PRTNO_TM4C129XNCZAD                                                                       0x00320000  
N#define SYSCTL_DID1_PINCNT_M    0x0000E000  // Package Pin Count
N#define SYSCTL_DID1_PINCNT_100  0x00004000  // 100-pin LQFP package
N#define SYSCTL_DID1_PINCNT_64   0x00006000  // 64-pin LQFP package
N#define SYSCTL_DID1_PINCNT_144  0x00008000  // 144-pin LQFP package
N#define SYSCTL_DID1_PINCNT_157  0x0000A000  // 157-pin BGA package
N#define SYSCTL_DID1_PINCNT_128  0x0000C000  // 128-pin TQFP package
N#define SYSCTL_DID1_TEMP_M      0x000000E0  // Temperature Range
N#define SYSCTL_DID1_TEMP_C      0x00000000  // Commercial temperature range
N#define SYSCTL_DID1_TEMP_I      0x00000020  // Industrial temperature range
N#define SYSCTL_DID1_TEMP_E      0x00000040  // Extended temperature range
N#define SYSCTL_DID1_TEMP_IE     0x00000060  // Available in both industrial
N                                            // temperature range (-40C to 85C)
N                                            // and extended temperature range
N                                            // (-40C to 105C) devices. See
N#define SYSCTL_DID1_PKG_M       0x00000018  // Package Type
N#define SYSCTL_DID1_PKG_QFP     0x00000008  // QFP package
N#define SYSCTL_DID1_PKG_BGA     0x00000010  // BGA package
N#define SYSCTL_DID1_ROHS        0x00000004  // RoHS-Compliance
N#define SYSCTL_DID1_QUAL_M      0x00000003  // Qualification Status
N#define SYSCTL_DID1_QUAL_ES     0x00000000  // Engineering Sample (unqualified)
N#define SYSCTL_DID1_QUAL_PP     0x00000001  // Pilot Production (unqualified)
N#define SYSCTL_DID1_QUAL_FQ     0x00000002  // Fully Qualified
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC0 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC0_SRAMSZ_M     0xFFFF0000  // SRAM Size
N#define SYSCTL_DC0_SRAMSZ_2KB   0x00070000  // 2 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_4KB   0x000F0000  // 4 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_6KB   0x00170000  // 6 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_8KB   0x001F0000  // 8 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_12KB  0x002F0000  // 12 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_16KB  0x003F0000  // 16 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_20KB  0x004F0000  // 20 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_24KB  0x005F0000  // 24 KB of SRAM
N#define SYSCTL_DC0_SRAMSZ_32KB  0x007F0000  // 32 KB of SRAM
N#define SYSCTL_DC0_FLASHSZ_M    0x0000FFFF  // Flash Size
N#define SYSCTL_DC0_FLASHSZ_8KB  0x00000003  // 8 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_16KB 0x00000007  // 16 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_32KB 0x0000000F  // 32 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_64KB 0x0000001F  // 64 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_96KB 0x0000002F  // 96 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_128K 0x0000003F  // 128 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_192K 0x0000005F  // 192 KB of Flash
N#define SYSCTL_DC0_FLASHSZ_256K 0x0000007F  // 256 KB of Flash
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC1 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC1_WDT1         0x10000000  // Watchdog Timer1 Present
N#define SYSCTL_DC1_CAN1         0x02000000  // CAN Module 1 Present
N#define SYSCTL_DC1_CAN0         0x01000000  // CAN Module 0 Present
N#define SYSCTL_DC1_PWM1         0x00200000  // PWM Module 1 Present
N#define SYSCTL_DC1_PWM0         0x00100000  // PWM Module 0 Present
N#define SYSCTL_DC1_ADC1         0x00020000  // ADC Module 1 Present
N#define SYSCTL_DC1_ADC0         0x00010000  // ADC Module 0 Present
N#define SYSCTL_DC1_MINSYSDIV_M  0x0000F000  // System Clock Divider
N#define SYSCTL_DC1_MINSYSDIV_80 0x00002000  // Specifies an 80-MHz CPU clock
N                                            // with a PLL divider of 2.5
N#define SYSCTL_DC1_MINSYSDIV_50 0x00003000  // Specifies a 50-MHz CPU clock
N                                            // with a PLL divider of 4
N#define SYSCTL_DC1_MINSYSDIV_40 0x00004000  // Specifies a 40-MHz CPU clock
N                                            // with a PLL divider of 5
N#define SYSCTL_DC1_MINSYSDIV_25 0x00007000  // Specifies a 25-MHz clock with a
N                                            // PLL divider of 8
N#define SYSCTL_DC1_MINSYSDIV_20 0x00009000  // Specifies a 20-MHz clock with a
N                                            // PLL divider of 10
N#define SYSCTL_DC1_ADC1SPD_M    0x00000C00  // Max ADC1 Speed
N#define SYSCTL_DC1_ADC1SPD_125K 0x00000000  // 125K samples/second
N#define SYSCTL_DC1_ADC1SPD_250K 0x00000400  // 250K samples/second
N#define SYSCTL_DC1_ADC1SPD_500K 0x00000800  // 500K samples/second
N#define SYSCTL_DC1_ADC1SPD_1M   0x00000C00  // 1M samples/second
N#define SYSCTL_DC1_ADC0SPD_M    0x00000300  // Max ADC0 Speed
N#define SYSCTL_DC1_ADC0SPD_125K 0x00000000  // 125K samples/second
N#define SYSCTL_DC1_ADC0SPD_250K 0x00000100  // 250K samples/second
N#define SYSCTL_DC1_ADC0SPD_500K 0x00000200  // 500K samples/second
N#define SYSCTL_DC1_ADC0SPD_1M   0x00000300  // 1M samples/second
N#define SYSCTL_DC1_MPU          0x00000080  // MPU Present
N#define SYSCTL_DC1_HIB          0x00000040  // Hibernation Module Present
N#define SYSCTL_DC1_TEMP         0x00000020  // Temp Sensor Present
N#define SYSCTL_DC1_PLL          0x00000010  // PLL Present
N#define SYSCTL_DC1_WDT0         0x00000008  // Watchdog Timer 0 Present
N#define SYSCTL_DC1_SWO          0x00000004  // SWO Trace Port Present
N#define SYSCTL_DC1_SWD          0x00000002  // SWD Present
N#define SYSCTL_DC1_JTAG         0x00000001  // JTAG Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC2_EPI0         0x40000000  // EPI Module 0 Present
N#define SYSCTL_DC2_I2S0         0x10000000  // I2S Module 0 Present
N#define SYSCTL_DC2_COMP2        0x04000000  // Analog Comparator 2 Present
N#define SYSCTL_DC2_COMP1        0x02000000  // Analog Comparator 1 Present
N#define SYSCTL_DC2_COMP0        0x01000000  // Analog Comparator 0 Present
N#define SYSCTL_DC2_TIMER3       0x00080000  // Timer Module 3 Present
N#define SYSCTL_DC2_TIMER2       0x00040000  // Timer Module 2 Present
N#define SYSCTL_DC2_TIMER1       0x00020000  // Timer Module 1 Present
N#define SYSCTL_DC2_TIMER0       0x00010000  // Timer Module 0 Present
N#define SYSCTL_DC2_I2C1HS       0x00008000  // I2C Module 1 Speed
N#define SYSCTL_DC2_I2C1         0x00004000  // I2C Module 1 Present
N#define SYSCTL_DC2_I2C0HS       0x00002000  // I2C Module 0 Speed
N#define SYSCTL_DC2_I2C0         0x00001000  // I2C Module 0 Present
N#define SYSCTL_DC2_QEI1         0x00000200  // QEI Module 1 Present
N#define SYSCTL_DC2_QEI0         0x00000100  // QEI Module 0 Present
N#define SYSCTL_DC2_SSI1         0x00000020  // SSI Module 1 Present
N#define SYSCTL_DC2_SSI0         0x00000010  // SSI Module 0 Present
N#define SYSCTL_DC2_UART2        0x00000004  // UART Module 2 Present
N#define SYSCTL_DC2_UART1        0x00000002  // UART Module 1 Present
N#define SYSCTL_DC2_UART0        0x00000001  // UART Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC3 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC3_32KHZ        0x80000000  // 32KHz Input Clock Available
N#define SYSCTL_DC3_CCP5         0x20000000  // T2CCP1 Pin Present
N#define SYSCTL_DC3_CCP4         0x10000000  // T2CCP0 Pin Present
N#define SYSCTL_DC3_CCP3         0x08000000  // T1CCP1 Pin Present
N#define SYSCTL_DC3_CCP2         0x04000000  // T1CCP0 Pin Present
N#define SYSCTL_DC3_CCP1         0x02000000  // T0CCP1 Pin Present
N#define SYSCTL_DC3_CCP0         0x01000000  // T0CCP0 Pin Present
N#define SYSCTL_DC3_ADC0AIN7     0x00800000  // ADC Module 0 AIN7 Pin Present
N#define SYSCTL_DC3_ADC0AIN6     0x00400000  // ADC Module 0 AIN6 Pin Present
N#define SYSCTL_DC3_ADC0AIN5     0x00200000  // ADC Module 0 AIN5 Pin Present
N#define SYSCTL_DC3_ADC0AIN4     0x00100000  // ADC Module 0 AIN4 Pin Present
N#define SYSCTL_DC3_ADC0AIN3     0x00080000  // ADC Module 0 AIN3 Pin Present
N#define SYSCTL_DC3_ADC0AIN2     0x00040000  // ADC Module 0 AIN2 Pin Present
N#define SYSCTL_DC3_ADC0AIN1     0x00020000  // ADC Module 0 AIN1 Pin Present
N#define SYSCTL_DC3_ADC0AIN0     0x00010000  // ADC Module 0 AIN0 Pin Present
N#define SYSCTL_DC3_PWMFAULT     0x00008000  // PWM Fault Pin Present
N#define SYSCTL_DC3_C2O          0x00004000  // C2o Pin Present
N#define SYSCTL_DC3_C2PLUS       0x00002000  // C2+ Pin Present
N#define SYSCTL_DC3_C2MINUS      0x00001000  // C2- Pin Present
N#define SYSCTL_DC3_C1O          0x00000800  // C1o Pin Present
N#define SYSCTL_DC3_C1PLUS       0x00000400  // C1+ Pin Present
N#define SYSCTL_DC3_C1MINUS      0x00000200  // C1- Pin Present
N#define SYSCTL_DC3_C0O          0x00000100  // C0o Pin Present
N#define SYSCTL_DC3_C0PLUS       0x00000080  // C0+ Pin Present
N#define SYSCTL_DC3_C0MINUS      0x00000040  // C0- Pin Present
N#define SYSCTL_DC3_PWM5         0x00000020  // PWM5 Pin Present
N#define SYSCTL_DC3_PWM4         0x00000010  // PWM4 Pin Present
N#define SYSCTL_DC3_PWM3         0x00000008  // PWM3 Pin Present
N#define SYSCTL_DC3_PWM2         0x00000004  // PWM2 Pin Present
N#define SYSCTL_DC3_PWM1         0x00000002  // PWM1 Pin Present
N#define SYSCTL_DC3_PWM0         0x00000001  // PWM0 Pin Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC4 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC4_EPHY0        0x40000000  // Ethernet PHY Layer 0 Present
N#define SYSCTL_DC4_EMAC0        0x10000000  // Ethernet MAC Layer 0 Present
N#define SYSCTL_DC4_E1588        0x01000000  // 1588 Capable
N#define SYSCTL_DC4_PICAL        0x00040000  // PIOSC Calibrate
N#define SYSCTL_DC4_CCP7         0x00008000  // T3CCP1 Pin Present
N#define SYSCTL_DC4_CCP6         0x00004000  // T3CCP0 Pin Present
N#define SYSCTL_DC4_UDMA         0x00002000  // Micro-DMA Module Present
N#define SYSCTL_DC4_ROM          0x00001000  // Internal Code ROM Present
N#define SYSCTL_DC4_GPIOJ        0x00000100  // GPIO Port J Present
N#define SYSCTL_DC4_GPIOH        0x00000080  // GPIO Port H Present
N#define SYSCTL_DC4_GPIOG        0x00000040  // GPIO Port G Present
N#define SYSCTL_DC4_GPIOF        0x00000020  // GPIO Port F Present
N#define SYSCTL_DC4_GPIOE        0x00000010  // GPIO Port E Present
N#define SYSCTL_DC4_GPIOD        0x00000008  // GPIO Port D Present
N#define SYSCTL_DC4_GPIOC        0x00000004  // GPIO Port C Present
N#define SYSCTL_DC4_GPIOB        0x00000002  // GPIO Port B Present
N#define SYSCTL_DC4_GPIOA        0x00000001  // GPIO Port A Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC5 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC5_PWMFAULT3    0x08000000  // PWM Fault 3 Pin Present
N#define SYSCTL_DC5_PWMFAULT2    0x04000000  // PWM Fault 2 Pin Present
N#define SYSCTL_DC5_PWMFAULT1    0x02000000  // PWM Fault 1 Pin Present
N#define SYSCTL_DC5_PWMFAULT0    0x01000000  // PWM Fault 0 Pin Present
N#define SYSCTL_DC5_PWMEFLT      0x00200000  // PWM Extended Fault Active
N#define SYSCTL_DC5_PWMESYNC     0x00100000  // PWM Extended SYNC Active
N#define SYSCTL_DC5_PWM7         0x00000080  // PWM7 Pin Present
N#define SYSCTL_DC5_PWM6         0x00000040  // PWM6 Pin Present
N#define SYSCTL_DC5_PWM5         0x00000020  // PWM5 Pin Present
N#define SYSCTL_DC5_PWM4         0x00000010  // PWM4 Pin Present
N#define SYSCTL_DC5_PWM3         0x00000008  // PWM3 Pin Present
N#define SYSCTL_DC5_PWM2         0x00000004  // PWM2 Pin Present
N#define SYSCTL_DC5_PWM1         0x00000002  // PWM1 Pin Present
N#define SYSCTL_DC5_PWM0         0x00000001  // PWM0 Pin Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC6 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC6_USB0PHY      0x00000010  // USB Module 0 PHY Present
N#define SYSCTL_DC6_USB0_M       0x00000003  // USB Module 0 Present
N#define SYSCTL_DC6_USB0_DEV     0x00000001  // USB0 is Device Only
N#define SYSCTL_DC6_USB0_HOSTDEV 0x00000002  // USB is Device or Host
N#define SYSCTL_DC6_USB0_OTG     0x00000003  // USB0 is OTG
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC7 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC7_DMACH30      0x40000000  // DMA Channel 30
N#define SYSCTL_DC7_DMACH29      0x20000000  // DMA Channel 29
N#define SYSCTL_DC7_DMACH28      0x10000000  // DMA Channel 28
N#define SYSCTL_DC7_DMACH27      0x08000000  // DMA Channel 27
N#define SYSCTL_DC7_DMACH26      0x04000000  // DMA Channel 26
N#define SYSCTL_DC7_DMACH25      0x02000000  // DMA Channel 25
N#define SYSCTL_DC7_DMACH24      0x01000000  // DMA Channel 24
N#define SYSCTL_DC7_DMACH23      0x00800000  // DMA Channel 23
N#define SYSCTL_DC7_DMACH22      0x00400000  // DMA Channel 22
N#define SYSCTL_DC7_DMACH21      0x00200000  // DMA Channel 21
N#define SYSCTL_DC7_DMACH20      0x00100000  // DMA Channel 20
N#define SYSCTL_DC7_DMACH19      0x00080000  // DMA Channel 19
N#define SYSCTL_DC7_DMACH18      0x00040000  // DMA Channel 18
N#define SYSCTL_DC7_DMACH17      0x00020000  // DMA Channel 17
N#define SYSCTL_DC7_DMACH16      0x00010000  // DMA Channel 16
N#define SYSCTL_DC7_DMACH15      0x00008000  // DMA Channel 15
N#define SYSCTL_DC7_DMACH14      0x00004000  // DMA Channel 14
N#define SYSCTL_DC7_DMACH13      0x00002000  // DMA Channel 13
N#define SYSCTL_DC7_DMACH12      0x00001000  // DMA Channel 12
N#define SYSCTL_DC7_DMACH11      0x00000800  // DMA Channel 11
N#define SYSCTL_DC7_DMACH10      0x00000400  // DMA Channel 10
N#define SYSCTL_DC7_DMACH9       0x00000200  // DMA Channel 9
N#define SYSCTL_DC7_DMACH8       0x00000100  // DMA Channel 8
N#define SYSCTL_DC7_DMACH7       0x00000080  // DMA Channel 7
N#define SYSCTL_DC7_DMACH6       0x00000040  // DMA Channel 6
N#define SYSCTL_DC7_DMACH5       0x00000020  // DMA Channel 5
N#define SYSCTL_DC7_DMACH4       0x00000010  // DMA Channel 4
N#define SYSCTL_DC7_DMACH3       0x00000008  // DMA Channel 3
N#define SYSCTL_DC7_DMACH2       0x00000004  // DMA Channel 2
N#define SYSCTL_DC7_DMACH1       0x00000002  // DMA Channel 1
N#define SYSCTL_DC7_DMACH0       0x00000001  // DMA Channel 0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC8 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC8_ADC1AIN15    0x80000000  // ADC Module 1 AIN15 Pin Present
N#define SYSCTL_DC8_ADC1AIN14    0x40000000  // ADC Module 1 AIN14 Pin Present
N#define SYSCTL_DC8_ADC1AIN13    0x20000000  // ADC Module 1 AIN13 Pin Present
N#define SYSCTL_DC8_ADC1AIN12    0x10000000  // ADC Module 1 AIN12 Pin Present
N#define SYSCTL_DC8_ADC1AIN11    0x08000000  // ADC Module 1 AIN11 Pin Present
N#define SYSCTL_DC8_ADC1AIN10    0x04000000  // ADC Module 1 AIN10 Pin Present
N#define SYSCTL_DC8_ADC1AIN9     0x02000000  // ADC Module 1 AIN9 Pin Present
N#define SYSCTL_DC8_ADC1AIN8     0x01000000  // ADC Module 1 AIN8 Pin Present
N#define SYSCTL_DC8_ADC1AIN7     0x00800000  // ADC Module 1 AIN7 Pin Present
N#define SYSCTL_DC8_ADC1AIN6     0x00400000  // ADC Module 1 AIN6 Pin Present
N#define SYSCTL_DC8_ADC1AIN5     0x00200000  // ADC Module 1 AIN5 Pin Present
N#define SYSCTL_DC8_ADC1AIN4     0x00100000  // ADC Module 1 AIN4 Pin Present
N#define SYSCTL_DC8_ADC1AIN3     0x00080000  // ADC Module 1 AIN3 Pin Present
N#define SYSCTL_DC8_ADC1AIN2     0x00040000  // ADC Module 1 AIN2 Pin Present
N#define SYSCTL_DC8_ADC1AIN1     0x00020000  // ADC Module 1 AIN1 Pin Present
N#define SYSCTL_DC8_ADC1AIN0     0x00010000  // ADC Module 1 AIN0 Pin Present
N#define SYSCTL_DC8_ADC0AIN15    0x00008000  // ADC Module 0 AIN15 Pin Present
N#define SYSCTL_DC8_ADC0AIN14    0x00004000  // ADC Module 0 AIN14 Pin Present
N#define SYSCTL_DC8_ADC0AIN13    0x00002000  // ADC Module 0 AIN13 Pin Present
N#define SYSCTL_DC8_ADC0AIN12    0x00001000  // ADC Module 0 AIN12 Pin Present
N#define SYSCTL_DC8_ADC0AIN11    0x00000800  // ADC Module 0 AIN11 Pin Present
N#define SYSCTL_DC8_ADC0AIN10    0x00000400  // ADC Module 0 AIN10 Pin Present
N#define SYSCTL_DC8_ADC0AIN9     0x00000200  // ADC Module 0 AIN9 Pin Present
N#define SYSCTL_DC8_ADC0AIN8     0x00000100  // ADC Module 0 AIN8 Pin Present
N#define SYSCTL_DC8_ADC0AIN7     0x00000080  // ADC Module 0 AIN7 Pin Present
N#define SYSCTL_DC8_ADC0AIN6     0x00000040  // ADC Module 0 AIN6 Pin Present
N#define SYSCTL_DC8_ADC0AIN5     0x00000020  // ADC Module 0 AIN5 Pin Present
N#define SYSCTL_DC8_ADC0AIN4     0x00000010  // ADC Module 0 AIN4 Pin Present
N#define SYSCTL_DC8_ADC0AIN3     0x00000008  // ADC Module 0 AIN3 Pin Present
N#define SYSCTL_DC8_ADC0AIN2     0x00000004  // ADC Module 0 AIN2 Pin Present
N#define SYSCTL_DC8_ADC0AIN1     0x00000002  // ADC Module 0 AIN1 Pin Present
N#define SYSCTL_DC8_ADC0AIN0     0x00000001  // ADC Module 0 AIN0 Pin Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PBORCTL register.
N//
N//*****************************************************************************
N#define SYSCTL_PBORCTL_BOR0     0x00000004  // VDD under BOR0 Event Action
N#define SYSCTL_PBORCTL_BOR1     0x00000002  // VDD under BOR1 Event Action
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PTBOCTL register.
N//
N//*****************************************************************************
N#define SYSCTL_PTBOCTL_VDDA_UBOR_M                                            \
N                                0x00000300  // VDDA under BOR Event Action
X#define SYSCTL_PTBOCTL_VDDA_UBOR_M                                                                            0x00000300  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_NONE                                         \
N                                0x00000000  // No Action
X#define SYSCTL_PTBOCTL_VDDA_UBOR_NONE                                                                         0x00000000  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_SYSINT                                       \
N                                0x00000100  // System control interrupt
X#define SYSCTL_PTBOCTL_VDDA_UBOR_SYSINT                                                                       0x00000100  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_NMI                                          \
N                                0x00000200  // NMI
X#define SYSCTL_PTBOCTL_VDDA_UBOR_NMI                                                                          0x00000200  
N#define SYSCTL_PTBOCTL_VDDA_UBOR_RST                                          \
N                                0x00000300  // Reset
X#define SYSCTL_PTBOCTL_VDDA_UBOR_RST                                                                          0x00000300  
N#define SYSCTL_PTBOCTL_VDD_UBOR_M                                             \
N                                0x00000003  // VDD (VDDS) under BOR Event
X#define SYSCTL_PTBOCTL_VDD_UBOR_M                                                                             0x00000003  
N                                            // Action
N#define SYSCTL_PTBOCTL_VDD_UBOR_NONE                                          \
N                                0x00000000  // No Action
X#define SYSCTL_PTBOCTL_VDD_UBOR_NONE                                                                          0x00000000  
N#define SYSCTL_PTBOCTL_VDD_UBOR_SYSINT                                        \
N                                0x00000001  // System control interrupt
X#define SYSCTL_PTBOCTL_VDD_UBOR_SYSINT                                                                        0x00000001  
N#define SYSCTL_PTBOCTL_VDD_UBOR_NMI                                           \
N                                0x00000002  // NMI
X#define SYSCTL_PTBOCTL_VDD_UBOR_NMI                                                                           0x00000002  
N#define SYSCTL_PTBOCTL_VDD_UBOR_RST                                           \
N                                0x00000003  // Reset
X#define SYSCTL_PTBOCTL_VDD_UBOR_RST                                                                           0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCR0 register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCR0_WDT1       0x10000000  // WDT1 Reset Control
N#define SYSCTL_SRCR0_CAN1       0x02000000  // CAN1 Reset Control
N#define SYSCTL_SRCR0_CAN0       0x01000000  // CAN0 Reset Control
N#define SYSCTL_SRCR0_PWM0       0x00100000  // PWM Reset Control
N#define SYSCTL_SRCR0_ADC1       0x00020000  // ADC1 Reset Control
N#define SYSCTL_SRCR0_ADC0       0x00010000  // ADC0 Reset Control
N#define SYSCTL_SRCR0_HIB        0x00000040  // HIB Reset Control
N#define SYSCTL_SRCR0_WDT0       0x00000008  // WDT0 Reset Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCR1 register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCR1_COMP2      0x04000000  // Analog Comp 2 Reset Control
N#define SYSCTL_SRCR1_COMP1      0x02000000  // Analog Comp 1 Reset Control
N#define SYSCTL_SRCR1_COMP0      0x01000000  // Analog Comp 0 Reset Control
N#define SYSCTL_SRCR1_TIMER3     0x00080000  // Timer 3 Reset Control
N#define SYSCTL_SRCR1_TIMER2     0x00040000  // Timer 2 Reset Control
N#define SYSCTL_SRCR1_TIMER1     0x00020000  // Timer 1 Reset Control
N#define SYSCTL_SRCR1_TIMER0     0x00010000  // Timer 0 Reset Control
N#define SYSCTL_SRCR1_I2C1       0x00004000  // I2C1 Reset Control
N#define SYSCTL_SRCR1_I2C0       0x00001000  // I2C0 Reset Control
N#define SYSCTL_SRCR1_QEI1       0x00000200  // QEI1 Reset Control
N#define SYSCTL_SRCR1_QEI0       0x00000100  // QEI0 Reset Control
N#define SYSCTL_SRCR1_SSI1       0x00000020  // SSI1 Reset Control
N#define SYSCTL_SRCR1_SSI0       0x00000010  // SSI0 Reset Control
N#define SYSCTL_SRCR1_UART2      0x00000004  // UART2 Reset Control
N#define SYSCTL_SRCR1_UART1      0x00000002  // UART1 Reset Control
N#define SYSCTL_SRCR1_UART0      0x00000001  // UART0 Reset Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCR2 register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCR2_USB0       0x00010000  // USB0 Reset Control
N#define SYSCTL_SRCR2_UDMA       0x00002000  // Micro-DMA Reset Control
N#define SYSCTL_SRCR2_GPIOJ      0x00000100  // Port J Reset Control
N#define SYSCTL_SRCR2_GPIOH      0x00000080  // Port H Reset Control
N#define SYSCTL_SRCR2_GPIOG      0x00000040  // Port G Reset Control
N#define SYSCTL_SRCR2_GPIOF      0x00000020  // Port F Reset Control
N#define SYSCTL_SRCR2_GPIOE      0x00000010  // Port E Reset Control
N#define SYSCTL_SRCR2_GPIOD      0x00000008  // Port D Reset Control
N#define SYSCTL_SRCR2_GPIOC      0x00000004  // Port C Reset Control
N#define SYSCTL_SRCR2_GPIOB      0x00000002  // Port B Reset Control
N#define SYSCTL_SRCR2_GPIOA      0x00000001  // Port A Reset Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RIS register.
N//
N//*****************************************************************************
N#define SYSCTL_RIS_BOR0RIS      0x00000800  // VDD under BOR0 Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_VDDARIS      0x00000400  // VDDA Power OK Event Raw
N                                            // Interrupt Status
N#define SYSCTL_RIS_MOSCPUPRIS   0x00000100  // MOSC Power Up Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_USBPLLLRIS   0x00000080  // USB PLL Lock Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_PLLLRIS      0x00000040  // PLL Lock Raw Interrupt Status
N#define SYSCTL_RIS_MOFRIS       0x00000008  // Main Oscillator Failure Raw
N                                            // Interrupt Status
N#define SYSCTL_RIS_BOR1RIS      0x00000002  // VDD under BOR1 Raw Interrupt
N                                            // Status
N#define SYSCTL_RIS_BORRIS       0x00000002  // Brown-Out Reset Raw Interrupt
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_IMC register.
N//
N//*****************************************************************************
N#define SYSCTL_IMC_BOR0IM       0x00000800  // VDD under BOR0 Interrupt Mask
N#define SYSCTL_IMC_VDDAIM       0x00000400  // VDDA Power OK Interrupt Mask
N#define SYSCTL_IMC_MOSCPUPIM    0x00000100  // MOSC Power Up Interrupt Mask
N#define SYSCTL_IMC_USBPLLLIM    0x00000080  // USB PLL Lock Interrupt Mask
N#define SYSCTL_IMC_PLLLIM       0x00000040  // PLL Lock Interrupt Mask
N#define SYSCTL_IMC_MOFIM        0x00000008  // Main Oscillator Failure
N                                            // Interrupt Mask
N#define SYSCTL_IMC_BORIM        0x00000002  // Brown-Out Reset Interrupt Mask
N#define SYSCTL_IMC_BOR1IM       0x00000002  // VDD under BOR1 Interrupt Mask
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MISC register.
N//
N//*****************************************************************************
N#define SYSCTL_MISC_BOR0MIS     0x00000800  // VDD under BOR0 Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_VDDAMIS     0x00000400  // VDDA Power OK Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_MOSCPUPMIS  0x00000100  // MOSC Power Up Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_USBPLLLMIS  0x00000080  // USB PLL Lock Masked Interrupt
N                                            // Status
N#define SYSCTL_MISC_PLLLMIS     0x00000040  // PLL Lock Masked Interrupt Status
N#define SYSCTL_MISC_MOFMIS      0x00000008  // Main Oscillator Failure Masked
N                                            // Interrupt Status
N#define SYSCTL_MISC_BORMIS      0x00000002  // BOR Masked Interrupt Status
N#define SYSCTL_MISC_BOR1MIS     0x00000002  // VDD under BOR1 Masked Interrupt
N                                            // Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RESC register.
N//
N//*****************************************************************************
N#define SYSCTL_RESC_MOSCFAIL    0x00010000  // MOSC Failure Reset
N#define SYSCTL_RESC_HSSR        0x00001000  // HSSR Reset
N#define SYSCTL_RESC_WDT1        0x00000020  // Watchdog Timer 1 Reset
N#define SYSCTL_RESC_SW          0x00000010  // Software Reset
N#define SYSCTL_RESC_WDT0        0x00000008  // Watchdog Timer 0 Reset
N#define SYSCTL_RESC_BOR         0x00000004  // Brown-Out Reset
N#define SYSCTL_RESC_POR         0x00000002  // Power-On Reset
N#define SYSCTL_RESC_EXT         0x00000001  // External Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PWRTC register.
N//
N//*****************************************************************************
N#define SYSCTL_PWRTC_VDDA_UBOR  0x00000010  // VDDA Under BOR Status
N#define SYSCTL_PWRTC_VDD_UBOR   0x00000001  // VDD Under BOR Status
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCC register.
N//
N//*****************************************************************************
N#define SYSCTL_RCC_ACG          0x08000000  // Auto Clock Gating
N#define SYSCTL_RCC_SYSDIV_M     0x07800000  // System Clock Divisor
N#define SYSCTL_RCC_USESYSDIV    0x00400000  // Enable System Clock Divider
N#define SYSCTL_RCC_USEPWMDIV    0x00100000  // Enable PWM Clock Divisor
N#define SYSCTL_RCC_PWMDIV_M     0x000E0000  // PWM Unit Clock Divisor
N#define SYSCTL_RCC_PWMDIV_2     0x00000000  // PWM clock /2
N#define SYSCTL_RCC_PWMDIV_4     0x00020000  // PWM clock /4
N#define SYSCTL_RCC_PWMDIV_8     0x00040000  // PWM clock /8
N#define SYSCTL_RCC_PWMDIV_16    0x00060000  // PWM clock /16
N#define SYSCTL_RCC_PWMDIV_32    0x00080000  // PWM clock /32
N#define SYSCTL_RCC_PWMDIV_64    0x000A0000  // PWM clock /64
N#define SYSCTL_RCC_PWRDN        0x00002000  // PLL Power Down
N#define SYSCTL_RCC_BYPASS       0x00000800  // PLL Bypass
N#define SYSCTL_RCC_XTAL_M       0x000007C0  // Crystal Value
N#define SYSCTL_RCC_XTAL_4MHZ    0x00000180  // 4 MHz
N#define SYSCTL_RCC_XTAL_4_09MHZ 0x000001C0  // 4.096 MHz
N#define SYSCTL_RCC_XTAL_4_91MHZ 0x00000200  // 4.9152 MHz
N#define SYSCTL_RCC_XTAL_5MHZ    0x00000240  // 5 MHz
N#define SYSCTL_RCC_XTAL_5_12MHZ 0x00000280  // 5.12 MHz
N#define SYSCTL_RCC_XTAL_6MHZ    0x000002C0  // 6 MHz
N#define SYSCTL_RCC_XTAL_6_14MHZ 0x00000300  // 6.144 MHz
N#define SYSCTL_RCC_XTAL_7_37MHZ 0x00000340  // 7.3728 MHz
N#define SYSCTL_RCC_XTAL_8MHZ    0x00000380  // 8 MHz
N#define SYSCTL_RCC_XTAL_8_19MHZ 0x000003C0  // 8.192 MHz
N#define SYSCTL_RCC_XTAL_10MHZ   0x00000400  // 10 MHz
N#define SYSCTL_RCC_XTAL_12MHZ   0x00000440  // 12 MHz
N#define SYSCTL_RCC_XTAL_12_2MHZ 0x00000480  // 12.288 MHz
N#define SYSCTL_RCC_XTAL_13_5MHZ 0x000004C0  // 13.56 MHz
N#define SYSCTL_RCC_XTAL_14_3MHZ 0x00000500  // 14.31818 MHz
N#define SYSCTL_RCC_XTAL_16MHZ   0x00000540  // 16 MHz
N#define SYSCTL_RCC_XTAL_16_3MHZ 0x00000580  // 16.384 MHz
N#define SYSCTL_RCC_XTAL_18MHZ   0x000005C0  // 18.0 MHz (USB)
N#define SYSCTL_RCC_XTAL_20MHZ   0x00000600  // 20.0 MHz (USB)
N#define SYSCTL_RCC_XTAL_24MHZ   0x00000640  // 24.0 MHz (USB)
N#define SYSCTL_RCC_XTAL_25MHZ   0x00000680  // 25.0 MHz (USB)
N#define SYSCTL_RCC_OSCSRC_M     0x00000030  // Oscillator Source
N#define SYSCTL_RCC_OSCSRC_MAIN  0x00000000  // MOSC
N#define SYSCTL_RCC_OSCSRC_INT   0x00000010  // IOSC
N#define SYSCTL_RCC_OSCSRC_INT4  0x00000020  // IOSC/4
N#define SYSCTL_RCC_OSCSRC_30    0x00000030  // LFIOSC
N#define SYSCTL_RCC_MOSCDIS      0x00000001  // Main Oscillator Disable
N#define SYSCTL_RCC_SYSDIV_S     23
N#define SYSCTL_RCC_XTAL_S       6           // Shift to the XTAL field
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_NMIC register.
N//
N//*****************************************************************************
N#define SYSCTL_NMIC_MOSCFAIL    0x00010000  // MOSC Failure NMI
N#define SYSCTL_NMIC_TAMPER      0x00000200  // Tamper Event NMI
N#define SYSCTL_NMIC_WDT1        0x00000020  // Watch Dog Timer (WDT) 1 NMI
N#define SYSCTL_NMIC_WDT0        0x00000008  // Watch Dog Timer (WDT) 0 NMI
N#define SYSCTL_NMIC_POWER       0x00000004  // Power/Brown Out Event NMI
N#define SYSCTL_NMIC_EXTERNAL    0x00000001  // External Pin NMI
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_GPIOHBCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_GPIOHBCTL_PORTJ  0x00000100  // Port J Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTH  0x00000080  // Port H Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTG  0x00000040  // Port G Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTF  0x00000020  // Port F Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTE  0x00000010  // Port E Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTD  0x00000008  // Port D Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTC  0x00000004  // Port C Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTB  0x00000002  // Port B Advanced High-Performance
N                                            // Bus
N#define SYSCTL_GPIOHBCTL_PORTA  0x00000001  // Port A Advanced High-Performance
N                                            // Bus
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_RCC2_USERCC2     0x80000000  // Use RCC2
N#define SYSCTL_RCC2_DIV400      0x40000000  // Divide PLL as 400 MHz vs. 200
N                                            // MHz
N#define SYSCTL_RCC2_SYSDIV2_M   0x1F800000  // System Clock Divisor 2
N#define SYSCTL_RCC2_SYSDIV2LSB  0x00400000  // Additional LSB for SYSDIV2
N#define SYSCTL_RCC2_USBPWRDN    0x00004000  // Power-Down USB PLL
N#define SYSCTL_RCC2_PWRDN2      0x00002000  // Power-Down PLL 2
N#define SYSCTL_RCC2_BYPASS2     0x00000800  // PLL Bypass 2
N#define SYSCTL_RCC2_OSCSRC2_M   0x00000070  // Oscillator Source 2
N#define SYSCTL_RCC2_OSCSRC2_MO  0x00000000  // MOSC
N#define SYSCTL_RCC2_OSCSRC2_IO  0x00000010  // PIOSC
N#define SYSCTL_RCC2_OSCSRC2_IO4 0x00000020  // PIOSC/4
N#define SYSCTL_RCC2_OSCSRC2_30  0x00000030  // LFIOSC
N#define SYSCTL_RCC2_OSCSRC2_32  0x00000070  // 32.768 kHz
N#define SYSCTL_RCC2_SYSDIV2_S   23
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MOSCCTL register.
N//
N//*****************************************************************************
N#define SYSCTL_MOSCCTL_OSCRNG   0x00000010  // Oscillator Range
N#define SYSCTL_MOSCCTL_PWRDN    0x00000008  // Power Down
N#define SYSCTL_MOSCCTL_NOXTAL   0x00000004  // No Crystal Connected
N#define SYSCTL_MOSCCTL_MOSCIM   0x00000002  // MOSC Failure Action
N#define SYSCTL_MOSCCTL_CVAL     0x00000001  // Clock Validation for MOSC
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RSCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RSCLKCFG_MEMTIMU 0x80000000  // Memory Timing Register Update
N#define SYSCTL_RSCLKCFG_NEWFREQ 0x40000000  // New PLLFREQ Accept
N#define SYSCTL_RSCLKCFG_ACG     0x20000000  // Auto Clock Gating
N#define SYSCTL_RSCLKCFG_USEPLL  0x10000000  // Use PLL
N#define SYSCTL_RSCLKCFG_PLLSRC_M                                              \
N                                0x0F000000  // PLL Source
X#define SYSCTL_RSCLKCFG_PLLSRC_M                                                                              0x0F000000  
N#define SYSCTL_RSCLKCFG_PLLSRC_PIOSC                                          \
N                                0x00000000  // PIOSC is PLL input clock source
X#define SYSCTL_RSCLKCFG_PLLSRC_PIOSC                                                                          0x00000000  
N#define SYSCTL_RSCLKCFG_PLLSRC_MOSC                                           \
N                                0x03000000  // MOSC is the PLL input clock
X#define SYSCTL_RSCLKCFG_PLLSRC_MOSC                                                                           0x03000000  
N                                            // source
N#define SYSCTL_RSCLKCFG_OSCSRC_M                                              \
N                                0x00F00000  // Oscillator Source
X#define SYSCTL_RSCLKCFG_OSCSRC_M                                                                              0x00F00000  
N#define SYSCTL_RSCLKCFG_OSCSRC_PIOSC                                          \
N                                0x00000000  // PIOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_PIOSC                                                                          0x00000000  
N#define SYSCTL_RSCLKCFG_OSCSRC_LFIOSC                                         \
N                                0x00200000  // LFIOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_LFIOSC                                                                         0x00200000  
N#define SYSCTL_RSCLKCFG_OSCSRC_MOSC                                           \
N                                0x00300000  // MOSC is oscillator source
X#define SYSCTL_RSCLKCFG_OSCSRC_MOSC                                                                           0x00300000  
N#define SYSCTL_RSCLKCFG_OSCSRC_RTC                                            \
N                                0x00400000  // Hibernation Module RTC
X#define SYSCTL_RSCLKCFG_OSCSRC_RTC                                                                            0x00400000  
N                                            // Oscillator (RTCOSC)
N#define SYSCTL_RSCLKCFG_OSYSDIV_M                                             \
N                                0x000FFC00  // Oscillator System Clock Divisor
X#define SYSCTL_RSCLKCFG_OSYSDIV_M                                                                             0x000FFC00  
N#define SYSCTL_RSCLKCFG_PSYSDIV_M                                             \
N                                0x000003FF  // PLL System Clock Divisor
X#define SYSCTL_RSCLKCFG_PSYSDIV_M                                                                             0x000003FF  
N#define SYSCTL_RSCLKCFG_OSYSDIV_S                                             \
N                                10
X#define SYSCTL_RSCLKCFG_OSYSDIV_S                                                                             10
N#define SYSCTL_RSCLKCFG_PSYSDIV_S                                             \
N                                0
X#define SYSCTL_RSCLKCFG_PSYSDIV_S                                                                             0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_MEMTIM0 register.
N//
N//*****************************************************************************
N#define SYSCTL_MEMTIM0_EBCHT_M  0x03C00000  // EEPROM Clock High Time
N#define SYSCTL_MEMTIM0_EBCHT_0_5                                              \
N                                0x00000000  // 1/2 system clock period
X#define SYSCTL_MEMTIM0_EBCHT_0_5                                                                              0x00000000  
N#define SYSCTL_MEMTIM0_EBCHT_1  0x00400000  // 1 system clock period
N#define SYSCTL_MEMTIM0_EBCHT_1_5                                              \
N                                0x00800000  // 1.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_1_5                                                                              0x00800000  
N#define SYSCTL_MEMTIM0_EBCHT_2  0x00C00000  // 2 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_2_5                                              \
N                                0x01000000  // 2.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_2_5                                                                              0x01000000  
N#define SYSCTL_MEMTIM0_EBCHT_3  0x01400000  // 3 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_3_5                                              \
N                                0x01800000  // 3.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_3_5                                                                              0x01800000  
N#define SYSCTL_MEMTIM0_EBCHT_4  0x01C00000  // 4 system clock periods
N#define SYSCTL_MEMTIM0_EBCHT_4_5                                              \
N                                0x02000000  // 4.5 system clock periods
X#define SYSCTL_MEMTIM0_EBCHT_4_5                                                                              0x02000000  
N#define SYSCTL_MEMTIM0_EBCE     0x00200000  // EEPROM Bank Clock Edge
N#define SYSCTL_MEMTIM0_MB1      0x00100010  // Must be one
N#define SYSCTL_MEMTIM0_EWS_M    0x000F0000  // EEPROM Wait States
N#define SYSCTL_MEMTIM0_FBCHT_M  0x000003C0  // Flash Bank Clock High Time
N#define SYSCTL_MEMTIM0_FBCHT_0_5                                              \
N                                0x00000000  // 1/2 system clock period
X#define SYSCTL_MEMTIM0_FBCHT_0_5                                                                              0x00000000  
N#define SYSCTL_MEMTIM0_FBCHT_1  0x00000040  // 1 system clock period
N#define SYSCTL_MEMTIM0_FBCHT_1_5                                              \
N                                0x00000080  // 1.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_1_5                                                                              0x00000080  
N#define SYSCTL_MEMTIM0_FBCHT_2  0x000000C0  // 2 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_2_5                                              \
N                                0x00000100  // 2.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_2_5                                                                              0x00000100  
N#define SYSCTL_MEMTIM0_FBCHT_3  0x00000140  // 3 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_3_5                                              \
N                                0x00000180  // 3.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_3_5                                                                              0x00000180  
N#define SYSCTL_MEMTIM0_FBCHT_4  0x000001C0  // 4 system clock periods
N#define SYSCTL_MEMTIM0_FBCHT_4_5                                              \
N                                0x00000200  // 4.5 system clock periods
X#define SYSCTL_MEMTIM0_FBCHT_4_5                                                                              0x00000200  
N#define SYSCTL_MEMTIM0_FBCE     0x00000020  // Flash Bank Clock Edge
N#define SYSCTL_MEMTIM0_FWS_M    0x0000000F  // Flash Wait State
N#define SYSCTL_MEMTIM0_EWS_S    16
N#define SYSCTL_MEMTIM0_FWS_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGC0 register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGC0_WDT1       0x10000000  // WDT1 Clock Gating Control
N#define SYSCTL_RCGC0_CAN1       0x02000000  // CAN1 Clock Gating Control
N#define SYSCTL_RCGC0_CAN0       0x01000000  // CAN0 Clock Gating Control
N#define SYSCTL_RCGC0_PWM0       0x00100000  // PWM Clock Gating Control
N#define SYSCTL_RCGC0_ADC1       0x00020000  // ADC1 Clock Gating Control
N#define SYSCTL_RCGC0_ADC0       0x00010000  // ADC0 Clock Gating Control
N#define SYSCTL_RCGC0_ADC1SPD_M  0x00000C00  // ADC1 Sample Speed
N#define SYSCTL_RCGC0_ADC1SPD_125K                                             \
N                                0x00000000  // 125K samples/second
X#define SYSCTL_RCGC0_ADC1SPD_125K                                                                             0x00000000  
N#define SYSCTL_RCGC0_ADC1SPD_250K                                             \
N                                0x00000400  // 250K samples/second
X#define SYSCTL_RCGC0_ADC1SPD_250K                                                                             0x00000400  
N#define SYSCTL_RCGC0_ADC1SPD_500K                                             \
N                                0x00000800  // 500K samples/second
X#define SYSCTL_RCGC0_ADC1SPD_500K                                                                             0x00000800  
N#define SYSCTL_RCGC0_ADC1SPD_1M 0x00000C00  // 1M samples/second
N#define SYSCTL_RCGC0_ADC0SPD_M  0x00000300  // ADC0 Sample Speed
N#define SYSCTL_RCGC0_ADC0SPD_125K                                             \
N                                0x00000000  // 125K samples/second
X#define SYSCTL_RCGC0_ADC0SPD_125K                                                                             0x00000000  
N#define SYSCTL_RCGC0_ADC0SPD_250K                                             \
N                                0x00000100  // 250K samples/second
X#define SYSCTL_RCGC0_ADC0SPD_250K                                                                             0x00000100  
N#define SYSCTL_RCGC0_ADC0SPD_500K                                             \
N                                0x00000200  // 500K samples/second
X#define SYSCTL_RCGC0_ADC0SPD_500K                                                                             0x00000200  
N#define SYSCTL_RCGC0_ADC0SPD_1M 0x00000300  // 1M samples/second
N#define SYSCTL_RCGC0_HIB        0x00000040  // HIB Clock Gating Control
N#define SYSCTL_RCGC0_WDT0       0x00000008  // WDT0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGC1 register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGC1_COMP2      0x04000000  // Analog Comparator 2 Clock Gating
N#define SYSCTL_RCGC1_COMP1      0x02000000  // Analog Comparator 1 Clock Gating
N#define SYSCTL_RCGC1_COMP0      0x01000000  // Analog Comparator 0 Clock Gating
N#define SYSCTL_RCGC1_TIMER3     0x00080000  // Timer 3 Clock Gating Control
N#define SYSCTL_RCGC1_TIMER2     0x00040000  // Timer 2 Clock Gating Control
N#define SYSCTL_RCGC1_TIMER1     0x00020000  // Timer 1 Clock Gating Control
N#define SYSCTL_RCGC1_TIMER0     0x00010000  // Timer 0 Clock Gating Control
N#define SYSCTL_RCGC1_I2C1       0x00004000  // I2C1 Clock Gating Control
N#define SYSCTL_RCGC1_I2C0       0x00001000  // I2C0 Clock Gating Control
N#define SYSCTL_RCGC1_QEI1       0x00000200  // QEI1 Clock Gating Control
N#define SYSCTL_RCGC1_QEI0       0x00000100  // QEI0 Clock Gating Control
N#define SYSCTL_RCGC1_SSI1       0x00000020  // SSI1 Clock Gating Control
N#define SYSCTL_RCGC1_SSI0       0x00000010  // SSI0 Clock Gating Control
N#define SYSCTL_RCGC1_UART2      0x00000004  // UART2 Clock Gating Control
N#define SYSCTL_RCGC1_UART1      0x00000002  // UART1 Clock Gating Control
N#define SYSCTL_RCGC1_UART0      0x00000001  // UART0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGC2_USB0       0x00010000  // USB0 Clock Gating Control
N#define SYSCTL_RCGC2_UDMA       0x00002000  // Micro-DMA Clock Gating Control
N#define SYSCTL_RCGC2_GPIOJ      0x00000100  // Port J Clock Gating Control
N#define SYSCTL_RCGC2_GPIOH      0x00000080  // Port H Clock Gating Control
N#define SYSCTL_RCGC2_GPIOG      0x00000040  // Port G Clock Gating Control
N#define SYSCTL_RCGC2_GPIOF      0x00000020  // Port F Clock Gating Control
N#define SYSCTL_RCGC2_GPIOE      0x00000010  // Port E Clock Gating Control
N#define SYSCTL_RCGC2_GPIOD      0x00000008  // Port D Clock Gating Control
N#define SYSCTL_RCGC2_GPIOC      0x00000004  // Port C Clock Gating Control
N#define SYSCTL_RCGC2_GPIOB      0x00000002  // Port B Clock Gating Control
N#define SYSCTL_RCGC2_GPIOA      0x00000001  // Port A Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGC0 register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGC0_WDT1       0x10000000  // WDT1 Clock Gating Control
N#define SYSCTL_SCGC0_CAN1       0x02000000  // CAN1 Clock Gating Control
N#define SYSCTL_SCGC0_CAN0       0x01000000  // CAN0 Clock Gating Control
N#define SYSCTL_SCGC0_PWM0       0x00100000  // PWM Clock Gating Control
N#define SYSCTL_SCGC0_ADC1       0x00020000  // ADC1 Clock Gating Control
N#define SYSCTL_SCGC0_ADC0       0x00010000  // ADC0 Clock Gating Control
N#define SYSCTL_SCGC0_ADCSPD_M   0x00000F00  // ADC Sample Speed
N#define SYSCTL_SCGC0_HIB        0x00000040  // HIB Clock Gating Control
N#define SYSCTL_SCGC0_WDT0       0x00000008  // WDT0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGC1 register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGC1_COMP2      0x04000000  // Analog Comparator 2 Clock Gating
N#define SYSCTL_SCGC1_COMP1      0x02000000  // Analog Comparator 1 Clock Gating
N#define SYSCTL_SCGC1_COMP0      0x01000000  // Analog Comparator 0 Clock Gating
N#define SYSCTL_SCGC1_TIMER3     0x00080000  // Timer 3 Clock Gating Control
N#define SYSCTL_SCGC1_TIMER2     0x00040000  // Timer 2 Clock Gating Control
N#define SYSCTL_SCGC1_TIMER1     0x00020000  // Timer 1 Clock Gating Control
N#define SYSCTL_SCGC1_TIMER0     0x00010000  // Timer 0 Clock Gating Control
N#define SYSCTL_SCGC1_I2C1       0x00004000  // I2C1 Clock Gating Control
N#define SYSCTL_SCGC1_I2C0       0x00001000  // I2C0 Clock Gating Control
N#define SYSCTL_SCGC1_QEI1       0x00000200  // QEI1 Clock Gating Control
N#define SYSCTL_SCGC1_QEI0       0x00000100  // QEI0 Clock Gating Control
N#define SYSCTL_SCGC1_SSI1       0x00000020  // SSI1 Clock Gating Control
N#define SYSCTL_SCGC1_SSI0       0x00000010  // SSI0 Clock Gating Control
N#define SYSCTL_SCGC1_UART2      0x00000004  // UART2 Clock Gating Control
N#define SYSCTL_SCGC1_UART1      0x00000002  // UART1 Clock Gating Control
N#define SYSCTL_SCGC1_UART0      0x00000001  // UART0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGC2_USB0       0x00010000  // USB0 Clock Gating Control
N#define SYSCTL_SCGC2_UDMA       0x00002000  // Micro-DMA Clock Gating Control
N#define SYSCTL_SCGC2_GPIOJ      0x00000100  // Port J Clock Gating Control
N#define SYSCTL_SCGC2_GPIOH      0x00000080  // Port H Clock Gating Control
N#define SYSCTL_SCGC2_GPIOG      0x00000040  // Port G Clock Gating Control
N#define SYSCTL_SCGC2_GPIOF      0x00000020  // Port F Clock Gating Control
N#define SYSCTL_SCGC2_GPIOE      0x00000010  // Port E Clock Gating Control
N#define SYSCTL_SCGC2_GPIOD      0x00000008  // Port D Clock Gating Control
N#define SYSCTL_SCGC2_GPIOC      0x00000004  // Port C Clock Gating Control
N#define SYSCTL_SCGC2_GPIOB      0x00000002  // Port B Clock Gating Control
N#define SYSCTL_SCGC2_GPIOA      0x00000001  // Port A Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGC0 register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGC0_WDT1       0x10000000  // WDT1 Clock Gating Control
N#define SYSCTL_DCGC0_CAN1       0x02000000  // CAN1 Clock Gating Control
N#define SYSCTL_DCGC0_CAN0       0x01000000  // CAN0 Clock Gating Control
N#define SYSCTL_DCGC0_PWM0       0x00100000  // PWM Clock Gating Control
N#define SYSCTL_DCGC0_ADC1       0x00020000  // ADC1 Clock Gating Control
N#define SYSCTL_DCGC0_ADC0       0x00010000  // ADC0 Clock Gating Control
N#define SYSCTL_DCGC0_HIB        0x00000040  // HIB Clock Gating Control
N#define SYSCTL_DCGC0_WDT0       0x00000008  // WDT0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGC1 register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGC1_COMP2      0x04000000  // Analog Comparator 2 Clock Gating
N#define SYSCTL_DCGC1_COMP1      0x02000000  // Analog Comparator 1 Clock Gating
N#define SYSCTL_DCGC1_COMP0      0x01000000  // Analog Comparator 0 Clock Gating
N#define SYSCTL_DCGC1_TIMER3     0x00080000  // Timer 3 Clock Gating Control
N#define SYSCTL_DCGC1_TIMER2     0x00040000  // Timer 2 Clock Gating Control
N#define SYSCTL_DCGC1_TIMER1     0x00020000  // Timer 1 Clock Gating Control
N#define SYSCTL_DCGC1_TIMER0     0x00010000  // Timer 0 Clock Gating Control
N#define SYSCTL_DCGC1_I2C1       0x00004000  // I2C1 Clock Gating Control
N#define SYSCTL_DCGC1_I2C0       0x00001000  // I2C0 Clock Gating Control
N#define SYSCTL_DCGC1_QEI1       0x00000200  // QEI1 Clock Gating Control
N#define SYSCTL_DCGC1_QEI0       0x00000100  // QEI0 Clock Gating Control
N#define SYSCTL_DCGC1_SSI1       0x00000020  // SSI1 Clock Gating Control
N#define SYSCTL_DCGC1_SSI0       0x00000010  // SSI0 Clock Gating Control
N#define SYSCTL_DCGC1_UART2      0x00000004  // UART2 Clock Gating Control
N#define SYSCTL_DCGC1_UART1      0x00000002  // UART1 Clock Gating Control
N#define SYSCTL_DCGC1_UART0      0x00000001  // UART0 Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGC2 register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGC2_USB0       0x00010000  // USB0 Clock Gating Control
N#define SYSCTL_DCGC2_UDMA       0x00002000  // Micro-DMA Clock Gating Control
N#define SYSCTL_DCGC2_GPIOJ      0x00000100  // Port J Clock Gating Control
N#define SYSCTL_DCGC2_GPIOH      0x00000080  // Port H Clock Gating Control
N#define SYSCTL_DCGC2_GPIOG      0x00000040  // Port G Clock Gating Control
N#define SYSCTL_DCGC2_GPIOF      0x00000020  // Port F Clock Gating Control
N#define SYSCTL_DCGC2_GPIOE      0x00000010  // Port E Clock Gating Control
N#define SYSCTL_DCGC2_GPIOD      0x00000008  // Port D Clock Gating Control
N#define SYSCTL_DCGC2_GPIOC      0x00000004  // Port C Clock Gating Control
N#define SYSCTL_DCGC2_GPIOB      0x00000002  // Port B Clock Gating Control
N#define SYSCTL_DCGC2_GPIOA      0x00000001  // Port A Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_ALTCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_ALTCLKCFG_ALTCLK_M                                             \
N                                0x0000000F  // Alternate Clock Source
X#define SYSCTL_ALTCLKCFG_ALTCLK_M                                                                             0x0000000F  
N#define SYSCTL_ALTCLKCFG_ALTCLK_PIOSC                                         \
N                                0x00000000  // PIOSC
X#define SYSCTL_ALTCLKCFG_ALTCLK_PIOSC                                                                         0x00000000  
N#define SYSCTL_ALTCLKCFG_ALTCLK_RTCOSC                                        \
N                                0x00000003  // Hibernation Module Real-time
X#define SYSCTL_ALTCLKCFG_ALTCLK_RTCOSC                                                                        0x00000003  
N                                            // clock output (RTCOSC)
N#define SYSCTL_ALTCLKCFG_ALTCLK_LFIOSC                                        \
N                                0x00000004  // Low-frequency internal
X#define SYSCTL_ALTCLKCFG_ALTCLK_LFIOSC                                                                        0x00000004  
N                                            // oscillator (LFIOSC)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSLPCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSLPCLKCFG_D_M   0x1F800000  // Divider Field Override
N#define SYSCTL_DSLPCLKCFG_O_M   0x00000070  // Clock Source
N#define SYSCTL_DSLPCLKCFG_O_IGN 0x00000000  // MOSC
N#define SYSCTL_DSLPCLKCFG_O_IO  0x00000010  // PIOSC
N#define SYSCTL_DSLPCLKCFG_O_30  0x00000030  // LFIOSC
N#define SYSCTL_DSLPCLKCFG_O_32  0x00000070  // 32.768 kHz
N#define SYSCTL_DSLPCLKCFG_PIOSCPD                                             \
N                                0x00000002  // PIOSC Power Down Request
X#define SYSCTL_DSLPCLKCFG_PIOSCPD                                                                             0x00000002  
N#define SYSCTL_DSLPCLKCFG_D_S   23
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSCLKCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSCLKCFG_PIOSCPD 0x80000000  // PIOSC Power Down
N#define SYSCTL_DSCLKCFG_MOSCDPD 0x40000000  // MOSC Disable Power Down
N#define SYSCTL_DSCLKCFG_DSOSCSRC_M                                            \
N                                0x00F00000  // Deep Sleep Oscillator Source
X#define SYSCTL_DSCLKCFG_DSOSCSRC_M                                                                            0x00F00000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_PIOSC                                        \
N                                0x00000000  // PIOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_PIOSC                                                                        0x00000000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_LFIOSC                                       \
N                                0x00200000  // LFIOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_LFIOSC                                                                       0x00200000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_MOSC                                         \
N                                0x00300000  // MOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_MOSC                                                                         0x00300000  
N#define SYSCTL_DSCLKCFG_DSOSCSRC_RTC                                          \
N                                0x00400000  // Hibernation Module RTCOSC
X#define SYSCTL_DSCLKCFG_DSOSCSRC_RTC                                                                          0x00400000  
N#define SYSCTL_DSCLKCFG_DSSYSDIV_M                                            \
N                                0x000003FF  // Deep Sleep Clock Divisor
X#define SYSCTL_DSCLKCFG_DSSYSDIV_M                                                                            0x000003FF  
N#define SYSCTL_DSCLKCFG_DSSYSDIV_S                                            \
N                                0
X#define SYSCTL_DSCLKCFG_DSSYSDIV_S                                                                            0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DIVSCLK register.
N//
N//*****************************************************************************
N#define SYSCTL_DIVSCLK_EN       0x80000000  // DIVSCLK Enable
N#define SYSCTL_DIVSCLK_SRC_M    0x00030000  // Clock Source
N#define SYSCTL_DIVSCLK_SRC_SYSCLK                                             \
N                                0x00000000  // System Clock
X#define SYSCTL_DIVSCLK_SRC_SYSCLK                                                                             0x00000000  
N#define SYSCTL_DIVSCLK_SRC_PIOSC                                              \
N                                0x00010000  // PIOSC
X#define SYSCTL_DIVSCLK_SRC_PIOSC                                                                              0x00010000  
N#define SYSCTL_DIVSCLK_SRC_MOSC 0x00020000  // MOSC
N#define SYSCTL_DIVSCLK_DIV_M    0x000000FF  // Divisor Value
N#define SYSCTL_DIVSCLK_DIV_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SYSPROP register.
N//
N//*****************************************************************************
N#define SYSCTL_SYSPROP_FPU      0x00000001  // FPU Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PIOSCCAL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSCCAL_UTEN    0x80000000  // Use User Trim Value
N#define SYSCTL_PIOSCCAL_CAL     0x00000200  // Start Calibration
N#define SYSCTL_PIOSCCAL_UPDATE  0x00000100  // Update Trim
N#define SYSCTL_PIOSCCAL_UT_M    0x0000007F  // User Trim Value
N#define SYSCTL_PIOSCCAL_UT_S    0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PIOSCSTAT
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PIOSCSTAT_DT_M   0x007F0000  // Default Trim Value
N#define SYSCTL_PIOSCSTAT_CR_M   0x00000300  // Calibration Result
N#define SYSCTL_PIOSCSTAT_CRNONE 0x00000000  // Calibration has not been
N                                            // attempted
N#define SYSCTL_PIOSCSTAT_CRPASS 0x00000100  // The last calibration operation
N                                            // completed to meet 1% accuracy
N#define SYSCTL_PIOSCSTAT_CRFAIL 0x00000200  // The last calibration operation
N                                            // failed to meet 1% accuracy
N#define SYSCTL_PIOSCSTAT_CT_M   0x0000007F  // Calibration Trim Value
N#define SYSCTL_PIOSCSTAT_DT_S   16
N#define SYSCTL_PIOSCSTAT_CT_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLFREQ0
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLFREQ0_PLLPWR  0x00800000  // PLL Power
N#define SYSCTL_PLLFREQ0_MFRAC_M 0x000FFC00  // PLL M Fractional Value
N#define SYSCTL_PLLFREQ0_MINT_M  0x000003FF  // PLL M Integer Value
N#define SYSCTL_PLLFREQ0_MFRAC_S 10
N#define SYSCTL_PLLFREQ0_MINT_S  0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLFREQ1
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLFREQ1_Q_M     0x00001F00  // PLL Q Value
N#define SYSCTL_PLLFREQ1_N_M     0x0000001F  // PLL N Value
N#define SYSCTL_PLLFREQ1_Q_S     8
N#define SYSCTL_PLLFREQ1_N_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PLLSTAT register.
N//
N//*****************************************************************************
N#define SYSCTL_PLLSTAT_LOCK     0x00000001  // PLL Lock
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SLPPWRCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SLPPWRCFG_FLASHPM_M                                            \
N                                0x00000030  // Flash Power Modes
X#define SYSCTL_SLPPWRCFG_FLASHPM_M                                                                            0x00000030  
N#define SYSCTL_SLPPWRCFG_FLASHPM_NRM                                          \
N                                0x00000000  // Active Mode
X#define SYSCTL_SLPPWRCFG_FLASHPM_NRM                                                                          0x00000000  
N#define SYSCTL_SLPPWRCFG_FLASHPM_SLP                                          \
N                                0x00000020  // Low Power Mode
X#define SYSCTL_SLPPWRCFG_FLASHPM_SLP                                                                          0x00000020  
N#define SYSCTL_SLPPWRCFG_SRAMPM_M                                             \
N                                0x00000003  // SRAM Power Modes
X#define SYSCTL_SLPPWRCFG_SRAMPM_M                                                                             0x00000003  
N#define SYSCTL_SLPPWRCFG_SRAMPM_NRM                                           \
N                                0x00000000  // Active Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_NRM                                                                           0x00000000  
N#define SYSCTL_SLPPWRCFG_SRAMPM_SBY                                           \
N                                0x00000001  // Standby Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_SBY                                                                           0x00000001  
N#define SYSCTL_SLPPWRCFG_SRAMPM_LP                                            \
N                                0x00000003  // Low Power Mode
X#define SYSCTL_SLPPWRCFG_SRAMPM_LP                                                                            0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DSLPPWRCFG
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DSLPPWRCFG_LDOSM 0x00000200  // LDO Sleep Mode
N#define SYSCTL_DSLPPWRCFG_TSPD  0x00000100  // Temperature Sense Power Down
N#define SYSCTL_DSLPPWRCFG_FLASHPM_M                                           \
N                                0x00000030  // Flash Power Modes
X#define SYSCTL_DSLPPWRCFG_FLASHPM_M                                                                           0x00000030  
N#define SYSCTL_DSLPPWRCFG_FLASHPM_NRM                                         \
N                                0x00000000  // Active Mode
X#define SYSCTL_DSLPPWRCFG_FLASHPM_NRM                                                                         0x00000000  
N#define SYSCTL_DSLPPWRCFG_FLASHPM_SLP                                         \
N                                0x00000020  // Low Power Mode
X#define SYSCTL_DSLPPWRCFG_FLASHPM_SLP                                                                         0x00000020  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_M                                            \
N                                0x00000003  // SRAM Power Modes
X#define SYSCTL_DSLPPWRCFG_SRAMPM_M                                                                            0x00000003  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_NRM                                          \
N                                0x00000000  // Active Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_NRM                                                                          0x00000000  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_SBY                                          \
N                                0x00000001  // Standby Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_SBY                                                                          0x00000001  
N#define SYSCTL_DSLPPWRCFG_SRAMPM_LP                                           \
N                                0x00000003  // Low Power Mode
X#define SYSCTL_DSLPPWRCFG_SRAMPM_LP                                                                           0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DC9 register.
N//
N//*****************************************************************************
N#define SYSCTL_DC9_ADC1DC7      0x00800000  // ADC1 DC7 Present
N#define SYSCTL_DC9_ADC1DC6      0x00400000  // ADC1 DC6 Present
N#define SYSCTL_DC9_ADC1DC5      0x00200000  // ADC1 DC5 Present
N#define SYSCTL_DC9_ADC1DC4      0x00100000  // ADC1 DC4 Present
N#define SYSCTL_DC9_ADC1DC3      0x00080000  // ADC1 DC3 Present
N#define SYSCTL_DC9_ADC1DC2      0x00040000  // ADC1 DC2 Present
N#define SYSCTL_DC9_ADC1DC1      0x00020000  // ADC1 DC1 Present
N#define SYSCTL_DC9_ADC1DC0      0x00010000  // ADC1 DC0 Present
N#define SYSCTL_DC9_ADC0DC7      0x00000080  // ADC0 DC7 Present
N#define SYSCTL_DC9_ADC0DC6      0x00000040  // ADC0 DC6 Present
N#define SYSCTL_DC9_ADC0DC5      0x00000020  // ADC0 DC5 Present
N#define SYSCTL_DC9_ADC0DC4      0x00000010  // ADC0 DC4 Present
N#define SYSCTL_DC9_ADC0DC3      0x00000008  // ADC0 DC3 Present
N#define SYSCTL_DC9_ADC0DC2      0x00000004  // ADC0 DC2 Present
N#define SYSCTL_DC9_ADC0DC1      0x00000002  // ADC0 DC1 Present
N#define SYSCTL_DC9_ADC0DC0      0x00000001  // ADC0 DC0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_NVMSTAT register.
N//
N//*****************************************************************************
N#define SYSCTL_NVMSTAT_FWB      0x00000001  // 32 Word Flash Write Buffer
N                                            // Available
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_LDOSPCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_LDOSPCTL_VADJEN  0x80000000  // Voltage Adjust Enable
N#define SYSCTL_LDOSPCTL_VLDO_M  0x000000FF  // LDO Output Voltage
N#define SYSCTL_LDOSPCTL_VLDO_0_90V                                            \
N                                0x00000012  // 0.90 V
X#define SYSCTL_LDOSPCTL_VLDO_0_90V                                                                            0x00000012  
N#define SYSCTL_LDOSPCTL_VLDO_0_95V                                            \
N                                0x00000013  // 0.95 V
X#define SYSCTL_LDOSPCTL_VLDO_0_95V                                                                            0x00000013  
N#define SYSCTL_LDOSPCTL_VLDO_1_00V                                            \
N                                0x00000014  // 1.00 V
X#define SYSCTL_LDOSPCTL_VLDO_1_00V                                                                            0x00000014  
N#define SYSCTL_LDOSPCTL_VLDO_1_05V                                            \
N                                0x00000015  // 1.05 V
X#define SYSCTL_LDOSPCTL_VLDO_1_05V                                                                            0x00000015  
N#define SYSCTL_LDOSPCTL_VLDO_1_10V                                            \
N                                0x00000016  // 1.10 V
X#define SYSCTL_LDOSPCTL_VLDO_1_10V                                                                            0x00000016  
N#define SYSCTL_LDOSPCTL_VLDO_1_15V                                            \
N                                0x00000017  // 1.15 V
X#define SYSCTL_LDOSPCTL_VLDO_1_15V                                                                            0x00000017  
N#define SYSCTL_LDOSPCTL_VLDO_1_20V                                            \
N                                0x00000018  // 1.20 V
X#define SYSCTL_LDOSPCTL_VLDO_1_20V                                                                            0x00000018  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_LDODPCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_LDODPCTL_VADJEN  0x80000000  // Voltage Adjust Enable
N#define SYSCTL_LDODPCTL_VLDO_M  0x000000FF  // LDO Output Voltage
N#define SYSCTL_LDODPCTL_VLDO_0_90V                                            \
N                                0x00000012  // 0.90 V
X#define SYSCTL_LDODPCTL_VLDO_0_90V                                                                            0x00000012  
N#define SYSCTL_LDODPCTL_VLDO_0_95V                                            \
N                                0x00000013  // 0.95 V
X#define SYSCTL_LDODPCTL_VLDO_0_95V                                                                            0x00000013  
N#define SYSCTL_LDODPCTL_VLDO_1_00V                                            \
N                                0x00000014  // 1.00 V
X#define SYSCTL_LDODPCTL_VLDO_1_00V                                                                            0x00000014  
N#define SYSCTL_LDODPCTL_VLDO_1_05V                                            \
N                                0x00000015  // 1.05 V
X#define SYSCTL_LDODPCTL_VLDO_1_05V                                                                            0x00000015  
N#define SYSCTL_LDODPCTL_VLDO_1_10V                                            \
N                                0x00000016  // 1.10 V
X#define SYSCTL_LDODPCTL_VLDO_1_10V                                                                            0x00000016  
N#define SYSCTL_LDODPCTL_VLDO_1_15V                                            \
N                                0x00000017  // 1.15 V
X#define SYSCTL_LDODPCTL_VLDO_1_15V                                                                            0x00000017  
N#define SYSCTL_LDODPCTL_VLDO_1_20V                                            \
N                                0x00000018  // 1.20 V
X#define SYSCTL_LDODPCTL_VLDO_1_20V                                                                            0x00000018  
N#define SYSCTL_LDODPCTL_VLDO_1_25V                                            \
N                                0x00000019  // 1.25 V
X#define SYSCTL_LDODPCTL_VLDO_1_25V                                                                            0x00000019  
N#define SYSCTL_LDODPCTL_VLDO_1_30V                                            \
N                                0x0000001A  // 1.30 V
X#define SYSCTL_LDODPCTL_VLDO_1_30V                                                                            0x0000001A  
N#define SYSCTL_LDODPCTL_VLDO_1_35V                                            \
N                                0x0000001B  // 1.35 V
X#define SYSCTL_LDODPCTL_VLDO_1_35V                                                                            0x0000001B  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RESBEHAVCTL
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RESBEHAVCTL_WDOG1_M                                            \
N                                0x000000C0  // Watchdog 1 Reset Operation
X#define SYSCTL_RESBEHAVCTL_WDOG1_M                                                                            0x000000C0  
N#define SYSCTL_RESBEHAVCTL_WDOG1_SYSRST                                       \
N                                0x00000080  // Watchdog 1 issues a system
X#define SYSCTL_RESBEHAVCTL_WDOG1_SYSRST                                                                       0x00000080  
N                                            // reset. The application starts
N                                            // within 10 us
N#define SYSCTL_RESBEHAVCTL_WDOG1_POR                                          \
N                                0x000000C0  // Watchdog 1 issues a simulated
X#define SYSCTL_RESBEHAVCTL_WDOG1_POR                                                                          0x000000C0  
N                                            // POR sequence. Application starts
N                                            // less than 500 us after
N                                            // deassertion (Default)
N#define SYSCTL_RESBEHAVCTL_WDOG0_M                                            \
N                                0x00000030  // Watchdog 0 Reset Operation
X#define SYSCTL_RESBEHAVCTL_WDOG0_M                                                                            0x00000030  
N#define SYSCTL_RESBEHAVCTL_WDOG0_SYSRST                                       \
N                                0x00000020  // Watchdog 0 issues a system
X#define SYSCTL_RESBEHAVCTL_WDOG0_SYSRST                                                                       0x00000020  
N                                            // reset. The application starts
N                                            // within 10 us
N#define SYSCTL_RESBEHAVCTL_WDOG0_POR                                          \
N                                0x00000030  // Watchdog 0 issues a simulated
X#define SYSCTL_RESBEHAVCTL_WDOG0_POR                                                                          0x00000030  
N                                            // POR sequence. Application starts
N                                            // less than 500 us after
N                                            // deassertion (Default)
N#define SYSCTL_RESBEHAVCTL_BOR_M                                              \
N                                0x0000000C  // BOR Reset operation
X#define SYSCTL_RESBEHAVCTL_BOR_M                                                                              0x0000000C  
N#define SYSCTL_RESBEHAVCTL_BOR_SYSRST                                         \
N                                0x00000008  // Brown Out Reset issues system
X#define SYSCTL_RESBEHAVCTL_BOR_SYSRST                                                                         0x00000008  
N                                            // reset. The application starts
N                                            // within 10 us
N#define SYSCTL_RESBEHAVCTL_BOR_POR                                            \
N                                0x0000000C  // Brown Out Reset issues a
X#define SYSCTL_RESBEHAVCTL_BOR_POR                                                                            0x0000000C  
N                                            // simulated POR sequence. The
N                                            // application starts less than 500
N                                            // us after deassertion (Default)
N#define SYSCTL_RESBEHAVCTL_EXTRES_M                                           \
N                                0x00000003  // External RST Pin Operation
X#define SYSCTL_RESBEHAVCTL_EXTRES_M                                                                           0x00000003  
N#define SYSCTL_RESBEHAVCTL_EXTRES_SYSRST                                      \
N                                0x00000002  // External RST assertion issues a
X#define SYSCTL_RESBEHAVCTL_EXTRES_SYSRST                                                                      0x00000002  
N                                            // system reset. The application
N                                            // starts within 10 us
N#define SYSCTL_RESBEHAVCTL_EXTRES_POR                                         \
N                                0x00000003  // External RST assertion issues a
X#define SYSCTL_RESBEHAVCTL_EXTRES_POR                                                                         0x00000003  
N                                            // simulated POR sequence.
N                                            // Application starts less than 500
N                                            // us after deassertion (Default)
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_HSSR register.
N//
N//*****************************************************************************
N#define SYSCTL_HSSR_KEY_M       0xFF000000  // Write Key
N#define SYSCTL_HSSR_CDOFF_M     0x00FFFFFF  // Command Descriptor Pointer
N#define SYSCTL_HSSR_KEY_S       24
N#define SYSCTL_HSSR_CDOFF_S     0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_USBPDS register.
N//
N//*****************************************************************************
N#define SYSCTL_USBPDS_MEMSTAT_M 0x0000000C  // Memory Array Power Status
N#define SYSCTL_USBPDS_MEMSTAT_OFF                                             \
N                                0x00000000  // Array OFF
X#define SYSCTL_USBPDS_MEMSTAT_OFF                                                                             0x00000000  
N#define SYSCTL_USBPDS_MEMSTAT_RETAIN                                          \
N                                0x00000004  // SRAM Retention
X#define SYSCTL_USBPDS_MEMSTAT_RETAIN                                                                          0x00000004  
N#define SYSCTL_USBPDS_MEMSTAT_ON                                              \
N                                0x0000000C  // Array On
X#define SYSCTL_USBPDS_MEMSTAT_ON                                                                              0x0000000C  
N#define SYSCTL_USBPDS_PWRSTAT_M 0x00000003  // Power Domain Status
N#define SYSCTL_USBPDS_PWRSTAT_OFF                                             \
N                                0x00000000  // OFF
X#define SYSCTL_USBPDS_PWRSTAT_OFF                                                                             0x00000000  
N#define SYSCTL_USBPDS_PWRSTAT_ON                                              \
N                                0x00000003  // ON
X#define SYSCTL_USBPDS_PWRSTAT_ON                                                                              0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_USBMPC register.
N//
N//*****************************************************************************
N#define SYSCTL_USBMPC_PWRCTL_M  0x00000003  // Memory Array Power Control
N#define SYSCTL_USBMPC_PWRCTL_OFF                                              \
N                                0x00000000  // Array OFF
X#define SYSCTL_USBMPC_PWRCTL_OFF                                                                              0x00000000  
N#define SYSCTL_USBMPC_PWRCTL_RETAIN                                           \
N                                0x00000001  // SRAM Retention
X#define SYSCTL_USBMPC_PWRCTL_RETAIN                                                                           0x00000001  
N#define SYSCTL_USBMPC_PWRCTL_ON 0x00000003  // Array On
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_EMACPDS register.
N//
N//*****************************************************************************
N#define SYSCTL_EMACPDS_MEMSTAT_M                                              \
N                                0x0000000C  // Memory Array Power Status
X#define SYSCTL_EMACPDS_MEMSTAT_M                                                                              0x0000000C  
N#define SYSCTL_EMACPDS_MEMSTAT_OFF                                            \
N                                0x00000000  // Array OFF
X#define SYSCTL_EMACPDS_MEMSTAT_OFF                                                                            0x00000000  
N#define SYSCTL_EMACPDS_MEMSTAT_ON                                             \
N                                0x0000000C  // Array On
X#define SYSCTL_EMACPDS_MEMSTAT_ON                                                                             0x0000000C  
N#define SYSCTL_EMACPDS_PWRSTAT_M                                              \
N                                0x00000003  // Power Domain Status
X#define SYSCTL_EMACPDS_PWRSTAT_M                                                                              0x00000003  
N#define SYSCTL_EMACPDS_PWRSTAT_OFF                                            \
N                                0x00000000  // OFF
X#define SYSCTL_EMACPDS_PWRSTAT_OFF                                                                            0x00000000  
N#define SYSCTL_EMACPDS_PWRSTAT_ON                                             \
N                                0x00000003  // ON
X#define SYSCTL_EMACPDS_PWRSTAT_ON                                                                             0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_EMACMPC register.
N//
N//*****************************************************************************
N#define SYSCTL_EMACMPC_PWRCTL_M 0x00000003  // Memory Array Power Control
N#define SYSCTL_EMACMPC_PWRCTL_OFF                                             \
N                                0x00000000  // Array OFF
X#define SYSCTL_EMACMPC_PWRCTL_OFF                                                                             0x00000000  
N#define SYSCTL_EMACMPC_PWRCTL_ON                                              \
N                                0x00000003  // Array On
X#define SYSCTL_EMACMPC_PWRCTL_ON                                                                              0x00000003  
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_LCDMPC register.
N//
N//*****************************************************************************
N#define SYSCTL_LCDMPC_PWRCTL_M  0x00000003  // Memory Array Power Control
N#define SYSCTL_LCDMPC_PWRCTL_OFF                                              \
N                                0x00000000  // Array OFF
X#define SYSCTL_LCDMPC_PWRCTL_OFF                                                                              0x00000000  
N#define SYSCTL_LCDMPC_PWRCTL_ON 0x00000003  // Array On
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PPWD_P1          0x00000002  // Watchdog Timer 1 Present
N#define SYSCTL_PPWD_P0          0x00000001  // Watchdog Timer 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PPTIMER_P7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Present
N#define SYSCTL_PPTIMER_P6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Present
N#define SYSCTL_PPTIMER_P5       0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Present
N#define SYSCTL_PPTIMER_P4       0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Present
N#define SYSCTL_PPTIMER_P3       0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Present
N#define SYSCTL_PPTIMER_P2       0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Present
N#define SYSCTL_PPTIMER_P1       0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Present
N#define SYSCTL_PPTIMER_P0       0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PPGPIO_P17       0x00020000  // GPIO Port T Present
N#define SYSCTL_PPGPIO_P16       0x00010000  // GPIO Port S Present
N#define SYSCTL_PPGPIO_P15       0x00008000  // GPIO Port R Present
N#define SYSCTL_PPGPIO_P14       0x00004000  // GPIO Port Q Present
N#define SYSCTL_PPGPIO_P13       0x00002000  // GPIO Port P Present
N#define SYSCTL_PPGPIO_P12       0x00001000  // GPIO Port N Present
N#define SYSCTL_PPGPIO_P11       0x00000800  // GPIO Port M Present
N#define SYSCTL_PPGPIO_P10       0x00000400  // GPIO Port L Present
N#define SYSCTL_PPGPIO_P9        0x00000200  // GPIO Port K Present
N#define SYSCTL_PPGPIO_P8        0x00000100  // GPIO Port J Present
N#define SYSCTL_PPGPIO_P7        0x00000080  // GPIO Port H Present
N#define SYSCTL_PPGPIO_P6        0x00000040  // GPIO Port G Present
N#define SYSCTL_PPGPIO_P5        0x00000020  // GPIO Port F Present
N#define SYSCTL_PPGPIO_P4        0x00000010  // GPIO Port E Present
N#define SYSCTL_PPGPIO_P3        0x00000008  // GPIO Port D Present
N#define SYSCTL_PPGPIO_P2        0x00000004  // GPIO Port C Present
N#define SYSCTL_PPGPIO_P1        0x00000002  // GPIO Port B Present
N#define SYSCTL_PPGPIO_P0        0x00000001  // GPIO Port A Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PPDMA_P0         0x00000001  // uDMA Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEPI_P0         0x00000001  // EPI Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PPHIB_P0         0x00000001  // Hibernation Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PPUART_P7        0x00000080  // UART Module 7 Present
N#define SYSCTL_PPUART_P6        0x00000040  // UART Module 6 Present
N#define SYSCTL_PPUART_P5        0x00000020  // UART Module 5 Present
N#define SYSCTL_PPUART_P4        0x00000010  // UART Module 4 Present
N#define SYSCTL_PPUART_P3        0x00000008  // UART Module 3 Present
N#define SYSCTL_PPUART_P2        0x00000004  // UART Module 2 Present
N#define SYSCTL_PPUART_P1        0x00000002  // UART Module 1 Present
N#define SYSCTL_PPUART_P0        0x00000001  // UART Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPSSI_P3         0x00000008  // SSI Module 3 Present
N#define SYSCTL_PPSSI_P2         0x00000004  // SSI Module 2 Present
N#define SYSCTL_PPSSI_P1         0x00000002  // SSI Module 1 Present
N#define SYSCTL_PPSSI_P0         0x00000001  // SSI Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PPI2C_P9         0x00000200  // I2C Module 9 Present
N#define SYSCTL_PPI2C_P8         0x00000100  // I2C Module 8 Present
N#define SYSCTL_PPI2C_P7         0x00000080  // I2C Module 7 Present
N#define SYSCTL_PPI2C_P6         0x00000040  // I2C Module 6 Present
N#define SYSCTL_PPI2C_P5         0x00000020  // I2C Module 5 Present
N#define SYSCTL_PPI2C_P4         0x00000010  // I2C Module 4 Present
N#define SYSCTL_PPI2C_P3         0x00000008  // I2C Module 3 Present
N#define SYSCTL_PPI2C_P2         0x00000004  // I2C Module 2 Present
N#define SYSCTL_PPI2C_P1         0x00000002  // I2C Module 1 Present
N#define SYSCTL_PPI2C_P0         0x00000001  // I2C Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PPUSB_P0         0x00000001  // USB Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEPHY_P0        0x00000001  // Ethernet PHY Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PPCAN_P1         0x00000002  // CAN Module 1 Present
N#define SYSCTL_PPCAN_P0         0x00000001  // CAN Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPADC_P1         0x00000002  // ADC Module 1 Present
N#define SYSCTL_PPADC_P0         0x00000001  // ADC Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PPACMP_P0        0x00000001  // Analog Comparator Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPPWM_P1         0x00000002  // PWM Module 1 Present
N#define SYSCTL_PPPWM_P0         0x00000001  // PWM Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPQEI_P1         0x00000002  // QEI Module 1 Present
N#define SYSCTL_PPQEI_P0         0x00000001  // QEI Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPLPC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPLPC_P0         0x00000001  // LPC Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPPECI register.
N//
N//*****************************************************************************
N#define SYSCTL_PPPECI_P0        0x00000001  // PECI Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPFAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PPFAN_P0         0x00000001  // FAN Module 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEEPROM_P0      0x00000001  // EEPROM Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PPWTIMER_P5      0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Present
N#define SYSCTL_PPWTIMER_P4      0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Present
N#define SYSCTL_PPWTIMER_P3      0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Present
N#define SYSCTL_PPWTIMER_P2      0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Present
N#define SYSCTL_PPWTIMER_P1      0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Present
N#define SYSCTL_PPWTIMER_P0      0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPRTS register.
N//
N//*****************************************************************************
N#define SYSCTL_PPRTS_P0         0x00000001  // RTS Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPCCM_P0         0x00000001  // CRC and Cryptographic Modules
N                                            // Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_PPLCD_P0         0x00000001  // LCD Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPOWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_PPOWIRE_P0       0x00000001  // 1-Wire Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPEMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PPEMAC_P0        0x00000001  // Ethernet Controller Module
N                                            // Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PPHIM register.
N//
N//*****************************************************************************
N#define SYSCTL_PPHIM_P0         0x00000001  // HIM Module Present
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRWD register.
N//
N//*****************************************************************************
N#define SYSCTL_SRWD_R1          0x00000002  // Watchdog Timer 1 Software Reset
N#define SYSCTL_SRWD_R0          0x00000001  // Watchdog Timer 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_SRTIMER_R7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Software Reset
N#define SYSCTL_SRTIMER_R6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Software Reset
N#define SYSCTL_SRTIMER_R5       0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Software Reset
N#define SYSCTL_SRTIMER_R4       0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Software Reset
N#define SYSCTL_SRTIMER_R3       0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Software Reset
N#define SYSCTL_SRTIMER_R2       0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Software Reset
N#define SYSCTL_SRTIMER_R1       0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Software Reset
N#define SYSCTL_SRTIMER_R0       0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_SRGPIO_R17       0x00020000  // GPIO Port T Software Reset
N#define SYSCTL_SRGPIO_R16       0x00010000  // GPIO Port S Software Reset
N#define SYSCTL_SRGPIO_R15       0x00008000  // GPIO Port R Software Reset
N#define SYSCTL_SRGPIO_R14       0x00004000  // GPIO Port Q Software Reset
N#define SYSCTL_SRGPIO_R13       0x00002000  // GPIO Port P Software Reset
N#define SYSCTL_SRGPIO_R12       0x00001000  // GPIO Port N Software Reset
N#define SYSCTL_SRGPIO_R11       0x00000800  // GPIO Port M Software Reset
N#define SYSCTL_SRGPIO_R10       0x00000400  // GPIO Port L Software Reset
N#define SYSCTL_SRGPIO_R9        0x00000200  // GPIO Port K Software Reset
N#define SYSCTL_SRGPIO_R8        0x00000100  // GPIO Port J Software Reset
N#define SYSCTL_SRGPIO_R7        0x00000080  // GPIO Port H Software Reset
N#define SYSCTL_SRGPIO_R6        0x00000040  // GPIO Port G Software Reset
N#define SYSCTL_SRGPIO_R5        0x00000020  // GPIO Port F Software Reset
N#define SYSCTL_SRGPIO_R4        0x00000010  // GPIO Port E Software Reset
N#define SYSCTL_SRGPIO_R3        0x00000008  // GPIO Port D Software Reset
N#define SYSCTL_SRGPIO_R2        0x00000004  // GPIO Port C Software Reset
N#define SYSCTL_SRGPIO_R1        0x00000002  // GPIO Port B Software Reset
N#define SYSCTL_SRGPIO_R0        0x00000001  // GPIO Port A Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_SRDMA_R0         0x00000001  // uDMA Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREPI register.
N//
N//*****************************************************************************
N#define SYSCTL_SREPI_R0         0x00000001  // EPI Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_SRHIB_R0         0x00000001  // Hibernation Module Software
N                                            // Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRUART register.
N//
N//*****************************************************************************
N#define SYSCTL_SRUART_R7        0x00000080  // UART Module 7 Software Reset
N#define SYSCTL_SRUART_R6        0x00000040  // UART Module 6 Software Reset
N#define SYSCTL_SRUART_R5        0x00000020  // UART Module 5 Software Reset
N#define SYSCTL_SRUART_R4        0x00000010  // UART Module 4 Software Reset
N#define SYSCTL_SRUART_R3        0x00000008  // UART Module 3 Software Reset
N#define SYSCTL_SRUART_R2        0x00000004  // UART Module 2 Software Reset
N#define SYSCTL_SRUART_R1        0x00000002  // UART Module 1 Software Reset
N#define SYSCTL_SRUART_R0        0x00000001  // UART Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_SRSSI_R3         0x00000008  // SSI Module 3 Software Reset
N#define SYSCTL_SRSSI_R2         0x00000004  // SSI Module 2 Software Reset
N#define SYSCTL_SRSSI_R1         0x00000002  // SSI Module 1 Software Reset
N#define SYSCTL_SRSSI_R0         0x00000001  // SSI Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_SRI2C_R9         0x00000200  // I2C Module 9 Software Reset
N#define SYSCTL_SRI2C_R8         0x00000100  // I2C Module 8 Software Reset
N#define SYSCTL_SRI2C_R7         0x00000080  // I2C Module 7 Software Reset
N#define SYSCTL_SRI2C_R6         0x00000040  // I2C Module 6 Software Reset
N#define SYSCTL_SRI2C_R5         0x00000020  // I2C Module 5 Software Reset
N#define SYSCTL_SRI2C_R4         0x00000010  // I2C Module 4 Software Reset
N#define SYSCTL_SRI2C_R3         0x00000008  // I2C Module 3 Software Reset
N#define SYSCTL_SRI2C_R2         0x00000004  // I2C Module 2 Software Reset
N#define SYSCTL_SRI2C_R1         0x00000002  // I2C Module 1 Software Reset
N#define SYSCTL_SRI2C_R0         0x00000001  // I2C Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_SRUSB_R0         0x00000001  // USB Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_SREPHY_R0        0x00000001  // Ethernet PHY Module Software
N                                            // Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCAN_R1         0x00000002  // CAN Module 1 Software Reset
N#define SYSCTL_SRCAN_R0         0x00000001  // CAN Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRADC register.
N//
N//*****************************************************************************
N#define SYSCTL_SRADC_R1         0x00000002  // ADC Module 1 Software Reset
N#define SYSCTL_SRADC_R0         0x00000001  // ADC Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_SRACMP_R0        0x00000001  // Analog Comparator Module 0
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_SRPWM_R1         0x00000002  // PWM Module 1 Software Reset
N#define SYSCTL_SRPWM_R0         0x00000001  // PWM Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_SRQEI_R1         0x00000002  // QEI Module 1 Software Reset
N#define SYSCTL_SRQEI_R0         0x00000001  // QEI Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SREEPROM_R0      0x00000001  // EEPROM Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SRWTIMER_R5      0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Software Reset
N#define SYSCTL_SRWTIMER_R4      0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Software Reset
N#define SYSCTL_SRWTIMER_R3      0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Software Reset
N#define SYSCTL_SRWTIMER_R2      0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Software Reset
N#define SYSCTL_SRWTIMER_R1      0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Software Reset
N#define SYSCTL_SRWTIMER_R0      0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_SRCCM_R0         0x00000001  // CRC and Cryptographic Modules
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SRLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_SRLCD_R0         0x00000001  // LCD Module 0 Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SROWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_SROWIRE_R0       0x00000001  // 1-Wire Module Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SREMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_SREMAC_R0        0x00000001  // Ethernet Controller MAC Module 0
N                                            // Software Reset
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCWD_R1        0x00000002  // Watchdog Timer 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCWD_R0        0x00000001  // Watchdog Timer 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCTIMER_R7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R5     0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R4     0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R3     0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R2     0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R1     0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Run Mode Clock Gating Control
N#define SYSCTL_RCGCTIMER_R0     0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Run Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCGPIO_R17     0x00020000  // GPIO Port T Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R16     0x00010000  // GPIO Port S Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R15     0x00008000  // GPIO Port R Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R14     0x00004000  // GPIO Port Q Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R13     0x00002000  // GPIO Port P Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R12     0x00001000  // GPIO Port N Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R11     0x00000800  // GPIO Port M Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R10     0x00000400  // GPIO Port L Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R9      0x00000200  // GPIO Port K Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R8      0x00000100  // GPIO Port J Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R7      0x00000080  // GPIO Port H Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R6      0x00000040  // GPIO Port G Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R5      0x00000020  // GPIO Port F Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R4      0x00000010  // GPIO Port E Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R3      0x00000008  // GPIO Port D Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R2      0x00000004  // GPIO Port C Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R1      0x00000002  // GPIO Port B Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCGPIO_R0      0x00000001  // GPIO Port A Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCDMA_R0       0x00000001  // uDMA Module Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEPI_R0       0x00000001  // EPI Module Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCHIB_R0       0x00000001  // Hibernation Module Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCUART_R7      0x00000080  // UART Module 7 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R6      0x00000040  // UART Module 6 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R5      0x00000020  // UART Module 5 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R4      0x00000010  // UART Module 4 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R3      0x00000008  // UART Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R2      0x00000004  // UART Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R1      0x00000002  // UART Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCUART_R0      0x00000001  // UART Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCSSI_R3       0x00000008  // SSI Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R2       0x00000004  // SSI Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R1       0x00000002  // SSI Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCSSI_R0       0x00000001  // SSI Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCI2C_R9       0x00000200  // I2C Module 9 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R8       0x00000100  // I2C Module 8 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R7       0x00000080  // I2C Module 7 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R6       0x00000040  // I2C Module 6 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R5       0x00000020  // I2C Module 5 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R4       0x00000010  // I2C Module 4 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R3       0x00000008  // I2C Module 3 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R2       0x00000004  // I2C Module 2 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R1       0x00000002  // I2C Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCI2C_R0       0x00000001  // I2C Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCUSB_R0       0x00000001  // USB Module Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEPHY_R0      0x00000001  // Ethernet PHY Module Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCCAN_R1       0x00000002  // CAN Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCCAN_R0       0x00000001  // CAN Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCADC_R1       0x00000002  // ADC Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCADC_R0       0x00000001  // ADC Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCACMP_R0      0x00000001  // Analog Comparator Module 0 Run
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCPWM_R1       0x00000002  // PWM Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCPWM_R0       0x00000001  // PWM Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCQEI_R1       0x00000002  // QEI Module 1 Run Mode Clock
N                                            // Gating Control
N#define SYSCTL_RCGCQEI_R0       0x00000001  // QEI Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEEPROM_R0    0x00000001  // EEPROM Module Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCWTIMER_R5    0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R4    0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R3    0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R2    0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R1    0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Run Mode Clock Gating
N                                            // Control
N#define SYSCTL_RCGCWTIMER_R0    0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Run Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCCCM_R0       0x00000001  // CRC and Cryptographic Modules
N                                            // Run Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCLCD_R0       0x00000001  // LCD Controller Module 0 Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCOWIRE
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCOWIRE_R0     0x00000001  // 1-Wire Module 0 Run Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_RCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RCGCEMAC_R0      0x00000001  // Ethernet MAC Module 0 Run Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCWD_S1        0x00000002  // Watchdog Timer 1 Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_SCGCWD_S0        0x00000001  // Watchdog Timer 0 Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCTIMER_S7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S5     0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S4     0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S3     0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S2     0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S1     0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCTIMER_S0     0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCGPIO_S17     0x00020000  // GPIO Port T Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S16     0x00010000  // GPIO Port S Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S15     0x00008000  // GPIO Port R Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S14     0x00004000  // GPIO Port Q Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S13     0x00002000  // GPIO Port P Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S12     0x00001000  // GPIO Port N Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S11     0x00000800  // GPIO Port M Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S10     0x00000400  // GPIO Port L Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S9      0x00000200  // GPIO Port K Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S8      0x00000100  // GPIO Port J Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S7      0x00000080  // GPIO Port H Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S6      0x00000040  // GPIO Port G Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S5      0x00000020  // GPIO Port F Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S4      0x00000010  // GPIO Port E Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S3      0x00000008  // GPIO Port D Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S2      0x00000004  // GPIO Port C Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S1      0x00000002  // GPIO Port B Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCGPIO_S0      0x00000001  // GPIO Port A Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCDMA_S0       0x00000001  // uDMA Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEPI_S0       0x00000001  // EPI Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCHIB_S0       0x00000001  // Hibernation Module Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCUART_S7      0x00000080  // UART Module 7 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S6      0x00000040  // UART Module 6 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S5      0x00000020  // UART Module 5 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S4      0x00000010  // UART Module 4 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S3      0x00000008  // UART Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S2      0x00000004  // UART Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S1      0x00000002  // UART Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCUART_S0      0x00000001  // UART Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCSSI_S3       0x00000008  // SSI Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S2       0x00000004  // SSI Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S1       0x00000002  // SSI Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCSSI_S0       0x00000001  // SSI Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCI2C_S9       0x00000200  // I2C Module 9 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S8       0x00000100  // I2C Module 8 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S7       0x00000080  // I2C Module 7 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S6       0x00000040  // I2C Module 6 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S5       0x00000020  // I2C Module 5 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S4       0x00000010  // I2C Module 4 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S3       0x00000008  // I2C Module 3 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S2       0x00000004  // I2C Module 2 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S1       0x00000002  // I2C Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCI2C_S0       0x00000001  // I2C Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCUSB_S0       0x00000001  // USB Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEPHY_S0      0x00000001  // PHY Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCCAN_S1       0x00000002  // CAN Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCCAN_S0       0x00000001  // CAN Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCADC_S1       0x00000002  // ADC Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCADC_S0       0x00000001  // ADC Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCACMP_S0      0x00000001  // Analog Comparator Module 0 Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCPWM_S1       0x00000002  // PWM Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCPWM_S0       0x00000001  // PWM Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCQEI_S1       0x00000002  // QEI Module 1 Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_SCGCQEI_S0       0x00000001  // QEI Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEEPROM_S0    0x00000001  // EEPROM Module Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCWTIMER_S5    0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S4    0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S3    0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S2    0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S1    0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_SCGCWTIMER_S0    0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCCCM_S0       0x00000001  // CRC and Cryptographic Modules
N                                            // Sleep Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCLCD_S0       0x00000001  // LCD Controller Module 0 Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCOWIRE
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCOWIRE_S0     0x00000001  // 1-Wire Module 0 Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_SCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_SCGCEMAC_S0      0x00000001  // Ethernet MAC Module 0 Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCWD_D1        0x00000002  // Watchdog Timer 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCWD_D0        0x00000001  // Watchdog Timer 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCTIMER_D7     0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D6     0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D5     0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D4     0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D3     0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D2     0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D1     0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Deep-Sleep Mode Clock Gating
N                                            // Control
N#define SYSCTL_DCGCTIMER_D0     0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCGPIO
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCGPIO_D17     0x00020000  // GPIO Port T Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D16     0x00010000  // GPIO Port S Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D15     0x00008000  // GPIO Port R Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D14     0x00004000  // GPIO Port Q Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D13     0x00002000  // GPIO Port P Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D12     0x00001000  // GPIO Port N Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D11     0x00000800  // GPIO Port M Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D10     0x00000400  // GPIO Port L Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D9      0x00000200  // GPIO Port K Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D8      0x00000100  // GPIO Port J Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D7      0x00000080  // GPIO Port H Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D6      0x00000040  // GPIO Port G Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D5      0x00000020  // GPIO Port F Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D4      0x00000010  // GPIO Port E Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D3      0x00000008  // GPIO Port D Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D2      0x00000004  // GPIO Port C Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D1      0x00000002  // GPIO Port B Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCGPIO_D0      0x00000001  // GPIO Port A Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCDMA_D0       0x00000001  // uDMA Module Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEPI_D0       0x00000001  // EPI Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCHIB_D0       0x00000001  // Hibernation Module Deep-Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCUART
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCUART_D7      0x00000080  // UART Module 7 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D6      0x00000040  // UART Module 6 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D5      0x00000020  // UART Module 5 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D4      0x00000010  // UART Module 4 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D3      0x00000008  // UART Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D2      0x00000004  // UART Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D1      0x00000002  // UART Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCUART_D0      0x00000001  // UART Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCSSI_D3       0x00000008  // SSI Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D2       0x00000004  // SSI Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D1       0x00000002  // SSI Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCSSI_D0       0x00000001  // SSI Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCI2C_D9       0x00000200  // I2C Module 9 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D8       0x00000100  // I2C Module 8 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D7       0x00000080  // I2C Module 7 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D6       0x00000040  // I2C Module 6 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D5       0x00000020  // I2C Module 5 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D4       0x00000010  // I2C Module 4 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D3       0x00000008  // I2C Module 3 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D2       0x00000004  // I2C Module 2 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D1       0x00000002  // I2C Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCI2C_D0       0x00000001  // I2C Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCUSB_D0       0x00000001  // USB Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEPHY
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEPHY_D0      0x00000001  // PHY Module Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCCAN_D1       0x00000002  // CAN Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCCAN_D0       0x00000001  // CAN Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCADC_D1       0x00000002  // ADC Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCADC_D0       0x00000001  // ADC Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCACMP
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCACMP_D0      0x00000001  // Analog Comparator Module 0
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCPWM_D1       0x00000002  // PWM Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCPWM_D0       0x00000001  // PWM Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCQEI_D1       0x00000002  // QEI Module 1 Deep-Sleep Mode
N                                            // Clock Gating Control
N#define SYSCTL_DCGCQEI_D0       0x00000001  // QEI Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEEPROM_D0    0x00000001  // EEPROM Module Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCWTIMER_D5    0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D4    0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D3    0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D2    0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D1    0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Deep-Sleep Mode Clock
N                                            // Gating Control
N#define SYSCTL_DCGCWTIMER_D0    0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Deep-Sleep Mode Clock
N                                            // Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCCCM_D0       0x00000001  // CRC and Cryptographic Modules
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCLCD_D0       0x00000001  // LCD Controller Module 0
N                                            // Deep-Sleep Mode Clock Gating
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCOWIRE
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCOWIRE_D0     0x00000001  // 1-Wire Module 0 Deep-Sleep Mode
N                                            // Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_DCGCEMAC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DCGCEMAC_D0      0x00000001  // Ethernet MAC Module 0 Deep-Sleep
N                                            // Mode Clock Gating Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PCWD_P1          0x00000002  // Watchdog Timer 1 Power Control
N#define SYSCTL_PCWD_P0          0x00000001  // Watchdog Timer 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PCTIMER_P7       0x00000080  // General-Purpose Timer 7 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P6       0x00000040  // General-Purpose Timer 6 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P5       0x00000020  // General-Purpose Timer 5 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P4       0x00000010  // General-Purpose Timer 4 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P3       0x00000008  // General-Purpose Timer 3 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P2       0x00000004  // General-Purpose Timer 2 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P1       0x00000002  // General-Purpose Timer 1 Power
N                                            // Control
N#define SYSCTL_PCTIMER_P0       0x00000001  // General-Purpose Timer 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PCGPIO_P17       0x00020000  // GPIO Port T Power Control
N#define SYSCTL_PCGPIO_P16       0x00010000  // GPIO Port S Power Control
N#define SYSCTL_PCGPIO_P15       0x00008000  // GPIO Port R Power Control
N#define SYSCTL_PCGPIO_P14       0x00004000  // GPIO Port Q Power Control
N#define SYSCTL_PCGPIO_P13       0x00002000  // GPIO Port P Power Control
N#define SYSCTL_PCGPIO_P12       0x00001000  // GPIO Port N Power Control
N#define SYSCTL_PCGPIO_P11       0x00000800  // GPIO Port M Power Control
N#define SYSCTL_PCGPIO_P10       0x00000400  // GPIO Port L Power Control
N#define SYSCTL_PCGPIO_P9        0x00000200  // GPIO Port K Power Control
N#define SYSCTL_PCGPIO_P8        0x00000100  // GPIO Port J Power Control
N#define SYSCTL_PCGPIO_P7        0x00000080  // GPIO Port H Power Control
N#define SYSCTL_PCGPIO_P6        0x00000040  // GPIO Port G Power Control
N#define SYSCTL_PCGPIO_P5        0x00000020  // GPIO Port F Power Control
N#define SYSCTL_PCGPIO_P4        0x00000010  // GPIO Port E Power Control
N#define SYSCTL_PCGPIO_P3        0x00000008  // GPIO Port D Power Control
N#define SYSCTL_PCGPIO_P2        0x00000004  // GPIO Port C Power Control
N#define SYSCTL_PCGPIO_P1        0x00000002  // GPIO Port B Power Control
N#define SYSCTL_PCGPIO_P0        0x00000001  // GPIO Port A Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PCDMA_P0         0x00000001  // uDMA Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEPI_P0         0x00000001  // EPI Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PCHIB_P0         0x00000001  // Hibernation Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PCUART_P7        0x00000080  // UART Module 7 Power Control
N#define SYSCTL_PCUART_P6        0x00000040  // UART Module 6 Power Control
N#define SYSCTL_PCUART_P5        0x00000020  // UART Module 5 Power Control
N#define SYSCTL_PCUART_P4        0x00000010  // UART Module 4 Power Control
N#define SYSCTL_PCUART_P3        0x00000008  // UART Module 3 Power Control
N#define SYSCTL_PCUART_P2        0x00000004  // UART Module 2 Power Control
N#define SYSCTL_PCUART_P1        0x00000002  // UART Module 1 Power Control
N#define SYSCTL_PCUART_P0        0x00000001  // UART Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCSSI_P3         0x00000008  // SSI Module 3 Power Control
N#define SYSCTL_PCSSI_P2         0x00000004  // SSI Module 2 Power Control
N#define SYSCTL_PCSSI_P1         0x00000002  // SSI Module 1 Power Control
N#define SYSCTL_PCSSI_P0         0x00000001  // SSI Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PCI2C_P9         0x00000200  // I2C Module 9 Power Control
N#define SYSCTL_PCI2C_P8         0x00000100  // I2C Module 8 Power Control
N#define SYSCTL_PCI2C_P7         0x00000080  // I2C Module 7 Power Control
N#define SYSCTL_PCI2C_P6         0x00000040  // I2C Module 6 Power Control
N#define SYSCTL_PCI2C_P5         0x00000020  // I2C Module 5 Power Control
N#define SYSCTL_PCI2C_P4         0x00000010  // I2C Module 4 Power Control
N#define SYSCTL_PCI2C_P3         0x00000008  // I2C Module 3 Power Control
N#define SYSCTL_PCI2C_P2         0x00000004  // I2C Module 2 Power Control
N#define SYSCTL_PCI2C_P1         0x00000002  // I2C Module 1 Power Control
N#define SYSCTL_PCI2C_P0         0x00000001  // I2C Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PCUSB_P0         0x00000001  // USB Module Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEPHY_P0        0x00000001  // Ethernet PHY Module Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PCCAN_P1         0x00000002  // CAN Module 1 Power Control
N#define SYSCTL_PCCAN_P0         0x00000001  // CAN Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PCADC_P1         0x00000002  // ADC Module 1 Power Control
N#define SYSCTL_PCADC_P0         0x00000001  // ADC Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PCACMP_P0        0x00000001  // Analog Comparator Module 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PCPWM_P0         0x00000001  // PWM Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PCQEI_P0         0x00000001  // QEI Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEEPROM_P0      0x00000001  // EEPROM Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PCCCM_P0         0x00000001  // CRC and Cryptographic Modules
N                                            // Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_PCLCD_P0         0x00000001  // LCD Controller Module 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCOWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_PCOWIRE_P0       0x00000001  // 1-Wire Module 0 Power Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PCEMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PCEMAC_P0        0x00000001  // Ethernet MAC Module 0 Power
N                                            // Control
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRWD register.
N//
N//*****************************************************************************
N#define SYSCTL_PRWD_R1          0x00000002  // Watchdog Timer 1 Peripheral
N                                            // Ready
N#define SYSCTL_PRWD_R0          0x00000001  // Watchdog Timer 0 Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRTIMER register.
N//
N//*****************************************************************************
N#define SYSCTL_PRTIMER_R7       0x00000080  // 16/32-Bit General-Purpose Timer
N                                            // 7 Peripheral Ready
N#define SYSCTL_PRTIMER_R6       0x00000040  // 16/32-Bit General-Purpose Timer
N                                            // 6 Peripheral Ready
N#define SYSCTL_PRTIMER_R5       0x00000020  // 16/32-Bit General-Purpose Timer
N                                            // 5 Peripheral Ready
N#define SYSCTL_PRTIMER_R4       0x00000010  // 16/32-Bit General-Purpose Timer
N                                            // 4 Peripheral Ready
N#define SYSCTL_PRTIMER_R3       0x00000008  // 16/32-Bit General-Purpose Timer
N                                            // 3 Peripheral Ready
N#define SYSCTL_PRTIMER_R2       0x00000004  // 16/32-Bit General-Purpose Timer
N                                            // 2 Peripheral Ready
N#define SYSCTL_PRTIMER_R1       0x00000002  // 16/32-Bit General-Purpose Timer
N                                            // 1 Peripheral Ready
N#define SYSCTL_PRTIMER_R0       0x00000001  // 16/32-Bit General-Purpose Timer
N                                            // 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRGPIO register.
N//
N//*****************************************************************************
N#define SYSCTL_PRGPIO_R17       0x00020000  // GPIO Port T Peripheral Ready
N#define SYSCTL_PRGPIO_R16       0x00010000  // GPIO Port S Peripheral Ready
N#define SYSCTL_PRGPIO_R15       0x00008000  // GPIO Port R Peripheral Ready
N#define SYSCTL_PRGPIO_R14       0x00004000  // GPIO Port Q Peripheral Ready
N#define SYSCTL_PRGPIO_R13       0x00002000  // GPIO Port P Peripheral Ready
N#define SYSCTL_PRGPIO_R12       0x00001000  // GPIO Port N Peripheral Ready
N#define SYSCTL_PRGPIO_R11       0x00000800  // GPIO Port M Peripheral Ready
N#define SYSCTL_PRGPIO_R10       0x00000400  // GPIO Port L Peripheral Ready
N#define SYSCTL_PRGPIO_R9        0x00000200  // GPIO Port K Peripheral Ready
N#define SYSCTL_PRGPIO_R8        0x00000100  // GPIO Port J Peripheral Ready
N#define SYSCTL_PRGPIO_R7        0x00000080  // GPIO Port H Peripheral Ready
N#define SYSCTL_PRGPIO_R6        0x00000040  // GPIO Port G Peripheral Ready
N#define SYSCTL_PRGPIO_R5        0x00000020  // GPIO Port F Peripheral Ready
N#define SYSCTL_PRGPIO_R4        0x00000010  // GPIO Port E Peripheral Ready
N#define SYSCTL_PRGPIO_R3        0x00000008  // GPIO Port D Peripheral Ready
N#define SYSCTL_PRGPIO_R2        0x00000004  // GPIO Port C Peripheral Ready
N#define SYSCTL_PRGPIO_R1        0x00000002  // GPIO Port B Peripheral Ready
N#define SYSCTL_PRGPIO_R0        0x00000001  // GPIO Port A Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRDMA register.
N//
N//*****************************************************************************
N#define SYSCTL_PRDMA_R0         0x00000001  // uDMA Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREPI register.
N//
N//*****************************************************************************
N#define SYSCTL_PREPI_R0         0x00000001  // EPI Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRHIB register.
N//
N//*****************************************************************************
N#define SYSCTL_PRHIB_R0         0x00000001  // Hibernation Module Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRUART register.
N//
N//*****************************************************************************
N#define SYSCTL_PRUART_R7        0x00000080  // UART Module 7 Peripheral Ready
N#define SYSCTL_PRUART_R6        0x00000040  // UART Module 6 Peripheral Ready
N#define SYSCTL_PRUART_R5        0x00000020  // UART Module 5 Peripheral Ready
N#define SYSCTL_PRUART_R4        0x00000010  // UART Module 4 Peripheral Ready
N#define SYSCTL_PRUART_R3        0x00000008  // UART Module 3 Peripheral Ready
N#define SYSCTL_PRUART_R2        0x00000004  // UART Module 2 Peripheral Ready
N#define SYSCTL_PRUART_R1        0x00000002  // UART Module 1 Peripheral Ready
N#define SYSCTL_PRUART_R0        0x00000001  // UART Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRSSI register.
N//
N//*****************************************************************************
N#define SYSCTL_PRSSI_R3         0x00000008  // SSI Module 3 Peripheral Ready
N#define SYSCTL_PRSSI_R2         0x00000004  // SSI Module 2 Peripheral Ready
N#define SYSCTL_PRSSI_R1         0x00000002  // SSI Module 1 Peripheral Ready
N#define SYSCTL_PRSSI_R0         0x00000001  // SSI Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRI2C register.
N//
N//*****************************************************************************
N#define SYSCTL_PRI2C_R9         0x00000200  // I2C Module 9 Peripheral Ready
N#define SYSCTL_PRI2C_R8         0x00000100  // I2C Module 8 Peripheral Ready
N#define SYSCTL_PRI2C_R7         0x00000080  // I2C Module 7 Peripheral Ready
N#define SYSCTL_PRI2C_R6         0x00000040  // I2C Module 6 Peripheral Ready
N#define SYSCTL_PRI2C_R5         0x00000020  // I2C Module 5 Peripheral Ready
N#define SYSCTL_PRI2C_R4         0x00000010  // I2C Module 4 Peripheral Ready
N#define SYSCTL_PRI2C_R3         0x00000008  // I2C Module 3 Peripheral Ready
N#define SYSCTL_PRI2C_R2         0x00000004  // I2C Module 2 Peripheral Ready
N#define SYSCTL_PRI2C_R1         0x00000002  // I2C Module 1 Peripheral Ready
N#define SYSCTL_PRI2C_R0         0x00000001  // I2C Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRUSB register.
N//
N//*****************************************************************************
N#define SYSCTL_PRUSB_R0         0x00000001  // USB Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREPHY register.
N//
N//*****************************************************************************
N#define SYSCTL_PREPHY_R0        0x00000001  // Ethernet PHY Module Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRCAN register.
N//
N//*****************************************************************************
N#define SYSCTL_PRCAN_R1         0x00000002  // CAN Module 1 Peripheral Ready
N#define SYSCTL_PRCAN_R0         0x00000001  // CAN Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRADC register.
N//
N//*****************************************************************************
N#define SYSCTL_PRADC_R1         0x00000002  // ADC Module 1 Peripheral Ready
N#define SYSCTL_PRADC_R0         0x00000001  // ADC Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRACMP register.
N//
N//*****************************************************************************
N#define SYSCTL_PRACMP_R0        0x00000001  // Analog Comparator Module 0
N                                            // Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRPWM register.
N//
N//*****************************************************************************
N#define SYSCTL_PRPWM_R1         0x00000002  // PWM Module 1 Peripheral Ready
N#define SYSCTL_PRPWM_R0         0x00000001  // PWM Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRQEI register.
N//
N//*****************************************************************************
N#define SYSCTL_PRQEI_R1         0x00000002  // QEI Module 1 Peripheral Ready
N#define SYSCTL_PRQEI_R0         0x00000001  // QEI Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREEPROM
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PREEPROM_R0      0x00000001  // EEPROM Module Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRWTIMER
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PRWTIMER_R5      0x00000020  // 32/64-Bit Wide General-Purpose
N                                            // Timer 5 Peripheral Ready
N#define SYSCTL_PRWTIMER_R4      0x00000010  // 32/64-Bit Wide General-Purpose
N                                            // Timer 4 Peripheral Ready
N#define SYSCTL_PRWTIMER_R3      0x00000008  // 32/64-Bit Wide General-Purpose
N                                            // Timer 3 Peripheral Ready
N#define SYSCTL_PRWTIMER_R2      0x00000004  // 32/64-Bit Wide General-Purpose
N                                            // Timer 2 Peripheral Ready
N#define SYSCTL_PRWTIMER_R1      0x00000002  // 32/64-Bit Wide General-Purpose
N                                            // Timer 1 Peripheral Ready
N#define SYSCTL_PRWTIMER_R0      0x00000001  // 32/64-Bit Wide General-Purpose
N                                            // Timer 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRCCM register.
N//
N//*****************************************************************************
N#define SYSCTL_PRCCM_R0         0x00000001  // CRC and Cryptographic Modules
N                                            // Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PRLCD register.
N//
N//*****************************************************************************
N#define SYSCTL_PRLCD_R0         0x00000001  // LCD Controller Module 0
N                                            // Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PROWIRE register.
N//
N//*****************************************************************************
N#define SYSCTL_PROWIRE_R0       0x00000001  // 1-Wire Module 0 Peripheral Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_PREMAC register.
N//
N//*****************************************************************************
N#define SYSCTL_PREMAC_R0        0x00000001  // Ethernet MAC Module 0 Peripheral
N                                            // Ready
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_UNIQUEID0
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_UNIQUEID0_ID_M   0xFFFFFFFF  // Unique ID
N#define SYSCTL_UNIQUEID0_ID_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_UNIQUEID1
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_UNIQUEID1_ID_M   0xFFFFFFFF  // Unique ID
N#define SYSCTL_UNIQUEID1_ID_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_UNIQUEID2
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_UNIQUEID2_ID_M   0xFFFFFFFF  // Unique ID
N#define SYSCTL_UNIQUEID2_ID_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_UNIQUEID3
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_UNIQUEID3_ID_M   0xFFFFFFFF  // Unique ID
N#define SYSCTL_UNIQUEID3_ID_S   0
N
N//*****************************************************************************
N//
N// The following are defines for the bit fields in the SYSCTL_CCMCGREQ
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_CCMCGREQ_DESCFG  0x00000004  // DES Clock Gating Request
N#define SYSCTL_CCMCGREQ_AESCFG  0x00000002  // AES Clock Gating Request
N#define SYSCTL_CCMCGREQ_SHACFG  0x00000001  // SHA/MD5 Clock Gating Request
N
N//*****************************************************************************
N//
N// The following definitions are deprecated.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the SYSCTL_DID0
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_DID0_CLASS_BLIZZARD                                            \
N                                0x00050000  // Tiva(TM) C Series TM4C123-class
X#define SYSCTL_DID0_CLASS_BLIZZARD                                                                            0x00050000  
N                                            // microcontrollers
N#define SYSCTL_DID0_CLASS_SNOWFLAKE                                           \
N                                0x000A0000  // Tiva(TM) C Series TM4C129-class
X#define SYSCTL_DID0_CLASS_SNOWFLAKE                                                                           0x000A0000  
N                                            // microcontrollers
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the SYSCTL_RESC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_RESC_HIB         0x00000040  // HIB Reset
N
N//*****************************************************************************
N//
N// The following are deprecated defines for the bit fields in the SYSCTL_PWRTC
N// register.
N//
N//*****************************************************************************
N#define SYSCTL_PWRTC_VDDA_UBOR0 0x00000010  // VDDA Under BOR0 Status
N#define SYSCTL_PWRTC_VDD_UBOR0  0x00000001  // VDD Under BOR0 Status
N
N#endif
N
N#endif // __HW_SYSCTL_H__
L 53 "i2c.c" 2
N#include "inc/hw_types.h"
L 1 "inc/hw_types.h" 1
N//*****************************************************************************
N//
N// hw_types.h - Common types and macros.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Firmware Development Package.
N//
N//*****************************************************************************
N
N#ifndef __HW_TYPES_H__
N#define __HW_TYPES_H__
N
N//*****************************************************************************
N//
N// Macros for hardware access, both direct and via the bit-band region.
N//
N//*****************************************************************************
N#define HWREG(x)                                                              \
N        (*((volatile uint32_t *)(x)))
X#define HWREG(x)                                                                      (*((volatile uint32_t *)(x)))
N#define HWREGH(x)                                                             \
N        (*((volatile uint16_t *)(x)))
X#define HWREGH(x)                                                                     (*((volatile uint16_t *)(x)))
N#define HWREGB(x)                                                             \
N        (*((volatile uint8_t *)(x)))
X#define HWREGB(x)                                                                     (*((volatile uint8_t *)(x)))
N#define HWREGBITW(x, b)                                                       \
N        HWREG(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                     \
N              (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITW(x, b)                                                               HWREG(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITH(x, b)                                                       \
N        HWREGH(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                    \
N               (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITH(x, b)                                                               HWREGH(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N#define HWREGBITB(x, b)                                                       \
N        HWREGB(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                    \
N               (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
X#define HWREGBITB(x, b)                                                               HWREGB(((uint32_t)(x) & 0xF0000000) | 0x02000000 |                                   (((uint32_t)(x) & 0x000FFFFF) << 5) | ((b) << 2))
N
N//*****************************************************************************
N//
N// Helper Macros for determining silicon revisions, etc.
N//
N// These macros will be used by Driverlib at "run-time" to create necessary
N// conditional code blocks that will allow a single version of the Driverlib
N// "binary" code to support multiple(all) Tiva silicon revisions.
N//
N// It is expected that these macros will be used inside of a standard 'C'
N// conditional block of code, e.g.
N//
N//     if(CLASS_IS_TM4C123)
N//     {
N//         do some TM4C123-class specific code here.
N//     }
N//
N// By default, these macros will be defined as run-time checks of the
N// appropriate register(s) to allow creation of run-time conditional code
N// blocks for a common DriverLib across the entire Tiva family.
N//
N// However, if code-space optimization is required, these macros can be "hard-
N// coded" for a specific version of Tiva silicon.  Many compilers will then
N// detect the "hard-coded" conditionals, and appropriately optimize the code
N// blocks, eliminating any "unreachable" code.  This would result in a smaller
N// Driverlib, thus producing a smaller final application size, but at the cost
N// of limiting the Driverlib binary to a specific Tiva silicon revision.
N//
N//*****************************************************************************
N#ifndef CLASS_IS_TM4C123
N#define CLASS_IS_TM4C123                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C123))
X#define CLASS_IS_TM4C123                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C123))
N#endif
N
N#ifndef CLASS_IS_TM4C129
N#define CLASS_IS_TM4C129                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) == \
N         (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C129))
X#define CLASS_IS_TM4C129                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_VER_M | SYSCTL_DID0_CLASS_M)) ==          (SYSCTL_DID0_VER_1 | SYSCTL_DID0_CLASS_TM4C129))
N#endif
N
N#ifndef REVISION_IS_A0
N#define REVISION_IS_A0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A1
N#define REVISION_IS_A1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_A1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_A2
N#define REVISION_IS_A2                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
X#define REVISION_IS_A2                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVA | SYSCTL_DID0_MIN_2))
N#endif
N
N#ifndef REVISION_IS_B0
N#define REVISION_IS_B0                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
X#define REVISION_IS_B0                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_0))
N#endif
N
N#ifndef REVISION_IS_B1
N#define REVISION_IS_B1                                                     \
N        ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) == \
N         (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
X#define REVISION_IS_B1                                                             ((HWREG(SYSCTL_DID0) & (SYSCTL_DID0_MAJ_M | SYSCTL_DID0_MIN_M)) ==          (SYSCTL_DID0_MAJ_REVB | SYSCTL_DID0_MIN_1))
N#endif
N
N//*****************************************************************************
N//
N// For TivaWare 2.1, we removed all references to Tiva IC codenames from the
N// source.  To ensure that existing customer code doesn't break as a result
N// of this change, make sure that the old definitions are still available at
N// least for the time being.
N//
N//*****************************************************************************
N#ifndef DEPRECATED
N#define CLASS_IS_BLIZZARD CLASS_IS_TM4C123
N#define CLASS_IS_SNOWFLAKE CLASS_IS_TM4C123
N#endif
N
N#endif // __HW_TYPES_H__
L 54 "i2c.c" 2
N#include "driverlib/debug.h"
L 1 "driverlib/debug.h" 1
N//*****************************************************************************
N//
N// debug.h - Macros for assisting debug of the driver library.
N//
N// Copyright (c) 2006-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_DEBUG_H__
N#define __DRIVERLIB_DEBUG_H__
N
N//*****************************************************************************
N//
N// Prototype for the function that is called when an invalid argument is passed
N// to an API.  This is only used when doing a DEBUG build.
N//
N//*****************************************************************************
Nextern void __error__(char *pcFilename, uint32_t ui32Line);
N
N//*****************************************************************************
N//
N// The ASSERT macro, which does the actual assertion checking.  Typically, this
N// will be for procedure arguments.
N//
N//*****************************************************************************
N#ifdef DEBUG
S#define ASSERT(expr) do                                                       \
S                     {                                                        \
S                         if(!(expr))                                          \
S                         {                                                    \
S                             __error__(__FILE__, __LINE__);                   \
S                         }                                                    \
S                     }                                                        \
S                     while(0)
X#define ASSERT(expr) do                                                                            {                                                                                 if(!(expr))                                                                   {                                                                                 __error__(__FILE__, __LINE__);                                            }                                                                         }                                                                             while(0)
N#else
N#define ASSERT(expr)
N#endif
N
N#endif // __DRIVERLIB_DEBUG_H__
L 55 "i2c.c" 2
N#include "driverlib/i2c.h"
L 1 "driverlib/i2c.h" 1
N//*****************************************************************************
N//
N// i2c.h - Prototypes for the I2C Driver.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_I2C_H__
N#define __DRIVERLIB_I2C_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Defines for the API.
N//
N//*****************************************************************************
N
N//*****************************************************************************
N//
N// Interrupt defines.
N//
N//*****************************************************************************
N#define I2C_INT_MASTER          0x00000001
N#define I2C_INT_SLAVE           0x00000002
N
N//*****************************************************************************
N//
N// I2C Master commands.
N//
N//*****************************************************************************
N#define I2C_MASTER_CMD_SINGLE_SEND                                            \
N                                0x00000007
X#define I2C_MASTER_CMD_SINGLE_SEND                                                                            0x00000007
N#define I2C_MASTER_CMD_SINGLE_RECEIVE                                         \
N                                0x00000007
X#define I2C_MASTER_CMD_SINGLE_RECEIVE                                                                         0x00000007
N#define I2C_MASTER_CMD_BURST_SEND_START                                       \
N                                0x00000003
X#define I2C_MASTER_CMD_BURST_SEND_START                                                                       0x00000003
N#define I2C_MASTER_CMD_BURST_SEND_CONT                                        \
N                                0x00000001
X#define I2C_MASTER_CMD_BURST_SEND_CONT                                                                        0x00000001
N#define I2C_MASTER_CMD_BURST_SEND_FINISH                                      \
N                                0x00000005
X#define I2C_MASTER_CMD_BURST_SEND_FINISH                                                                      0x00000005
N#define I2C_MASTER_CMD_BURST_SEND_STOP                                        \
N                                0x00000004
X#define I2C_MASTER_CMD_BURST_SEND_STOP                                                                        0x00000004
N#define I2C_MASTER_CMD_BURST_SEND_ERROR_STOP                                  \
N                                0x00000004
X#define I2C_MASTER_CMD_BURST_SEND_ERROR_STOP                                                                  0x00000004
N#define I2C_MASTER_CMD_BURST_RECEIVE_START                                    \
N                                0x0000000b
X#define I2C_MASTER_CMD_BURST_RECEIVE_START                                                                    0x0000000b
N#define I2C_MASTER_CMD_BURST_RECEIVE_CONT                                     \
N                                0x00000009
X#define I2C_MASTER_CMD_BURST_RECEIVE_CONT                                                                     0x00000009
N#define I2C_MASTER_CMD_BURST_RECEIVE_FINISH                                   \
N                                0x00000005
X#define I2C_MASTER_CMD_BURST_RECEIVE_FINISH                                                                   0x00000005
N#define I2C_MASTER_CMD_BURST_RECEIVE_ERROR_STOP                               \
N                                0x00000004
X#define I2C_MASTER_CMD_BURST_RECEIVE_ERROR_STOP                                                               0x00000004
N#define I2C_MASTER_CMD_QUICK_COMMAND                                          \
N                                0x00000027
X#define I2C_MASTER_CMD_QUICK_COMMAND                                                                          0x00000027
N#define I2C_MASTER_CMD_HS_MASTER_CODE_SEND                                    \
N                                0x00000013
X#define I2C_MASTER_CMD_HS_MASTER_CODE_SEND                                                                    0x00000013
N#define I2C_MASTER_CMD_FIFO_SINGLE_SEND                                       \
N                                0x00000046
X#define I2C_MASTER_CMD_FIFO_SINGLE_SEND                                                                       0x00000046
N#define I2C_MASTER_CMD_FIFO_SINGLE_RECEIVE                                    \
N                                0x00000046
X#define I2C_MASTER_CMD_FIFO_SINGLE_RECEIVE                                                                    0x00000046
N#define I2C_MASTER_CMD_FIFO_BURST_SEND_START                                  \
N                                0x00000042
X#define I2C_MASTER_CMD_FIFO_BURST_SEND_START                                                                  0x00000042
N#define I2C_MASTER_CMD_FIFO_BURST_SEND_CONT                                   \
N                                0x00000040
X#define I2C_MASTER_CMD_FIFO_BURST_SEND_CONT                                                                   0x00000040
N#define I2C_MASTER_CMD_FIFO_BURST_SEND_FINISH                                 \
N                                0x00000044
X#define I2C_MASTER_CMD_FIFO_BURST_SEND_FINISH                                                                 0x00000044
N#define I2C_MASTER_CMD_FIFO_BURST_SEND_ERROR_STOP                             \
N                                0x00000004
X#define I2C_MASTER_CMD_FIFO_BURST_SEND_ERROR_STOP                                                             0x00000004
N#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_START                               \
N                                0x0000004a
X#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_START                                                               0x0000004a
N#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_CONT                                \
N                                0x00000048
X#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_CONT                                                                0x00000048
N#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_FINISH                              \
N                                0x00000044
X#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_FINISH                                                              0x00000044
N#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_ERROR_STOP                          \
N                                0x00000004
X#define I2C_MASTER_CMD_FIFO_BURST_RECEIVE_ERROR_STOP                                                          0x00000004
N
N//*****************************************************************************
N//
N// I2C Master glitch filter configuration.
N//
N//*****************************************************************************
N#define I2C_MASTER_GLITCH_FILTER_DISABLED                                     \
N                                0
X#define I2C_MASTER_GLITCH_FILTER_DISABLED                                                                     0
N#define I2C_MASTER_GLITCH_FILTER_1                                            \
N                                0x00010000
X#define I2C_MASTER_GLITCH_FILTER_1                                                                            0x00010000
N#define I2C_MASTER_GLITCH_FILTER_2                                            \
N                                0x00020000
X#define I2C_MASTER_GLITCH_FILTER_2                                                                            0x00020000
N#define I2C_MASTER_GLITCH_FILTER_3                                            \
N                                0x00030000
X#define I2C_MASTER_GLITCH_FILTER_3                                                                            0x00030000
N#define I2C_MASTER_GLITCH_FILTER_4                                            \
N                                0x00040000
X#define I2C_MASTER_GLITCH_FILTER_4                                                                            0x00040000
N#define I2C_MASTER_GLITCH_FILTER_8                                            \
N                                0x00050000
X#define I2C_MASTER_GLITCH_FILTER_8                                                                            0x00050000
N#define I2C_MASTER_GLITCH_FILTER_16                                           \
N                                0x00060000
X#define I2C_MASTER_GLITCH_FILTER_16                                                                           0x00060000
N#define I2C_MASTER_GLITCH_FILTER_32                                           \
N                                0x00070000
X#define I2C_MASTER_GLITCH_FILTER_32                                                                           0x00070000
N
N//*****************************************************************************
N//
N// I2C Master error status.
N//
N//*****************************************************************************
N#define I2C_MASTER_ERR_NONE     0
N#define I2C_MASTER_ERR_ADDR_ACK 0x00000004
N#define I2C_MASTER_ERR_DATA_ACK 0x00000008
N#define I2C_MASTER_ERR_ARB_LOST 0x00000010
N#define I2C_MASTER_ERR_CLK_TOUT 0x00000080
N
N//*****************************************************************************
N//
N// I2C Slave action requests
N//
N//*****************************************************************************
N#define I2C_SLAVE_ACT_NONE      0
N#define I2C_SLAVE_ACT_RREQ      0x00000001  // Master has sent data
N#define I2C_SLAVE_ACT_TREQ      0x00000002  // Master has requested data
N#define I2C_SLAVE_ACT_RREQ_FBR  0x00000005  // Master has sent first byte
N#define I2C_SLAVE_ACT_OWN2SEL   0x00000008  // Master requested secondary slave
N#define I2C_SLAVE_ACT_QCMD      0x00000010  // Master has sent a Quick Command
N#define I2C_SLAVE_ACT_QCMD_DATA 0x00000020  // Master Quick Command value
N
N//*****************************************************************************
N//
N// Miscellaneous I2C driver definitions.
N//
N//*****************************************************************************
N#define I2C_MASTER_MAX_RETRIES  1000        // Number of retries
N
N//*****************************************************************************
N//
N// I2C Master interrupts.
N//
N//*****************************************************************************
N#define I2C_MASTER_INT_RX_FIFO_FULL                                           \
N                                0x00000800  // RX FIFO Full Interrupt
X#define I2C_MASTER_INT_RX_FIFO_FULL                                                                           0x00000800  
N#define I2C_MASTER_INT_TX_FIFO_EMPTY                                          \
N                                0x00000400  // TX FIFO Empty Interrupt
X#define I2C_MASTER_INT_TX_FIFO_EMPTY                                                                          0x00000400  
N#define I2C_MASTER_INT_RX_FIFO_REQ                                            \
N                                0x00000200  // RX FIFO Request Interrupt
X#define I2C_MASTER_INT_RX_FIFO_REQ                                                                            0x00000200  
N#define I2C_MASTER_INT_TX_FIFO_REQ                                            \
N                                0x00000100  // TX FIFO Request Interrupt
X#define I2C_MASTER_INT_TX_FIFO_REQ                                                                            0x00000100  
N#define I2C_MASTER_INT_ARB_LOST                                               \
N                                0x00000080  // Arb Lost Interrupt
X#define I2C_MASTER_INT_ARB_LOST                                                                               0x00000080  
N#define I2C_MASTER_INT_STOP     0x00000040  // Stop Condition Interrupt
N#define I2C_MASTER_INT_START    0x00000020  // Start Condition Interrupt
N#define I2C_MASTER_INT_NACK     0x00000010  // Addr/Data NACK Interrupt
N#define I2C_MASTER_INT_TX_DMA_DONE                                            \
N                                0x00000008  // TX DMA Complete Interrupt
X#define I2C_MASTER_INT_TX_DMA_DONE                                                                            0x00000008  
N#define I2C_MASTER_INT_RX_DMA_DONE                                            \
N                                0x00000004  // RX DMA Complete Interrupt
X#define I2C_MASTER_INT_RX_DMA_DONE                                                                            0x00000004  
N#define I2C_MASTER_INT_TIMEOUT  0x00000002  // Clock Timeout Interrupt
N#define I2C_MASTER_INT_DATA     0x00000001  // Data Interrupt
N
N//*****************************************************************************
N//
N// I2C Slave interrupts.
N//
N//*****************************************************************************
N#define I2C_SLAVE_INT_RX_FIFO_FULL                                            \
N                                0x00000100  // RX FIFO Full Interrupt
X#define I2C_SLAVE_INT_RX_FIFO_FULL                                                                            0x00000100  
N#define I2C_SLAVE_INT_TX_FIFO_EMPTY                                           \
N                                0x00000080  // TX FIFO Empty Interrupt
X#define I2C_SLAVE_INT_TX_FIFO_EMPTY                                                                           0x00000080  
N#define I2C_SLAVE_INT_RX_FIFO_REQ                                             \
N                                0x00000040  // RX FIFO Request Interrupt
X#define I2C_SLAVE_INT_RX_FIFO_REQ                                                                             0x00000040  
N#define I2C_SLAVE_INT_TX_FIFO_REQ                                             \
N                                0x00000020  // TX FIFO Request Interrupt
X#define I2C_SLAVE_INT_TX_FIFO_REQ                                                                             0x00000020  
N#define I2C_SLAVE_INT_TX_DMA_DONE                                             \
N                                0x00000010  // TX DMA Complete Interrupt
X#define I2C_SLAVE_INT_TX_DMA_DONE                                                                             0x00000010  
N#define I2C_SLAVE_INT_RX_DMA_DONE                                             \
N                                0x00000008  // RX DMA Complete Interrupt
X#define I2C_SLAVE_INT_RX_DMA_DONE                                                                             0x00000008  
N#define I2C_SLAVE_INT_STOP      0x00000004  // Stop Condition Interrupt
N#define I2C_SLAVE_INT_START     0x00000002  // Start Condition Interrupt
N#define I2C_SLAVE_INT_DATA      0x00000001  // Data Interrupt
N
N//*****************************************************************************
N//
N// I2C Slave FIFO configuration macros.
N//
N//*****************************************************************************
N#define I2C_SLAVE_TX_FIFO_ENABLE                                              \
N                                0x00000002
X#define I2C_SLAVE_TX_FIFO_ENABLE                                                                              0x00000002
N#define I2C_SLAVE_RX_FIFO_ENABLE                                              \
N                                0x00000004
X#define I2C_SLAVE_RX_FIFO_ENABLE                                                                              0x00000004
N
N//*****************************************************************************
N//
N// I2C FIFO configuration macros.
N//
N//*****************************************************************************
N#define I2C_FIFO_CFG_TX_MASTER  0x00000000
N#define I2C_FIFO_CFG_TX_SLAVE   0x00008000
N#define I2C_FIFO_CFG_RX_MASTER  0x00000000
N#define I2C_FIFO_CFG_RX_SLAVE   0x80000000
N#define I2C_FIFO_CFG_TX_MASTER_DMA                                            \
N                                0x00002000
X#define I2C_FIFO_CFG_TX_MASTER_DMA                                                                            0x00002000
N#define I2C_FIFO_CFG_TX_SLAVE_DMA                                             \
N                                0x0000a000
X#define I2C_FIFO_CFG_TX_SLAVE_DMA                                                                             0x0000a000
N#define I2C_FIFO_CFG_RX_MASTER_DMA                                            \
N                                0x20000000
X#define I2C_FIFO_CFG_RX_MASTER_DMA                                                                            0x20000000
N#define I2C_FIFO_CFG_RX_SLAVE_DMA                                             \
N                                0xa0000000
X#define I2C_FIFO_CFG_RX_SLAVE_DMA                                                                             0xa0000000
N#define I2C_FIFO_CFG_TX_NO_TRIG 0x00000000
N#define I2C_FIFO_CFG_TX_TRIG_1  0x00000001
N#define I2C_FIFO_CFG_TX_TRIG_2  0x00000002
N#define I2C_FIFO_CFG_TX_TRIG_3  0x00000003
N#define I2C_FIFO_CFG_TX_TRIG_4  0x00000004
N#define I2C_FIFO_CFG_TX_TRIG_5  0x00000005
N#define I2C_FIFO_CFG_TX_TRIG_6  0x00000006
N#define I2C_FIFO_CFG_TX_TRIG_7  0x00000007
N#define I2C_FIFO_CFG_TX_TRIG_8  0x00000008
N#define I2C_FIFO_CFG_RX_NO_TRIG 0x00000000
N#define I2C_FIFO_CFG_RX_TRIG_1  0x00010000
N#define I2C_FIFO_CFG_RX_TRIG_2  0x00020000
N#define I2C_FIFO_CFG_RX_TRIG_3  0x00030000
N#define I2C_FIFO_CFG_RX_TRIG_4  0x00040000
N#define I2C_FIFO_CFG_RX_TRIG_5  0x00050000
N#define I2C_FIFO_CFG_RX_TRIG_6  0x00060000
N#define I2C_FIFO_CFG_RX_TRIG_7  0x00070000
N#define I2C_FIFO_CFG_RX_TRIG_8  0x00080000
N
N//*****************************************************************************
N//
N// I2C FIFO status.
N//
N//*****************************************************************************
N#define I2C_FIFO_RX_BELOW_TRIG_LEVEL                                          \
N                                0x00040000
X#define I2C_FIFO_RX_BELOW_TRIG_LEVEL                                                                          0x00040000
N#define I2C_FIFO_RX_FULL        0x00020000
N#define I2C_FIFO_RX_EMPTY       0x00010000
N#define I2C_FIFO_TX_BELOW_TRIG_LEVEL                                          \
N                                0x00000004
X#define I2C_FIFO_TX_BELOW_TRIG_LEVEL                                                                          0x00000004
N#define I2C_FIFO_TX_FULL        0x00000002
N#define I2C_FIFO_TX_EMPTY       0x00000001
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern void I2CIntRegister(uint32_t ui32Base, void(*pfnHandler)(void));
Nextern void I2CIntUnregister(uint32_t ui32Base);
Nextern void I2CTxFIFOConfigSet(uint32_t ui32Base, uint32_t ui32Config);
Nextern void I2CTxFIFOFlush(uint32_t ui32Base);
Nextern void I2CRxFIFOConfigSet(uint32_t ui32Base, uint32_t ui32Config);
Nextern void I2CRxFIFOFlush(uint32_t ui32Base);
Nextern uint32_t I2CFIFOStatus(uint32_t ui32Base);
Nextern void I2CFIFODataPut(uint32_t ui32Base, uint8_t ui8Data);
Nextern uint32_t I2CFIFODataPutNonBlocking(uint32_t ui32Base,
N                                          uint8_t ui8Data);
Nextern uint32_t I2CFIFODataGet(uint32_t ui32Base);
Nextern uint32_t I2CFIFODataGetNonBlocking(uint32_t ui32Base,
N                                          uint8_t *pui8Data);
Nextern void I2CMasterBurstLengthSet(uint32_t ui32Base,
N                                    uint8_t ui8Length);
Nextern uint32_t I2CMasterBurstCountGet(uint32_t ui32Base);
Nextern void I2CMasterGlitchFilterConfigSet(uint32_t ui32Base,
N                                           uint32_t ui32Config);
Nextern void I2CSlaveFIFOEnable(uint32_t ui32Base, uint32_t ui32Config);
Nextern void I2CSlaveFIFODisable(uint32_t ui32Base);
Nextern bool I2CMasterBusBusy(uint32_t ui32Base);
Xextern _Bool I2CMasterBusBusy(uint32_t ui32Base);
Nextern bool I2CMasterBusy(uint32_t ui32Base);
Xextern _Bool I2CMasterBusy(uint32_t ui32Base);
Nextern void I2CMasterControl(uint32_t ui32Base, uint32_t ui32Cmd);
Nextern uint32_t I2CMasterDataGet(uint32_t ui32Base);
Nextern void I2CMasterDataPut(uint32_t ui32Base, uint8_t ui8Data);
Nextern void I2CMasterDisable(uint32_t ui32Base);
Nextern void I2CMasterEnable(uint32_t ui32Base);
Nextern uint32_t I2CMasterErr(uint32_t ui32Base);
Nextern void I2CMasterInitExpClk(uint32_t ui32Base, uint32_t ui32I2CClk,
N                                bool bFast);
X                                _Bool bFast);
Nextern void I2CMasterIntClear(uint32_t ui32Base);
Nextern void I2CMasterIntDisable(uint32_t ui32Base);
Nextern void I2CMasterIntEnable(uint32_t ui32Base);
Nextern bool I2CMasterIntStatus(uint32_t ui32Base, bool bMasked);
Xextern _Bool I2CMasterIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern void I2CMasterIntEnableEx(uint32_t ui32Base,
N                                 uint32_t ui32IntFlags);
Nextern void I2CMasterIntDisableEx(uint32_t ui32Base,
N                                  uint32_t ui32IntFlags);
Nextern uint32_t I2CMasterIntStatusEx(uint32_t ui32Base,
N                                       bool bMasked);
X                                       _Bool bMasked);
Nextern void I2CMasterIntClearEx(uint32_t ui32Base,
N                                uint32_t ui32IntFlags);
Nextern void I2CMasterTimeoutSet(uint32_t ui32Base, uint32_t ui32Value);
Nextern void I2CSlaveACKOverride(uint32_t ui32Base, bool bEnable);
Xextern void I2CSlaveACKOverride(uint32_t ui32Base, _Bool bEnable);
Nextern void I2CSlaveACKValueSet(uint32_t ui32Base, bool bACK);
Xextern void I2CSlaveACKValueSet(uint32_t ui32Base, _Bool bACK);
Nextern uint32_t I2CMasterLineStateGet(uint32_t ui32Base);
Nextern void I2CMasterSlaveAddrSet(uint32_t ui32Base,
N                                  uint8_t ui8SlaveAddr,
N                                  bool bReceive);
X                                  _Bool bReceive);
Nextern uint32_t I2CSlaveDataGet(uint32_t ui32Base);
Nextern void I2CSlaveDataPut(uint32_t ui32Base, uint8_t ui8Data);
Nextern void I2CSlaveDisable(uint32_t ui32Base);
Nextern void I2CSlaveEnable(uint32_t ui32Base);
Nextern void I2CSlaveInit(uint32_t ui32Base, uint8_t ui8SlaveAddr);
Nextern void I2CSlaveAddressSet(uint32_t ui32Base, uint8_t ui8AddrNum,
N                                 uint8_t ui8SlaveAddr);
Nextern void I2CSlaveIntClear(uint32_t ui32Base);
Nextern void I2CSlaveIntDisable(uint32_t ui32Base);
Nextern void I2CSlaveIntEnable(uint32_t ui32Base);
Nextern void I2CSlaveIntClearEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern void I2CSlaveIntDisableEx(uint32_t ui32Base,
N                                 uint32_t ui32IntFlags);
Nextern void I2CSlaveIntEnableEx(uint32_t ui32Base, uint32_t ui32IntFlags);
Nextern bool I2CSlaveIntStatus(uint32_t ui32Base, bool bMasked);
Xextern _Bool I2CSlaveIntStatus(uint32_t ui32Base, _Bool bMasked);
Nextern uint32_t I2CSlaveIntStatusEx(uint32_t ui32Base,
N                                      bool bMasked);
X                                      _Bool bMasked);
Nextern uint32_t I2CSlaveStatus(uint32_t ui32Base);
Nextern void I2CLoopbackEnable(uint32_t ui32Base);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_I2C_H__
L 56 "i2c.c" 2
N#include "driverlib/interrupt.h"
L 1 "driverlib/interrupt.h" 1
N//*****************************************************************************
N//
N// interrupt.h - Prototypes for the NVIC Interrupt Controller Driver.
N//
N// Copyright (c) 2005-2017 Texas Instruments Incorporated.  All rights reserved.
N// Software License Agreement
N// 
N//   Redistribution and use in source and binary forms, with or without
N//   modification, are permitted provided that the following conditions
N//   are met:
N// 
N//   Redistributions of source code must retain the above copyright
N//   notice, this list of conditions and the following disclaimer.
N// 
N//   Redistributions in binary form must reproduce the above copyright
N//   notice, this list of conditions and the following disclaimer in the
N//   documentation and/or other materials provided with the  
N//   distribution.
N// 
N//   Neither the name of Texas Instruments Incorporated nor the names of
N//   its contributors may be used to endorse or promote products derived
N//   from this software without specific prior written permission.
N// 
N// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
N// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
N// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
N// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
N// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
N// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
N// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
N// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
N// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
N// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
N// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
N// 
N// This is part of revision 2.1.4.178 of the Tiva Peripheral Driver Library.
N//
N//*****************************************************************************
N
N#ifndef __DRIVERLIB_INTERRUPT_H__
N#define __DRIVERLIB_INTERRUPT_H__
N
N//*****************************************************************************
N//
N// If building with a C++ compiler, make all of the definitions in this header
N// have a C binding.
N//
N//*****************************************************************************
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N//*****************************************************************************
N//
N// Macro to generate an interrupt priority mask based on the number of bits
N// of priority supported by the hardware.
N//
N//*****************************************************************************
N#define INT_PRIORITY_MASK       ((0xFF << (8 - NUM_PRIORITY_BITS)) & 0xFF)
N
N//*****************************************************************************
N//
N// Prototypes for the APIs.
N//
N//*****************************************************************************
Nextern bool IntMasterEnable(void);
Xextern _Bool IntMasterEnable(void);
Nextern bool IntMasterDisable(void);
Xextern _Bool IntMasterDisable(void);
Nextern void IntRegister(uint32_t ui32Interrupt, void (*pfnHandler)(void));
Nextern void IntUnregister(uint32_t ui32Interrupt);
Nextern void IntPriorityGroupingSet(uint32_t ui32Bits);
Nextern uint32_t IntPriorityGroupingGet(void);
Nextern void IntPrioritySet(uint32_t ui32Interrupt,
N                           uint8_t ui8Priority);
Nextern int32_t IntPriorityGet(uint32_t ui32Interrupt);
Nextern void IntEnable(uint32_t ui32Interrupt);
Nextern void IntDisable(uint32_t ui32Interrupt);
Nextern uint32_t IntIsEnabled(uint32_t ui32Interrupt);
Nextern void IntPendSet(uint32_t ui32Interrupt);
Nextern void IntPendClear(uint32_t ui32Interrupt);
Nextern void IntPriorityMaskSet(uint32_t ui32PriorityMask);
Nextern uint32_t IntPriorityMaskGet(void);
Nextern void IntTrigger(uint32_t ui32Interrupt);
N
N//*****************************************************************************
N//
N// Mark the end of the C bindings section for C++ compilers.
N//
N//*****************************************************************************
N#ifdef __cplusplus
S}
N#endif
N
N#endif // __DRIVERLIB_INTERRUPT_H__
L 57 "i2c.c" 2
N
N//*****************************************************************************
N//
N// A mapping of I2C base address to interrupt number.
N//
N//*****************************************************************************
Nstatic const uint32_t g_ppui32I2CIntMap[][2] =
N{
N    { I2C0_BASE, INT_I2C0_TM4C123 },
X    { 0x40020000, 24 },
N    { I2C1_BASE, INT_I2C1_TM4C123 },
X    { 0x40021000, 53 },
N    { I2C2_BASE, INT_I2C2_TM4C123 },
X    { 0x40022000, 84 },
N    { I2C3_BASE, INT_I2C3_TM4C123 },
X    { 0x40023000, 85 },
N    { I2C4_BASE, INT_I2C4_TM4C123 },
X    { 0x400C0000, 125 },
N    { I2C5_BASE, INT_I2C5_TM4C123 },
X    { 0x400C1000, 126 },
N};
N
Nstatic const int_fast8_t g_i8I2CIntMapRows =
N    sizeof(g_ppui32I2CIntMap) / sizeof(g_ppui32I2CIntMap[0]);
N
Nstatic const uint32_t g_ppui32I2CIntMapSnowflake[][2] =
N{
N    { I2C0_BASE, INT_I2C0_TM4C129 },
X    { 0x40020000, 24 },
N    { I2C1_BASE, INT_I2C1_TM4C129 },
X    { 0x40021000, 53 },
N    { I2C2_BASE, INT_I2C2_TM4C129 },
X    { 0x40022000, 77 },
N    { I2C3_BASE, INT_I2C3_TM4C129 },
X    { 0x40023000, 78 },
N    { I2C4_BASE, INT_I2C4_TM4C129 },
X    { 0x400C0000, 86 },
N    { I2C5_BASE, INT_I2C5_TM4C129 },
X    { 0x400C1000, 87 },
N    { I2C6_BASE, INT_I2C6_TM4C129 },
X    { 0x400C2000, 118 },
N    { I2C7_BASE, INT_I2C7_TM4C129 },
X    { 0x400C3000, 119 },
N    { I2C8_BASE, INT_I2C8_TM4C129 },
X    { 0x400B8000, 125 },
N    { I2C9_BASE, INT_I2C9_TM4C129 },
X    { 0x400B9000, 126 },
N};
Nstatic const int_fast8_t g_i8I2CIntMapSnowflakeRows =
N    sizeof(g_ppui32I2CIntMapSnowflake) / sizeof(g_ppui32I2CIntMapSnowflake[0]);
N
N//*****************************************************************************
N//
N//! \internal
N//! Checks an I2C base address.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function determines if a I2C module base address is valid.
N//!
N//! \return Returns \b true if the base address is valid and \b false
N//! otherwise.
N//
N//*****************************************************************************
N#ifdef DEBUG
Sstatic bool
S_I2CBaseValid(uint32_t ui32Base)
S{
S    return((ui32Base == I2C0_BASE) || (ui32Base == I2C1_BASE) ||
S           (ui32Base == I2C2_BASE) || (ui32Base == I2C3_BASE) ||
S           (ui32Base == I2C4_BASE) || (ui32Base == I2C5_BASE) ||
S           (ui32Base == I2C6_BASE) || (ui32Base == I2C7_BASE) ||
S           (ui32Base == I2C8_BASE) || (ui32Base == I2C9_BASE));
S}
N#endif
N
N//*****************************************************************************
N//
N//! \internal
N//! Gets the I2C interrupt number.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! Given a I2C base address, this function returns the corresponding
N//! interrupt number.
N//!
N//! \return Returns an I2C interrupt number, or 0 if \e ui32Base is invalid.
N//
N//*****************************************************************************
Nstatic uint32_t
N_I2CIntNumberGet(uint32_t ui32Base)
N{
N    int_fast8_t i8Idx, i8Rows;
N    const uint32_t (*ppui32I2CIntMap)[2];
N
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    ppui32I2CIntMap = g_ppui32I2CIntMap;
N    i8Rows = g_i8I2CIntMapRows;
N
N    if(CLASS_IS_TM4C129)
X    if((((*((volatile uint32_t *)(0x400FE000))) & (0x70000000 | 0x00FF0000)) == (0x10000000 | 0x000A0000)))
N    {
N        ppui32I2CIntMap = g_ppui32I2CIntMapSnowflake;
N        i8Rows = g_i8I2CIntMapSnowflakeRows;
N    }
N
N    //
N    // Loop through the table that maps I2C base addresses to interrupt
N    // numbers.
N    //
N    for(i8Idx = 0; i8Idx < i8Rows; i8Idx++)
N    {
N        //
N        // See if this base address matches.
N        //
N        if(ppui32I2CIntMap[i8Idx][0] == ui32Base)
N        {
N            //
N            // Return the corresponding interrupt number.
N            //
N            return(ppui32I2CIntMap[i8Idx][1]);
N        }
N    }
N
N    //
N    // The base address could not be found, so return an error.
N    //
N    return(0);
N}
N
N//*****************************************************************************
N//
N//! Initializes the I2C Master block.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32I2CClk is the rate of the clock supplied to the I2C module.
N//! \param bFast set up for fast data transfers.
N//!
N//! This function initializes operation of the I2C Master block by configuring
N//! the bus speed for the master and enabling the I2C Master block.
N//!
N//! If the parameter \e bFast is \b true, then the master block is set up to
N//! transfer data at 400 Kbps; otherwise, it is set up to transfer data at
N//! 100 Kbps.  If Fast Mode Plus (1 Mbps) is desired, software should manually
N//! write the I2CMTPR after calling this function.  For High Speed (3.4 Mbps)
N//! mode, a specific command is used to switch to the faster clocks after the
N//! initial communication with the slave is done at either 100 Kbps or
N//! 400 Kbps.
N//!
N//! The peripheral clock is the same as the processor clock.  The frequency of
N//! the system clock is the value returned by SysCtlClockGet() for TM4C123x
N//! devices or the value returned by SysCtlClockFreqSet() for TM4C129x devices,
N//! or it can be explicitly hard coded if it is constant and known (to save the
N//! code/execution overhead of a call to SysCtlClockGet() or fetch of the 
N//! variable call holding the return value of SysCtlClockFreqSet()).
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterInitExpClk(uint32_t ui32Base, uint32_t ui32I2CClk,
N                    bool bFast)
X                    _Bool bFast)
N{
N    uint32_t ui32SCLFreq;
N    uint32_t ui32TPR;
N
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Must enable the device before doing anything else.
N    //
N    I2CMasterEnable(ui32Base);
N
N    //
N    // Get the desired SCL speed.
N    //
N    if(bFast == true)
X    if(bFast == 1)
N    {
N        ui32SCLFreq = 400000;
N    }
N    else
N    {
N        ui32SCLFreq = 100000;
N    }
N
N    //
N    // Compute the clock divider that achieves the fastest speed less than or
N    // equal to the desired speed.  The numerator is biased to favor a larger
N    // clock divider so that the resulting clock is always less than or equal
N    // to the desired clock, never greater.
N    //
N    ui32TPR = ((ui32I2CClk + (2 * 10 * ui32SCLFreq) - 1) /
N               (2 * 10 * ui32SCLFreq)) - 1;
N    HWREG(ui32Base + I2C_O_MTPR) = ui32TPR;
X    (*((volatile uint32_t *)(ui32Base + 0x0000000C))) = ui32TPR;
N
N    //
N    // Check to see if this I2C peripheral is High-Speed enabled.  If yes, also
N    // choose the fastest speed that is less than or equal to 3.4 Mbps.
N    //
N    if(HWREG(ui32Base + I2C_O_PP) & I2C_PP_HS)
X    if((*((volatile uint32_t *)(ui32Base + 0x00000FC0))) & 0x00000001)
N    {
N        ui32TPR = ((ui32I2CClk + (2 * 3 * 3400000) - 1) /
N                   (2 * 3 * 3400000)) - 1;
N        HWREG(ui32Base + I2C_O_MTPR) = I2C_MTPR_HS | ui32TPR;
X        (*((volatile uint32_t *)(ui32Base + 0x0000000C))) = 0x00000080 | ui32TPR;
N    }
N}
N
N//*****************************************************************************
N//
N//! Initializes the I2C Slave block.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui8SlaveAddr 7-bit slave address
N//!
N//! This function initializes operation of the I2C Slave block by configuring
N//! the slave address and enabling the I2C Slave block.
N//!
N//! The parameter \e ui8SlaveAddr is the value that is compared against the
N//! slave address sent by an I2C master.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveInit(uint32_t ui32Base, uint8_t ui8SlaveAddr)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N    ASSERT(!(ui8SlaveAddr & 0x80));
X    ;
N
N    //
N    // Must enable the device before doing anything else.
N    //
N    I2CSlaveEnable(ui32Base);
N
N    //
N    // Set up the slave address.
N    //
N    HWREG(ui32Base + I2C_O_SOAR) = ui8SlaveAddr;
X    (*((volatile uint32_t *)(ui32Base + 0x00000800))) = ui8SlaveAddr;
N}
N
N//*****************************************************************************
N//
N//! Sets the I2C slave address.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui8AddrNum determines which slave address is set.
N//! \param ui8SlaveAddr is the 7-bit slave address
N//!
N//! This function writes the specified slave address.  The \e ui32AddrNum field
N//! dictates which slave address is configured.  For example, a value of 0
N//! configures the primary address and a value of 1 configures the secondary.
N//!
N//! \note Not all Tiva devices support a secondary address.  Please
N//! consult the device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveAddressSet(uint32_t ui32Base, uint8_t ui8AddrNum, uint8_t ui8SlaveAddr)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N    ASSERT(!(ui8AddrNum > 1));
X    ;
N    ASSERT(!(ui8SlaveAddr & 0x80));
X    ;
N
N    //
N    // Determine which slave address is being set.
N    //
N    switch(ui8AddrNum)
N    {
N        //
N        // Set up the primary slave address.
N        //
N        case 0:
N        {
N            HWREG(ui32Base + I2C_O_SOAR) = ui8SlaveAddr;
X            (*((volatile uint32_t *)(ui32Base + 0x00000800))) = ui8SlaveAddr;
N            break;
N        }
N
N        //
N        // Set up and enable the secondary slave address.
N        //
N        case 1:
N        {
N            HWREG(ui32Base + I2C_O_SOAR2) = I2C_SOAR2_OAR2EN | ui8SlaveAddr;
X            (*((volatile uint32_t *)(ui32Base + 0x0000081C))) = 0x00000080 | ui8SlaveAddr;
N            break;
N        }
N    }
N}
N
N//*****************************************************************************
N//
N//! Enables the I2C Master block.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function enables operation of the I2C Master block.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterEnable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Enable the master block.
N    //
N    HWREG(ui32Base + I2C_O_MCR) |= I2C_MCR_MFE;
X    (*((volatile uint32_t *)(ui32Base + 0x00000020))) |= 0x00000010;
N}
N
N//*****************************************************************************
N//
N//! Enables the I2C Slave block.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This fucntion enables operation of the I2C Slave block.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveEnable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Enable the clock to the slave block.
N    //
N    HWREG(ui32Base + I2C_O_MCR) |= I2C_MCR_SFE;
X    (*((volatile uint32_t *)(ui32Base + 0x00000020))) |= 0x00000020;
N
N    //
N    // Enable the slave.
N    //
N    HWREG(ui32Base + I2C_O_SCSR) = I2C_SCSR_DA;
X    (*((volatile uint32_t *)(ui32Base + 0x00000804))) = 0x00000001;
N}
N
N//*****************************************************************************
N//
N//! Disables the I2C master block.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function disables operation of the I2C master block.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterDisable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Disable the master block.
N    //
N    HWREG(ui32Base + I2C_O_MCR) &= ~(I2C_MCR_MFE);
X    (*((volatile uint32_t *)(ui32Base + 0x00000020))) &= ~(0x00000010);
N}
N
N//*****************************************************************************
N//
N//! Disables the I2C slave block.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function disables operation of the I2C slave block.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveDisable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Disable the slave.
N    //
N    HWREG(ui32Base + I2C_O_SCSR) = 0;
X    (*((volatile uint32_t *)(ui32Base + 0x00000804))) = 0;
N
N    //
N    // Disable the clock to the slave block.
N    //
N    HWREG(ui32Base + I2C_O_MCR) &= ~(I2C_MCR_SFE);
X    (*((volatile uint32_t *)(ui32Base + 0x00000020))) &= ~(0x00000020);
N}
N
N//*****************************************************************************
N//
N//! Registers an interrupt handler for the I2C module.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param pfnHandler is a pointer to the function to be called when the
N//! I2C interrupt occurs.
N//!
N//! This function sets the handler to be called when an I2C interrupt occurs.
N//! This function enables the global interrupt in the interrupt controller;
N//! specific I2C interrupts must be enabled via I2CMasterIntEnable() and
N//! I2CSlaveIntEnable().  If necessary, it is the interrupt handler's
N//! responsibility to clear the interrupt source via I2CMasterIntClear() and
N//! I2CSlaveIntClear().
N//!
N//! \sa IntRegister() for important information about registering interrupt
N//! handlers.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CIntRegister(uint32_t ui32Base, void (*pfnHandler)(void))
N{
N    uint32_t ui32Int;
N
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Determine the interrupt number based on the I2C port.
N    //
N    ui32Int = _I2CIntNumberGet(ui32Base);
N
N    ASSERT(ui32Int != 0);
X    ;
N
N    //
N    // Register the interrupt handler, returning an error if an error occurs.
N    //
N    IntRegister(ui32Int, pfnHandler);
N
N    //
N    // Enable the I2C interrupt.
N    //
N    IntEnable(ui32Int);
N}
N
N//*****************************************************************************
N//
N//! Unregisters an interrupt handler for the I2C module.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function clears the handler to be called when an I2C interrupt
N//! occurs.  This function also masks off the interrupt in the interrupt r
N//! controller so that the interrupt handler no longer is called.
N//!
N//! \sa IntRegister() for important information about registering interrupt
N//! handlers.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CIntUnregister(uint32_t ui32Base)
N{
N    uint32_t ui32Int;
N
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Determine the interrupt number based on the I2C port.
N    //
N    ui32Int = _I2CIntNumberGet(ui32Base);
N
N    ASSERT(ui32Int != 0);
X    ;
N
N    //
N    // Disable the interrupt.
N    //
N    IntDisable(ui32Int);
N
N    //
N    // Unregister the interrupt handler.
N    //
N    IntUnregister(ui32Int);
N}
N
N//*****************************************************************************
N//
N//! Enables the I2C Master interrupt.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function enables the I2C Master interrupt source.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterIntEnable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Enable the master interrupt.
N    //
N    HWREG(ui32Base + I2C_O_MIMR) = 1;
X    (*((volatile uint32_t *)(ui32Base + 0x00000010))) = 1;
N}
N
N//*****************************************************************************
N//
N//! Enables individual I2C Master interrupt sources.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32IntFlags is the bit mask of the interrupt sources to be enabled.
N//!
N//! This function enables the indicated I2C Master interrupt sources.  Only the
N//! sources that are enabled can be reflected to the processor interrupt;
N//! disabled sources have no effect on the processor.
N//!
N//! The \e ui32IntFlags parameter is the logical OR of any of the following:
N//!
N//! - \b I2C_MASTER_INT_RX_FIFO_FULL - RX FIFO Full interrupt
N//! - \b I2C_MASTER_INT_TX_FIFO_EMPTY - TX FIFO Empty interrupt
N//! - \b I2C_MASTER_INT_RX_FIFO_REQ - RX FIFO Request interrupt
N//! - \b I2C_MASTER_INT_TX_FIFO_REQ - TX FIFO Request interrupt
N//! - \b I2C_MASTER_INT_ARB_LOST - Arbitration Lost interrupt
N//! - \b I2C_MASTER_INT_STOP - Stop Condition interrupt
N//! - \b I2C_MASTER_INT_START - Start Condition interrupt
N//! - \b I2C_MASTER_INT_NACK - Address/Data NACK interrupt
N//! - \b I2C_MASTER_INT_TX_DMA_DONE - TX DMA Complete interrupt
N//! - \b I2C_MASTER_INT_RX_DMA_DONE - RX DMA Complete interrupt
N//! - \b I2C_MASTER_INT_TIMEOUT - Clock Timeout interrupt
N//! - \b I2C_MASTER_INT_DATA - Data interrupt
N//!
N//! \note Not all Tiva devices support all of the listed interrupt
N//! sources.  Please consult the device data sheet to determine if these
N//! features are supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterIntEnableEx(uint32_t ui32Base, uint32_t ui32IntFlags)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Enable the master interrupt.
N    //
N    HWREG(ui32Base + I2C_O_MIMR) |= ui32IntFlags;
X    (*((volatile uint32_t *)(ui32Base + 0x00000010))) |= ui32IntFlags;
N}
N
N//*****************************************************************************
N//
N//! Enables the I2C Slave interrupt.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function enables the I2C Slave interrupt source.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveIntEnable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Enable the slave interrupt.
N    //
N    HWREG(ui32Base + I2C_O_SIMR) |= I2C_SLAVE_INT_DATA;
X    (*((volatile uint32_t *)(ui32Base + 0x0000080C))) |= 0x00000001;
N}
N
N//*****************************************************************************
N//
N//! Enables individual I2C Slave interrupt sources.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32IntFlags is the bit mask of the interrupt sources to be enabled.
N//!
N//! This function enables the indicated I2C Slave interrupt sources.  Only the
N//! sources that are enabled can be reflected to the processor interrupt;
N//! disabled sources have no effect on the processor.
N//!
N//! The \e ui32IntFlags parameter is the logical OR of any of the following:
N//!
N//! - \b I2C_SLAVE_INT_RX_FIFO_FULL - RX FIFO Full interrupt
N//! - \b I2C_SLAVE_INT_TX_FIFO_EMPTY - TX FIFO Empty interrupt
N//! - \b I2C_SLAVE_INT_RX_FIFO_REQ - RX FIFO Request interrupt
N//! - \b I2C_SLAVE_INT_TX_FIFO_REQ - TX FIFO Request interrupt
N//! - \b I2C_SLAVE_INT_TX_DMA_DONE - TX DMA Complete interrupt
N//! - \b I2C_SLAVE_INT_RX_DMA_DONE - RX DMA Complete interrupt
N//! - \b I2C_SLAVE_INT_STOP - Stop condition detected interrupt
N//! - \b I2C_SLAVE_INT_START - Start condition detected interrupt
N//! - \b I2C_SLAVE_INT_DATA - Data interrupt
N//!
N//! \note Not all Tiva devices support the all of the listed interrupts.
N//! Please consult the device data sheet to determine if these features are
N//! supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveIntEnableEx(uint32_t ui32Base, uint32_t ui32IntFlags)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Enable the slave interrupt.
N    //
N    HWREG(ui32Base + I2C_O_SIMR) |= ui32IntFlags;
X    (*((volatile uint32_t *)(ui32Base + 0x0000080C))) |= ui32IntFlags;
N}
N
N//*****************************************************************************
N//
N//! Disables the I2C Master interrupt.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function disables the I2C Master interrupt source.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterIntDisable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Disable the master interrupt.
N    //
N    HWREG(ui32Base + I2C_O_MIMR) = 0;
X    (*((volatile uint32_t *)(ui32Base + 0x00000010))) = 0;
N}
N
N//*****************************************************************************
N//
N//! Disables individual I2C Master interrupt sources.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32IntFlags is the bit mask of the interrupt sources to be
N//!        disabled.
N//!
N//! This function disables the indicated I2C Master interrupt sources.  Only
N//! the sources that are enabled can be reflected to the processor interrupt;
N//! disabled sources have no effect on the processor.
N//!
N//! The \e ui32IntFlags parameter has the same definition as the
N//! \e ui32IntFlags parameter to I2CMasterIntEnableEx().
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterIntDisableEx(uint32_t ui32Base, uint32_t ui32IntFlags)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Disable the master interrupt.
N    //
N    HWREG(ui32Base + I2C_O_MIMR) &= ~ui32IntFlags;
X    (*((volatile uint32_t *)(ui32Base + 0x00000010))) &= ~ui32IntFlags;
N}
N
N//*****************************************************************************
N//
N//! Disables the I2C Slave interrupt.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function disables the I2C Slave interrupt source.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveIntDisable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Disable the slave interrupt.
N    //
N    HWREG(ui32Base + I2C_O_SIMR) &= ~I2C_SLAVE_INT_DATA;
X    (*((volatile uint32_t *)(ui32Base + 0x0000080C))) &= ~0x00000001;
N}
N
N//*****************************************************************************
N//
N//! Disables individual I2C Slave interrupt sources.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32IntFlags is the bit mask of the interrupt sources to be
N//!        disabled.
N//!
N//! This function disables the indicated I2C Slave interrupt sources.  Only
N//! the sources that are enabled can be reflected to the processor interrupt;
N//! disabled sources have no effect on the processor.
N//!
N//! The \e ui32IntFlags parameter has the same definition as the
N//! \e ui32IntFlags parameter to I2CSlaveIntEnableEx().
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveIntDisableEx(uint32_t ui32Base, uint32_t ui32IntFlags)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Disable the slave interrupt.
N    //
N    HWREG(ui32Base + I2C_O_SIMR) &= ~ui32IntFlags;
X    (*((volatile uint32_t *)(ui32Base + 0x0000080C))) &= ~ui32IntFlags;
N}
N
N//*****************************************************************************
N//
N//! Gets the current I2C Master interrupt status.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param bMasked is false if the raw interrupt status is requested and
N//! true if the masked interrupt status is requested.
N//!
N//! This function returns the interrupt status for the I2C module.
N//! Either the raw interrupt status or the status of interrupts that are
N//! allowed to reflect to the processor can be returned.
N//!
N//! \return The current interrupt status, returned as \b true if active
N//! or \b false if not active.
N//
N//*****************************************************************************
Nbool
X_Bool
NI2CMasterIntStatus(uint32_t ui32Base, bool bMasked)
XI2CMasterIntStatus(uint32_t ui32Base, _Bool bMasked)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return either the interrupt status or the raw interrupt status as
N    // requested.
N    //
N    if(bMasked)
N    {
N        return((HWREG(ui32Base + I2C_O_MMIS)) ? true : false);
X        return(((*((volatile uint32_t *)(ui32Base + 0x00000018)))) ? 1 : 0);
N    }
N    else
N    {
N        return((HWREG(ui32Base + I2C_O_MRIS)) ? true : false);
X        return(((*((volatile uint32_t *)(ui32Base + 0x00000014)))) ? 1 : 0);
N    }
N}
N
N//*****************************************************************************
N//
N//! Gets the current I2C Master interrupt status.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param bMasked is false if the raw interrupt status is requested and
N//! true if the masked interrupt status is requested.
N//!
N//! This function returns the interrupt status for the I2C module.
N//! Either the raw interrupt status or the status of interrupts that are
N//! allowed to reflect to the processor can be returned.
N//!
N//! \return Returns the current interrupt status, enumerated as a bit field of
N//! values described in I2CMasterIntEnableEx().
N//
N//*****************************************************************************
Nuint32_t
NI2CMasterIntStatusEx(uint32_t ui32Base, bool bMasked)
XI2CMasterIntStatusEx(uint32_t ui32Base, _Bool bMasked)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return either the interrupt status or the raw interrupt status as
N    // requested.
N    //
N    if(bMasked)
N    {
N        return(HWREG(ui32Base + I2C_O_MMIS));
X        return((*((volatile uint32_t *)(ui32Base + 0x00000018))));
N    }
N    else
N    {
N        return(HWREG(ui32Base + I2C_O_MRIS));
X        return((*((volatile uint32_t *)(ui32Base + 0x00000014))));
N    }
N}
N
N//*****************************************************************************
N//
N//! Gets the current I2C Slave interrupt status.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param bMasked is false if the raw interrupt status is requested and
N//! true if the masked interrupt status is requested.
N//!
N//! This function returns the interrupt status for the I2C Slave.
N//! Either the raw interrupt status or the status of interrupts that are
N//! allowed to reflect to the processor can be returned.
N//!
N//! \return The current interrupt status, returned as \b true if active
N//! or \b false if not active.
N//
N//*****************************************************************************
Nbool
X_Bool
NI2CSlaveIntStatus(uint32_t ui32Base, bool bMasked)
XI2CSlaveIntStatus(uint32_t ui32Base, _Bool bMasked)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return either the interrupt status or the raw interrupt status as
N    // requested.
N    //
N    if(bMasked)
N    {
N        return((HWREG(ui32Base + I2C_O_SMIS)) ? true : false);
X        return(((*((volatile uint32_t *)(ui32Base + 0x00000814)))) ? 1 : 0);
N    }
N    else
N    {
N        return((HWREG(ui32Base + I2C_O_SRIS)) ? true : false);
X        return(((*((volatile uint32_t *)(ui32Base + 0x00000810)))) ? 1 : 0);
N    }
N}
N
N//*****************************************************************************
N//
N//! Gets the current I2C Slave interrupt status.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param bMasked is false if the raw interrupt status is requested and
N//! true if the masked interrupt status is requested.
N//!
N//! This function returns the interrupt status for the I2C Slave.
N//! Either the raw interrupt status or the status of interrupts that are
N//! allowed to reflect to the processor can be returned.
N//!
N//! \return Returns the current interrupt status, enumerated as a bit field of
N//! values described in I2CSlaveIntEnableEx().
N//
N//*****************************************************************************
Nuint32_t
NI2CSlaveIntStatusEx(uint32_t ui32Base, bool bMasked)
XI2CSlaveIntStatusEx(uint32_t ui32Base, _Bool bMasked)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return either the interrupt status or the raw interrupt status as
N    // requested.
N    //
N    if(bMasked)
N    {
N        return(HWREG(ui32Base + I2C_O_SMIS));
X        return((*((volatile uint32_t *)(ui32Base + 0x00000814))));
N    }
N    else
N    {
N        return(HWREG(ui32Base + I2C_O_SRIS));
X        return((*((volatile uint32_t *)(ui32Base + 0x00000810))));
N    }
N}
N
N//*****************************************************************************
N//
N//! Clears I2C Master interrupt sources.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! The I2C Master interrupt source is cleared, so that it no longer
N//! asserts.  This function must be called in the interrupt handler to keep the
N//! interrupt from being triggered again immediately upon exit.
N//!
N//! \note Because there is a write buffer in the Cortex-M processor, it may
N//! take several clock cycles before the interrupt source is actually cleared.
N//! Therefore, it is recommended that the interrupt source be cleared early in
N//! the interrupt handler (as opposed to the very last action) to avoid
N//! returning from the interrupt handler before the interrupt source is
N//! actually cleared.  Failure to do so may result in the interrupt handler
N//! being immediately reentered (because the interrupt controller still sees
N//! the interrupt source asserted).
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterIntClear(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Clear the I2C master interrupt source.
N    //
N    HWREG(ui32Base + I2C_O_MICR) = I2C_MICR_IC;
X    (*((volatile uint32_t *)(ui32Base + 0x0000001C))) = 0x00000001;
N
N    //
N    // Workaround for I2C master interrupt clear errata for rev B Tiva
N    // devices.  For later devices, this write is ignored and therefore
N    // harmless (other than the slight performance hit).
N    //
N    HWREG(ui32Base + I2C_O_MMIS) = I2C_MICR_IC;
X    (*((volatile uint32_t *)(ui32Base + 0x00000018))) = 0x00000001;
N}
N
N//*****************************************************************************
N//
N//! Clears I2C Master interrupt sources.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
N//!
N//! The specified I2C Master interrupt sources are cleared, so that they no
N//! longer assert.  This function must be called in the interrupt handler to
N//! keep the interrupt from being triggered again immediately upon exit.
N//!
N//! The \e ui32IntFlags parameter has the same definition as the
N//! \e ui32IntFlags parameter to I2CMasterIntEnableEx().
N//!
N//! \note Because there is a write buffer in the Cortex-M processor, it may
N//! take several clock cycles before the interrupt source is actually cleared.
N//! Therefore, it is recommended that the interrupt source be cleared early in
N//! the interrupt handler (as opposed to the very last action) to avoid
N//! returning from the interrupt handler before the interrupt source is
N//! actually cleared.  Failure to do so may result in the interrupt handler
N//! being immediately reentered (because the interrupt controller still sees
N//! the interrupt source asserted).
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterIntClearEx(uint32_t ui32Base, uint32_t ui32IntFlags)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Clear the I2C master interrupt source.
N    //
N    HWREG(ui32Base + I2C_O_MICR) = ui32IntFlags;
X    (*((volatile uint32_t *)(ui32Base + 0x0000001C))) = ui32IntFlags;
N}
N
N//*****************************************************************************
N//
N//! Clears I2C Slave interrupt sources.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! The I2C Slave interrupt source is cleared, so that it no longer asserts.
N//! This function must be called in the interrupt handler to keep the interrupt
N//! from being triggered again immediately upon exit.
N//!
N//! \note Because there is a write buffer in the Cortex-M processor, it may
N//! take several clock cycles before the interrupt source is actually cleared.
N//! Therefore, it is recommended that the interrupt source be cleared early in
N//! the interrupt handler (as opposed to the very last action) to avoid
N//! returning from the interrupt handler before the interrupt source is
N//! actually cleared.  Failure to do so may result in the interrupt handler
N//! being immediately reentered (because the interrupt controller still sees
N//! the interrupt source asserted).
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveIntClear(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Clear the I2C slave interrupt source.
N    //
N    HWREG(ui32Base + I2C_O_SICR) = I2C_SICR_DATAIC;
X    (*((volatile uint32_t *)(ui32Base + 0x00000818))) = 0x00000001;
N}
N
N//*****************************************************************************
N//
N//! Clears I2C Slave interrupt sources.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32IntFlags is a bit mask of the interrupt sources to be cleared.
N//!
N//! The specified I2C Slave interrupt sources are cleared, so that they no
N//! longer assert.  This function must be called in the interrupt handler to
N//! keep the interrupt from being triggered again immediately upon exit.
N//!
N//! The \e ui32IntFlags parameter has the same definition as the
N//! \e ui32IntFlags parameter to I2CSlaveIntEnableEx().
N//!
N//! \note Because there is a write buffer in the Cortex-M processor, it may
N//! take several clock cycles before the interrupt source is actually cleared.
N//! Therefore, it is recommended that the interrupt source be cleared early in
N//! the interrupt handler (as opposed to the very last action) to avoid
N//! returning from the interrupt handler before the interrupt source is
N//! actually cleared.  Failure to do so may result in the interrupt handler
N//! being immediately reentered (because the interrupt controller still sees
N//! the interrupt source asserted).
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveIntClearEx(uint32_t ui32Base, uint32_t ui32IntFlags)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Clear the I2C slave interrupt source.
N    //
N    HWREG(ui32Base + I2C_O_SICR) = ui32IntFlags;
X    (*((volatile uint32_t *)(ui32Base + 0x00000818))) = ui32IntFlags;
N}
N
N//*****************************************************************************
N//
N//! Sets the address that the I2C Master places on the bus.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui8SlaveAddr 7-bit slave address
N//! \param bReceive flag indicating the type of communication with the slave
N//!
N//! This function configures the address that the I2C Master places on the
N//! bus when initiating a transaction.  When the \e bReceive parameter is set
N//! to \b true, the address indicates that the I2C Master is initiating a
N//! read from the slave; otherwise the address indicates that the I2C
N//! Master is initiating a write to the slave.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterSlaveAddrSet(uint32_t ui32Base, uint8_t ui8SlaveAddr,
N                      bool bReceive)
X                      _Bool bReceive)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N    ASSERT(!(ui8SlaveAddr & 0x80));
X    ;
N
N    //
N    // Set the address of the slave with which the master will communicate.
N    //
N    HWREG(ui32Base + I2C_O_MSA) = (ui8SlaveAddr << 1) | bReceive;
X    (*((volatile uint32_t *)(ui32Base + 0x00000000))) = (ui8SlaveAddr << 1) | bReceive;
N}
N
N//*****************************************************************************
N//
N//! Reads the state of the SDA and SCL pins.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function returns the state of the I2C bus by providing the real time
N//! values of the SDA and SCL pins.
N//!
N//! \note Not all Tiva devices support this function.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return Returns the state of the bus with SDA in bit position 1 and SCL in
N//! bit position 0.
N//
N//*****************************************************************************
Nuint32_t
NI2CMasterLineStateGet(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return the line state.
N    //
N    return(HWREG(ui32Base + I2C_O_MBMON));
X    return((*((volatile uint32_t *)(ui32Base + 0x0000002C))));
N}
N
N//*****************************************************************************
N//
N//! Indicates whether or not the I2C Master is busy.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function returns an indication of whether or not the I2C Master is
N//! busy transmitting or receiving data.
N//!
N//! \return Returns \b true if the I2C Master is busy; otherwise, returns
N//! \b false.
N//
N//*****************************************************************************
Nbool
X_Bool
NI2CMasterBusy(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return the busy status.
N    //
N    if(HWREG(ui32Base + I2C_O_MCS) & I2C_MCS_BUSY)
X    if((*((volatile uint32_t *)(ui32Base + 0x00000004))) & 0x00000001)
N    {
N        return(true);
X        return(1);
N    }
N    else
N    {
N        return(false);
X        return(0);
N    }
N}
N
N//*****************************************************************************
N//
N//! Indicates whether or not the I2C bus is busy.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function returns an indication of whether or not the I2C bus is busy.
N//! This function can be used in a multi-master environment to determine if
N//! another master is currently using the bus.
N//!
N//! \return Returns \b true if the I2C bus is busy; otherwise, returns
N//! \b false.
N//
N//*****************************************************************************
Nbool
X_Bool
NI2CMasterBusBusy(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return the bus busy status.
N    //
N    if(HWREG(ui32Base + I2C_O_MCS) & I2C_MCS_BUSBSY)
X    if((*((volatile uint32_t *)(ui32Base + 0x00000004))) & 0x00000040)
N    {
N        return(true);
X        return(1);
N    }
N    else
N    {
N        return(false);
X        return(0);
N    }
N}
N
N//*****************************************************************************
N//
N//! Controls the state of the I2C Master.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32Cmd command to be issued to the I2C Master.
N//!
N//! This function is used to control the state of the Master send and
N//! receive operations.  The \e ui8Cmd parameter can be one of the following
N//! values:
N//!
N//! - \b I2C_MASTER_CMD_SINGLE_SEND
N//! - \b I2C_MASTER_CMD_SINGLE_RECEIVE
N//! - \b I2C_MASTER_CMD_BURST_SEND_START
N//! - \b I2C_MASTER_CMD_BURST_SEND_CONT
N//! - \b I2C_MASTER_CMD_BURST_SEND_FINISH
N//! - \b I2C_MASTER_CMD_BURST_SEND_ERROR_STOP
N//! - \b I2C_MASTER_CMD_BURST_RECEIVE_START
N//! - \b I2C_MASTER_CMD_BURST_RECEIVE_CONT
N//! - \b I2C_MASTER_CMD_BURST_RECEIVE_FINISH
N//! - \b I2C_MASTER_CMD_BURST_RECEIVE_ERROR_STOP
N//! - \b I2C_MASTER_CMD_QUICK_COMMAND
N//! - \b I2C_MASTER_CMD_HS_MASTER_CODE_SEND
N//! - \b I2C_MASTER_CMD_FIFO_SINGLE_SEND
N//! - \b I2C_MASTER_CMD_FIFO_SINGLE_RECEIVE
N//! - \b I2C_MASTER_CMD_FIFO_BURST_SEND_START
N//! - \b I2C_MASTER_CMD_FIFO_BURST_SEND_CONT
N//! - \b I2C_MASTER_CMD_FIFO_BURST_SEND_FINISH
N//! - \b I2C_MASTER_CMD_FIFO_BURST_SEND_ERROR_STOP
N//! - \b I2C_MASTER_CMD_FIFO_BURST_RECEIVE_START
N//! - \b I2C_MASTER_CMD_FIFO_BURST_RECEIVE_CONT
N//! - \b I2C_MASTER_CMD_FIFO_BURST_RECEIVE_FINISH
N//! - \b I2C_MASTER_CMD_FIFO_BURST_RECEIVE_ERROR_STOP
N//!
N//! \note Not all Tiva devices have an I2C FIFO and support the FIFO
N//! commands.  Please consult the device data sheet to determine if this
N//! feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterControl(uint32_t ui32Base, uint32_t ui32Cmd)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N    ASSERT((ui32Cmd == I2C_MASTER_CMD_SINGLE_SEND) ||
N           (ui32Cmd == I2C_MASTER_CMD_SINGLE_RECEIVE) ||
N           (ui32Cmd == I2C_MASTER_CMD_BURST_SEND_START) ||
N           (ui32Cmd == I2C_MASTER_CMD_BURST_SEND_CONT) ||
N           (ui32Cmd == I2C_MASTER_CMD_BURST_SEND_FINISH) ||
N           (ui32Cmd == I2C_MASTER_CMD_BURST_SEND_ERROR_STOP) ||
N           (ui32Cmd == I2C_MASTER_CMD_BURST_RECEIVE_START) ||
N           (ui32Cmd == I2C_MASTER_CMD_BURST_RECEIVE_CONT) ||
N           (ui32Cmd == I2C_MASTER_CMD_BURST_RECEIVE_FINISH) ||
N           (ui32Cmd == I2C_MASTER_CMD_BURST_RECEIVE_ERROR_STOP) ||
N           (ui32Cmd == I2C_MASTER_CMD_QUICK_COMMAND) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_SINGLE_SEND) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_SINGLE_RECEIVE) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_BURST_SEND_START) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_BURST_SEND_CONT) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_BURST_SEND_FINISH) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_BURST_SEND_ERROR_STOP) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_BURST_RECEIVE_START) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_BURST_RECEIVE_CONT) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_BURST_RECEIVE_FINISH) ||
N           (ui32Cmd == I2C_MASTER_CMD_FIFO_BURST_RECEIVE_ERROR_STOP) ||
N           (ui32Cmd == I2C_MASTER_CMD_HS_MASTER_CODE_SEND));
X    ;
N
N    //
N    // Send the command.
N    //
N    HWREG(ui32Base + I2C_O_MCS) = ui32Cmd;
X    (*((volatile uint32_t *)(ui32Base + 0x00000004))) = ui32Cmd;
N}
N
N//*****************************************************************************
N//
N//! Gets the error status of the I2C Master.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function is used to obtain the error status of the Master send
N//! and receive operations.
N//!
N//! \return Returns the error status, as one of \b I2C_MASTER_ERR_NONE,
N//! \b I2C_MASTER_ERR_ADDR_ACK, \b I2C_MASTER_ERR_DATA_ACK, or
N//! \b I2C_MASTER_ERR_ARB_LOST.
N//
N//*****************************************************************************
Nuint32_t
NI2CMasterErr(uint32_t ui32Base)
N{
N    uint32_t ui32Err;
N
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Get the raw error state
N    //
N    ui32Err = HWREG(ui32Base + I2C_O_MCS);
X    ui32Err = (*((volatile uint32_t *)(ui32Base + 0x00000004)));
N
N    //
N    // If the I2C master is busy, then all the other bit are invalid, and
N    // don't have an error to report.
N    //
N    if(ui32Err & I2C_MCS_BUSY)
X    if(ui32Err & 0x00000001)
N    {
N        return(I2C_MASTER_ERR_NONE);
X        return(0);
N    }
N
N    //
N    // Check for errors.
N    //
N    if(ui32Err & (I2C_MCS_ERROR | I2C_MCS_ARBLST))
X    if(ui32Err & (0x00000002 | 0x00000010))
N    {
N        return(ui32Err & (I2C_MCS_ARBLST | I2C_MCS_DATACK | I2C_MCS_ADRACK));
X        return(ui32Err & (0x00000010 | 0x00000008 | 0x00000004));
N    }
N    else
N    {
N        return(I2C_MASTER_ERR_NONE);
X        return(0);
N    }
N}
N
N//*****************************************************************************
N//
N//! Transmits a byte from the I2C Master.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui8Data data to be transmitted from the I2C Master.
N//!
N//! This function places the supplied data into I2C Master Data Register.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterDataPut(uint32_t ui32Base, uint8_t ui8Data)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Write the byte.
N    //
N    HWREG(ui32Base + I2C_O_MDR) = ui8Data;
X    (*((volatile uint32_t *)(ui32Base + 0x00000008))) = ui8Data;
N}
N
N//*****************************************************************************
N//
N//! Receives a byte that has been sent to the I2C Master.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function reads a byte of data from the I2C Master Data Register.
N//!
N//! \return Returns the byte received from by the I2C Master, cast as an
N//! uint32_t.
N//
N//*****************************************************************************
Nuint32_t
NI2CMasterDataGet(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Read a byte.
N    //
N    return(HWREG(ui32Base + I2C_O_MDR));
X    return((*((volatile uint32_t *)(ui32Base + 0x00000008))));
N}
N
N//*****************************************************************************
N//
N//! Sets the Master clock timeout value.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32Value is the number of I2C clocks before the timeout is
N//!        asserted.
N//!
N//! This function enables and configures the clock low timeout feature in the
N//! I2C peripheral.  This feature is implemented as a 12-bit counter, with the
N//! upper 8-bits being programmable.  For example, to program a timeout of 20ms
N//! with a 100-kHz SCL frequency, \e ui32Value is 0x7d.
N//!
N//! \note Not all Tiva devices support this function.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterTimeoutSet(uint32_t ui32Base, uint32_t ui32Value)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Write the timeout value.
N    //
N    HWREG(ui32Base + I2C_O_MCLKOCNT) = ui32Value;
X    (*((volatile uint32_t *)(ui32Base + 0x00000024))) = ui32Value;
N}
N
N//*****************************************************************************
N//
N//! Configures ACK override behavior of the I2C Slave.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param bEnable enables or disables ACK override.
N//!
N//! This function enables or disables ACK override, allowing the user
N//! application to drive the value on SDA during the ACK cycle.
N//!
N//! \note Not all Tiva devices support this function.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveACKOverride(uint32_t ui32Base, bool bEnable)
XI2CSlaveACKOverride(uint32_t ui32Base, _Bool bEnable)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Enable or disable based on bEnable.
N    //
N    if(bEnable)
N    {
N        HWREG(ui32Base + I2C_O_SACKCTL) |= I2C_SACKCTL_ACKOEN;
X        (*((volatile uint32_t *)(ui32Base + 0x00000820))) |= 0x00000001;
N    }
N    else
N    {
N        HWREG(ui32Base + I2C_O_SACKCTL) &= ~I2C_SACKCTL_ACKOEN;
X        (*((volatile uint32_t *)(ui32Base + 0x00000820))) &= ~0x00000001;
N    }
N}
N
N//*****************************************************************************
N//
N//! Writes the ACK value.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param bACK chooses whether to ACK (true) or NACK (false) the transfer.
N//!
N//! This function puts the desired ACK value on SDA during the ACK cycle.  The
N//! value written is only valid when ACK override is enabled using
N//! I2CSlaveACKOverride().
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveACKValueSet(uint32_t ui32Base, bool bACK)
XI2CSlaveACKValueSet(uint32_t ui32Base, _Bool bACK)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // ACK or NACK based on the value of bACK.
N    //
N    if(bACK)
N    {
N        HWREG(ui32Base + I2C_O_SACKCTL) &= ~I2C_SACKCTL_ACKOVAL;
X        (*((volatile uint32_t *)(ui32Base + 0x00000820))) &= ~0x00000002;
N    }
N    else
N    {
N        HWREG(ui32Base + I2C_O_SACKCTL) |= I2C_SACKCTL_ACKOVAL;
X        (*((volatile uint32_t *)(ui32Base + 0x00000820))) |= 0x00000002;
N    }
N}
N
N//*****************************************************************************
N//
N//! Gets the I2C Slave status
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function returns the action requested from a master, if any.
N//! Possible values are:
N//!
N//! - \b I2C_SLAVE_ACT_NONE
N//! - \b I2C_SLAVE_ACT_RREQ
N//! - \b I2C_SLAVE_ACT_TREQ
N//! - \b I2C_SLAVE_ACT_RREQ_FBR
N//! - \b I2C_SLAVE_ACT_OWN2SEL
N//! - \b I2C_SLAVE_ACT_QCMD
N//! - \b I2C_SLAVE_ACT_QCMD_DATA
N//!
N//! \note Not all Tiva devices support the second I2C slave's own address
N//! or the quick command function.  Please consult the device data sheet to
N//! determine if these features are supported.
N//!
N//! \return Returns \b I2C_SLAVE_ACT_NONE to indicate that no action has been
N//! requested of the I2C Slave, \b I2C_SLAVE_ACT_RREQ to indicate that
N//! an I2C master has sent data to the I2C Slave, \b I2C_SLAVE_ACT_TREQ
N//! to indicate that an I2C master has requested that the I2C Slave send
N//! data, \b I2C_SLAVE_ACT_RREQ_FBR to indicate that an I2C master has sent
N//! data to the I2C slave and the first byte following the slave's own address
N//! has been received, \b I2C_SLAVE_ACT_OWN2SEL to indicate that the second I2C
N//! slave address was matched, \b I2C_SLAVE_ACT_QCMD to indicate that a quick
N//! command was received, and \b I2C_SLAVE_ACT_QCMD_DATA to indicate that the
N//! data bit was set when the quick command was received.
N//
N//*****************************************************************************
Nuint32_t
NI2CSlaveStatus(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return the slave status.
N    //
N    return(HWREG(ui32Base + I2C_O_SCSR));
X    return((*((volatile uint32_t *)(ui32Base + 0x00000804))));
N}
N
N//*****************************************************************************
N//
N//! Transmits a byte from the I2C Slave.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui8Data is the data to be transmitted from the I2C Slave
N//!
N//! This function places the supplied data into I2C Slave Data Register.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveDataPut(uint32_t ui32Base, uint8_t ui8Data)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Write the byte.
N    //
N    HWREG(ui32Base + I2C_O_SDR) = ui8Data;
X    (*((volatile uint32_t *)(ui32Base + 0x00000808))) = ui8Data;
N}
N
N//*****************************************************************************
N//
N//! Receives a byte that has been sent to the I2C Slave.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function reads a byte of data from the I2C Slave Data Register.
N//!
N//! \return Returns the byte received from by the I2C Slave, cast as an
N//! uint32_t.
N//
N//*****************************************************************************
Nuint32_t
NI2CSlaveDataGet(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Read a byte.
N    //
N    return(HWREG(ui32Base + I2C_O_SDR));
X    return((*((volatile uint32_t *)(ui32Base + 0x00000808))));
N}
N
N//*****************************************************************************
N//
N//! Configures the I2C transmit (TX) FIFO.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32Config is the configuration of the FIFO using specified macros.
N//!
N//! This configures the I2C peripheral's transmit FIFO.  The transmit FIFO can
N//! be used by the master or slave, but not both.  The following macros are
N//! used to configure the TX FIFO behavior for master or slave, with or without
N//! DMA:
N//!
N//! \b I2C_FIFO_CFG_TX_MASTER, \b I2C_FIFO_CFG_TX_SLAVE,
N//! \b I2C_FIFO_CFG_TX_MASTER_DMA, \b I2C_FIFO_CFG_TX_SLAVE_DMA
N//!
N//! To select the trigger level, one of the following macros should be used:
N//!
N//! \b I2C_FIFO_CFG_TX_TRIG_1, \b I2C_FIFO_CFG_TX_TRIG_2,
N//! \b I2C_FIFO_CFG_TX_TRIG_3, \b I2C_FIFO_CFG_TX_TRIG_4,
N//! \b I2C_FIFO_CFG_TX_TRIG_5, \b I2C_FIFO_CFG_TX_TRIG_6,
N//! \b I2C_FIFO_CFG_TX_TRIG_7, \b I2C_FIFO_CFG_TX_TRIG_8
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CTxFIFOConfigSet(uint32_t ui32Base, uint32_t ui32Config)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Clear transmit configuration data.
N    //
N    HWREG(ui32Base + I2C_O_FIFOCTL) &= 0xffff0000;
X    (*((volatile uint32_t *)(ui32Base + 0x00000F04))) &= 0xffff0000;
N
N    //
N    // Store new transmit configuration data.
N    //
N    HWREG(ui32Base + I2C_O_FIFOCTL) |= ui32Config;
X    (*((volatile uint32_t *)(ui32Base + 0x00000F04))) |= ui32Config;
N}
N
N//*****************************************************************************
N//
N//! Flushes the transmit (TX) FIFO.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function flushes the I2C transmit FIFO.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CTxFIFOFlush(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Flush the TX FIFO.
N    //
N    HWREG(ui32Base + I2C_O_FIFOCTL) |= I2C_FIFOCTL_TXFLUSH;
X    (*((volatile uint32_t *)(ui32Base + 0x00000F04))) |= 0x00004000;
N}
N
N//*****************************************************************************
N//
N//! Configures the I2C receive (RX) FIFO.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32Config is the configuration of the FIFO using specified macros.
N//!
N//! This configures the I2C peripheral's receive FIFO.  The receive FIFO can be
N//! used by the master or slave, but not both.  The following macros are used
N//! to configure the RX FIFO behavior for master or slave, with or without DMA:
N//!
N//! \b I2C_FIFO_CFG_RX_MASTER, \b I2C_FIFO_CFG_RX_SLAVE,
N//! \b I2C_FIFO_CFG_RX_MASTER_DMA, \b I2C_FIFO_CFG_RX_SLAVE_DMA
N//!
N//! To select the trigger level, one of the following macros should be used:
N//!
N//! \b I2C_FIFO_CFG_RX_TRIG_1, \b I2C_FIFO_CFG_RX_TRIG_2,
N//! \b I2C_FIFO_CFG_RX_TRIG_3, \b I2C_FIFO_CFG_RX_TRIG_4,
N//! \b I2C_FIFO_CFG_RX_TRIG_5, \b I2C_FIFO_CFG_RX_TRIG_6,
N//! \b I2C_FIFO_CFG_RX_TRIG_7, \b I2C_FIFO_CFG_RX_TRIG_8
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CRxFIFOConfigSet(uint32_t ui32Base, uint32_t ui32Config)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Clear receive configuration data.
N    //
N    HWREG(ui32Base + I2C_O_FIFOCTL) &= 0x0000ffff;
X    (*((volatile uint32_t *)(ui32Base + 0x00000F04))) &= 0x0000ffff;
N
N    //
N    // Store new receive configuration data.
N    //
N    HWREG(ui32Base + I2C_O_FIFOCTL) |= ui32Config;
X    (*((volatile uint32_t *)(ui32Base + 0x00000F04))) |= ui32Config;
N}
N
N//*****************************************************************************
N//
N//! Flushes the receive (RX) FIFO.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function flushes the I2C receive FIFO.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CRxFIFOFlush(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Flush the TX FIFO.
N    //
N    HWREG(ui32Base + I2C_O_FIFOCTL) |= I2C_FIFOCTL_RXFLUSH;
X    (*((volatile uint32_t *)(ui32Base + 0x00000F04))) |= 0x40000000;
N}
N
N//*****************************************************************************
N//
N//! Gets the current FIFO status.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function retrieves the status for both the transmit (TX) and receive
N//! (RX) FIFOs.  The trigger level for the transmit FIFO is set using
N//! I2CTxFIFOConfigSet() and for the receive FIFO using I2CTxFIFOConfigSet().
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return Returns the FIFO status, enumerated as a bit field containing
N//! \b I2C_FIFO_RX_BELOW_TRIG_LEVEL, \b I2C_FIFO_RX_FULL, \b I2C_FIFO_RX_EMPTY,
N//! \b I2C_FIFO_TX_BELOW_TRIG_LEVEL, \b I2C_FIFO_TX_FULL, and
N//! \b I2C_FIFO_TX_EMPTY.
N//
N//*****************************************************************************
Nuint32_t
NI2CFIFOStatus(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Return the contents of the FIFO status register.
N    //
N    return(HWREG(ui32Base + I2C_O_FIFOSTATUS));
X    return((*((volatile uint32_t *)(ui32Base + 0x00000F08))));
N}
N
N//*****************************************************************************
N//
N//! Writes a data byte to the I2C transmit FIFO.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui8Data is the data to be placed into the transmit FIFO.
N//!
N//! This function adds a byte of data to the I2C transmit FIFO.  If there is
N//! no space available in the FIFO,  this function waits for space to become
N//! available before returning.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CFIFODataPut(uint32_t ui32Base, uint8_t ui8Data)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Wait until there is space.
N    //
N    while(HWREG(ui32Base + I2C_O_FIFOSTATUS) & I2C_FIFOSTATUS_TXFF)
X    while((*((volatile uint32_t *)(ui32Base + 0x00000F08))) & 0x00000002)
N    {
N    }
N
N    //
N    // Place data into the FIFO.
N    //
N    HWREG(ui32Base + I2C_O_FIFODATA) = ui8Data;
X    (*((volatile uint32_t *)(ui32Base + 0x00000F00))) = ui8Data;
N}
N
N//*****************************************************************************
N//
N//! Writes a data byte to the I2C transmit FIFO.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui8Data is the data to be placed into the transmit FIFO.
N//!
N//! This function adds a byte of data to the I2C transmit FIFO.  If there is
N//! no space available in the FIFO, this function returns a zero.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return The number of elements added to the I2C transmit FIFO.
N//
N//*****************************************************************************
Nuint32_t
NI2CFIFODataPutNonBlocking(uint32_t ui32Base, uint8_t ui8Data)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // If FIFO is full, return zero.
N    //
N    if(HWREG(ui32Base + I2C_O_FIFOSTATUS) & I2C_FIFOSTATUS_TXFF)
X    if((*((volatile uint32_t *)(ui32Base + 0x00000F08))) & 0x00000002)
N    {
N        return(0);
N    }
N    else
N    {
N        HWREG(ui32Base + I2C_O_FIFODATA) = ui8Data;
X        (*((volatile uint32_t *)(ui32Base + 0x00000F00))) = ui8Data;
N        return(1);
N    }
N}
N
N//*****************************************************************************
N//
N//! Reads a byte from the I2C receive FIFO.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function reads a byte of data from I2C receive FIFO and places it in
N//! the location specified by the \e pui8Data parameter.  If there is no data
N//! available, this function waits until data is received before returning.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return The data byte.
N//
N//*****************************************************************************
Nuint32_t
NI2CFIFODataGet(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Wait until there is data to read.
N    //
N    while(HWREG(ui32Base + I2C_O_FIFOSTATUS) & I2C_FIFOSTATUS_RXFE)
X    while((*((volatile uint32_t *)(ui32Base + 0x00000F08))) & 0x00010000)
N    {
N    }
N
N    //
N    // Read a byte.
N    //
N    return(HWREG(ui32Base + I2C_O_FIFODATA));
X    return((*((volatile uint32_t *)(ui32Base + 0x00000F00))));
N}
N
N//*****************************************************************************
N//
N//! Reads a byte from the I2C receive FIFO.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param pui8Data is a pointer where the read data is stored.
N//!
N//! This function reads a byte of data from I2C receive FIFO and places it in
N//! the location specified by the \e pui8Data parameter.  If there is no data
N//! available, this functions returns 0.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return The number of elements read from the I2C receive FIFO.
N//
N//*****************************************************************************
Nuint32_t
NI2CFIFODataGetNonBlocking(uint32_t ui32Base, uint8_t *pui8Data)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // If nothing in the FIFO, return zero.
N    //
N    if(HWREG(ui32Base + I2C_O_FIFOSTATUS) & I2C_FIFOSTATUS_RXFE)
X    if((*((volatile uint32_t *)(ui32Base + 0x00000F08))) & 0x00010000)
N    {
N        return(0);
N    }
N    else
N    {
N        *pui8Data = HWREG(ui32Base + I2C_O_FIFODATA);
X        *pui8Data = (*((volatile uint32_t *)(ui32Base + 0x00000F00)));
N        return(1);
N    }
N}
N
N//*****************************************************************************
N//
N//! Set the burst length for a I2C master FIFO operation.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui8Length is the length of the burst transfer.
N//!
N//! This function configures the burst length for a I2C Master FIFO operation.
N//! The burst field is limited to 8 bits or 256 bytes.  The burst length
N//! applies to a single I2CMCS BURST operation meaning that it specifies the
N//! burst length for only the current operation (can be TX or RX).  Each burst
N//! operation must configure the burst length prior to writing the BURST bit
N//! in the I2CMCS using I2CMasterControl().
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterBurstLengthSet(uint32_t ui32Base, uint8_t ui8Length)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base) && (ui8Length < 256));
X    ;
N
N    //
N    // Set the burst length.
N    //
N    HWREG(ui32Base + I2C_O_MBLEN) = ui8Length;
X    (*((volatile uint32_t *)(ui32Base + 0x00000030))) = ui8Length;
N}
N
N//*****************************************************************************
N//
N//! Returns the current value of the burst transfer counter.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function returns the current value of the burst transfer counter that
N//! is used by the FIFO mechanism.  Software can use this value to determine
N//! how many bytes remain in a transfer, or where in the transfer the burst
N//! operation was if an error has occurred.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nuint32_t
NI2CMasterBurstCountGet(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Get burst count.
N    //
N    return(HWREG(ui32Base + I2C_O_MBCNT));
X    return((*((volatile uint32_t *)(ui32Base + 0x00000034))));
N}
N
N//*****************************************************************************
N//
N//! Configures the I2C Master glitch filter.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32Config is the glitch filter configuration.
N//!
N//! This function configures the I2C Master glitch filter.  The value passed in
N//! to \e ui32Config determines the sampling range of the glitch filter, which
N//! is configurable between 1 and 32 system clock cycles.  The default
N//! configuration of the glitch filter is 0 system clock cycles, which means
N//! that it's disabled.
N//!
N//! The \e ui32Config field should be any of the following values:
N//!
N//! - \b I2C_MASTER_GLITCH_FILTER_DISABLED
N//! - \b I2C_MASTER_GLITCH_FILTER_1
N//! - \b I2C_MASTER_GLITCH_FILTER_2
N//! - \b I2C_MASTER_GLITCH_FILTER_3
N//! - \b I2C_MASTER_GLITCH_FILTER_4
N//! - \b I2C_MASTER_GLITCH_FILTER_8
N//! - \b I2C_MASTER_GLITCH_FILTER_16
N//! - \b I2C_MASTER_GLITCH_FILTER_32
N//!
N//! \note Not all Tiva devices support this function.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CMasterGlitchFilterConfigSet(uint32_t ui32Base, uint32_t ui32Config)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Configure the glitch filter field of MTPR if it is TM4C129
N    //
N    if(CLASS_IS_TM4C129)
X    if((((*((volatile uint32_t *)(0x400FE000))) & (0x70000000 | 0x00FF0000)) == (0x10000000 | 0x000A0000)))
N    {
N        HWREG(ui32Base + I2C_O_MTPR) |= ui32Config;
X        (*((volatile uint32_t *)(ui32Base + 0x0000000C))) |= ui32Config;
N    }
N
N    //
N    // Configure the glitch filter if it is TM4C123
N    //
N    if(CLASS_IS_TM4C123)
X    if((((*((volatile uint32_t *)(0x400FE000))) & (0x70000000 | 0x00FF0000)) == (0x10000000 | 0x00050000)))
N    {
N        //
N        // Configure the glitch filter pulse width
N        //
N        HWREG(ui32Base + I2C_O_MCR2) |= (ui32Config >> 12);
X        (*((volatile uint32_t *)(ui32Base + 0x00000038))) |= (ui32Config >> 12);
N
N        //
N        // Enable the glitch filter by setting the GFE bit
N        //
N        HWREG(ui32Base + I2C_O_MCR) |= I2C_MCR_GFE;
X        (*((volatile uint32_t *)(ui32Base + 0x00000020))) |= 0x00000040;
N    }
N}
N
N//*****************************************************************************
N//
N//! Enables FIFO usage for the I2C Slave.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//! \param ui32Config is the desired FIFO configuration of the I2C Slave.
N//!
N//! This function configures the I2C Slave to use the FIFO(s).  This
N//! function should be used in combination with I2CTxFIFOConfigSet() and/or
N//! I2CRxFIFOConfigSet(), which configure the FIFO trigger level and tell
N//! the FIFO hardware whether to interact with the I2C Master or Slave.  The
N//! application appropriate combination of \b I2C_SLAVE_TX_FIFO_ENABLE and
N//! \b I2C_SLAVE_RX_FIFO_ENABLE should be passed in to the \e ui32Config
N//! field.
N//!
N//! The Slave I2CSCSR register is write-only, so any call to I2CSlaveEnable(),
N//! I2CSlaveDisable or I2CSlaveFIFOEnable() overwrites the slave configuration.
N//! Therefore, application software should call I2CSlaveEnable() followed by
N//! I2CSlaveFIFOEnable() with the desired FIFO configuration.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveFIFOEnable(uint32_t ui32Base, uint32_t ui32Config)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Enable the FIFOs for the slave.
N    //
N    HWREG(ui32Base + I2C_O_SCSR) = ui32Config | I2C_SCSR_DA;
X    (*((volatile uint32_t *)(ui32Base + 0x00000804))) = ui32Config | 0x00000001;
N}
N
N//*****************************************************************************
N//
N//! Disable FIFO usage for the I2C Slave.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function disables the FIFOs for the I2C Slave.  After calling this
N//! this function, the FIFOs are disabled, but the Slave remains active.
N//!
N//! \note Not all Tiva devices have an I2C FIFO.  Please consult the
N//! device data sheet to determine if this feature is supported.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid
NI2CSlaveFIFODisable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Disable slave FIFOs.
N    //
N    HWREG(ui32Base + I2C_O_SCSR) = I2C_SCSR_DA;
X    (*((volatile uint32_t *)(ui32Base + 0x00000804))) = 0x00000001;
N}
N
N//*****************************************************************************
N//
N//! Enables internal loopback mode for an I2C port.
N//!
N//! \param ui32Base is the base address of the I2C module.
N//!
N//! This function configures an I2C port in internal loopback mode to help with
N//! diagnostics and debug.  In this mode, the SDA and SCL signals from master
N//! and slave modules are internally connected.  This allows data to be
N//! transferred between the master and slave modules of the same I2C port,
N//! without having to go through I/O's.  I2CMasterDataPut(), I2CSlaveDataPut(),
N//! I2CMasterDataGet(),I2CSlaveDataGet() can be used along with this function.
N//!
N//! \return None.
N//
N//*****************************************************************************
Nvoid I2CLoopbackEnable(uint32_t ui32Base)
N{
N    //
N    // Check the arguments.
N    //
N    ASSERT(_I2CBaseValid(ui32Base));
X    ;
N
N    //
N    // Write the loopback enable bit to the register.
N    //
N    HWREG(ui32Base + I2C_O_MCR) |= I2C_MCR_LPBK;
X    (*((volatile uint32_t *)(ui32Base + 0x00000020))) |= 0x00000001;
N}
N
N//*****************************************************************************
N//
N// Close the Doxygen group.
N//! @}
N//
N//*****************************************************************************
