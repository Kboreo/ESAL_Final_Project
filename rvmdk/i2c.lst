L 1 "i2c.c"
N//#include "i2c.h"
N
N//#include <stdarg.h>
N//#include <stdbool.h>
N//#include <stdint.h>
N//#include "inc/hw_i2c.h"
N//#include "inc/hw_memmap.h"
N//#include "inc/hw_types.h"
N//#include "inc/hw_gpio.h"
N//#include "driverlib/i2c.h"
N//#include "driverlib/sysctl.h"
N//#include "driverlib/gpio.h"
N//#include "driverlib/pin_map.h"
N
N////initialize I2C module 0
N////Slightly modified version of TI's example code
N//void InitI2C0(void)
N//{
N//    //enable I2C module 0
N//    SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C0);
N// 
N//    //reset module
N//    SysCtlPeripheralReset(SYSCTL_PERIPH_I2C0);
N//     
N//    //enable GPIO peripheral that contains I2C 0
N//    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
N// 
N//    // Configure the pin muxing for I2C0 functions on port B2 and B3.
N//    GPIOPinConfigure(GPIO_PB2_I2C0SCL);
N//    GPIOPinConfigure(GPIO_PB3_I2C0SDA);
N//     
N//    // Select the I2C function for these pins.
N//    GPIOPinTypeI2CSCL(GPIO_PORTB_BASE, GPIO_PIN_2);
N//    GPIOPinTypeI2C(GPIO_PORTB_BASE, GPIO_PIN_3);
N// 
N//    // Enable and initialize the I2C0 master module.  Use the system clock for
N//    // the I2C0 module.  The last parameter sets the I2C data transfer rate.
N//    // If false the data rate is set to 100kbps and if true the data rate will
N//    // be set to 400kbps.
N//    I2CMasterInitExpClk(I2C0_BASE, SysCtlClockGet(), false);
N//     
N//    //clear I2C FIFOs
N//    HWREG(I2C0_BASE + I2C_O_FIFOCTL) = 80008000;
N//		
N//}
N
N
N////sends an I2C command to the specified slave
N//void I2CSend(uint8_t slave_addr, uint8_t num_of_args, ...)
N//{
N//    // Tell the master module what address it will place on the bus when
N//    // communicating with the slave.
N//    I2CMasterSlaveAddrSet(I2C0_BASE, slave_addr, false);
N//     
N//    //stores list of variable number of arguments
N//    va_list vargs;
N//     
N//    //specifies the va_list to "open" and the last fixed argument
N//    //so vargs knows where to start looking
N//    va_start(vargs, num_of_args);
N//     
N//    //put data to be sent into FIFO
N//    I2CMasterDataPut(I2C0_BASE, va_arg(vargs, uint32_t));
N//     
N//    //if there is only one argument, we only need to use the
N//    //single send I2C function
N//    if(num_of_args == 1)
N//    {
N//        //Initiate send of data from the MCU
N//        I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_SEND);
N//         
N//        // Wait until MCU is done transferring.
N//        while(I2CMasterBusy(I2C0_BASE));
N//         
N//        //"close" variable argument list
N//        va_end(vargs);
N//    }
N//     
N//    //otherwise, we start transmission of multiple bytes on the
N//    //I2C bus
N//    else
N//    {
N//        //Initiate send of data from the MCU
N//        I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_START);
N//         
N//        // Wait until MCU is done transferring.
N//        while(I2CMasterBusy(I2C0_BASE));
N//         
N//        //send num_of_args-2 pieces of data, using the
N//        //BURST_SEND_CONT command of the I2C module
N//        for(uint8_t i = 1; i < (num_of_args - 1); i++)
N//        {
N//            //put next piece of data into I2C FIFO
N//            I2CMasterDataPut(I2C0_BASE, va_arg(vargs, uint32_t));
N//            //send next data that was just placed into FIFO
N//            I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_CONT);
N//     
N//            // Wait until MCU is done transferring.
N//            while(I2CMasterBusy(I2C0_BASE));
N//        }
N//     
N//        //put last piece of data into I2C FIFO
N//        I2CMasterDataPut(I2C0_BASE, va_arg(vargs, uint32_t));
N//        //send next data that was just placed into FIFO
N//        I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_FINISH);
N//        // Wait until MCU is done transferring.
N//        while(I2CMasterBusy(I2C0_BASE));
N//         
N//        //"close" variable args list
N//        va_end(vargs);
N//    }
N//}
N
N
N
N////read specified register on slave device
N//uint32_t I2CReceive(uint32_t slave_addr, uint8_t reg)
N//{
N//    //specify that we are writing (a register address) to the
N//    //slave device
N//    I2CMasterSlaveAddrSet(I2C0_BASE, slave_addr, false);
N// 
N//    //specify register to be read
N//    I2CMasterDataPut(I2C0_BASE, reg);
N// 
N//    //send control byte and register address byte to slave device
N//    I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_BURST_SEND_START);
N//     
N//    //wait for MCU to finish transaction
N//    while(I2CMasterBusy(I2C0_BASE));
N//     
N//    //specify that we are going to read from slave device
N//    I2CMasterSlaveAddrSet(I2C0_BASE, slave_addr, true);
N//     
N//    //send control byte and read from the register we
N//    //specified
N//    I2CMasterControl(I2C0_BASE, I2C_MASTER_CMD_SINGLE_RECEIVE);
N//     
N//    //wait for MCU to finish transaction
N//    while(I2CMasterBusy(I2C0_BASE));
N//     
N//    //return data pulled from the specified register
N//    return I2CMasterDataGet(I2C0_BASE);
W "i2c.c" 144 4 last line of file ends without a newline
N//}
