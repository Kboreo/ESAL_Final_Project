; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\rvmdk\speed_control.o --asm_dir=.\rvmdk\ --list_dir=.\rvmdk\ --depend=.\rvmdk\speed_control.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\.. -I.\driverlib -I.\src -I.\inc -I.\RTE\_project -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 -D__MICROLIB -D__UVISION_VERSION=524 -D_RTE_ -DTM4C123GH6PM -Drvmdk -DPART_TM4C123GH6PM -DTARGET_IS_TM4C123_RB1 --omf_browse=.\rvmdk\speed_control.crf Speed_Control.c]
                          THUMB

                          AREA ||i.Speed_Control||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_f
                          REQUIRE _printf_fp_dec
                  Speed_Control PROC
;;;28     //Inputs: Speed and user requested speed	
;;;29     void Speed_Control(double Speed, double uSpeed)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;30     	
;;;31     {	
000004  ed2d8b0e          VPUSH    {d8-d14}
000008  eeb08a40          VMOV.F32 s16,s0
00000c  eef08a60          VMOV.F32 s17,s1
000010  eeb09a41          VMOV.F32 s18,s2
000014  eef09a61          VMOV.F32 s19,s3
;;;32     	int i = 1;
000018  2701              MOVS     r7,#1
;;;33     	int x; 
;;;34     	int a = 0;
00001a  2500              MOVS     r5,#0
;;;35     	
;;;36     	while (i == 1)
00001c  e12a              B        |L1.628|
                  |L1.30|
;;;37     	{				
;;;38     		//adjusts speed 10 times before printing speed
;;;39     		for (int i = 0; i<10;i++)
00001e  2600              MOVS     r6,#0
000020  e113              B        |L1.586|
                  |L1.34|
;;;40     			{
;;;41     			Speed= ReadEncoder();
000022  f7fffffe          BL       ReadEncoder
000026  eeb08a40          VMOV.F32 s16,s0
00002a  eef08a60          VMOV.F32 s17,s1
;;;42     			speed2 = Speed;		
00002e  4896              LDR      r0,|L1.648|
000030  ed808b00          VSTR     d8,[r0,#0]
;;;43     		
;;;44     			//waits here for speed to change 
;;;45     			a=0;	
000034  2500              MOVS     r5,#0
;;;46     			while(Speed == speed2){
000036  e00a              B        |L1.78|
                  |L1.56|
;;;47     				Speed = ReadEncoder();
000038  f7fffffe          BL       ReadEncoder
00003c  eeb08a40          VMOV.F32 s16,s0
000040  eef08a60          VMOV.F32 s17,s1
;;;48     				a++;
000044  1c6d              ADDS     r5,r5,#1
;;;49     				if (a >999){
000046  f5b57f7a          CMP      r5,#0x3e8
00004a  db00              BLT      |L1.78|
;;;50     				break;
00004c  e009              B        |L1.98|
                  |L1.78|
00004e  488e              LDR      r0,|L1.648|
000050  ed900b00          VLDR     d0,[r0,#0]            ;46
000054  ec532b10          VMOV     r2,r3,d0              ;46
000058  ec510b18          VMOV     r0,r1,d8              ;46
00005c  f7fffffe          BL       __aeabi_cdcmpeq
000060  d0ea              BEQ      |L1.56|
                  |L1.98|
000062  bf00              NOP      
;;;51     				}
;;;52     				}
;;;53     				
;;;54     				//saves errors from the last 4 error calcs
;;;55     				Error[4]=Error[3];
000064  4889              LDR      r0,|L1.652|
000066  ed900b06          VLDR     d0,[r0,#0x18]
00006a  ed800b08          VSTR     d0,[r0,#0x20]
;;;56     				Error[3]=Error[2];
00006e  ed900b04          VLDR     d0,[r0,#0x10]
000072  ed800b06          VSTR     d0,[r0,#0x18]
;;;57     				Error[2]=Error[1];
000076  ed900b02          VLDR     d0,[r0,#8]
00007a  ed800b04          VSTR     d0,[r0,#0x10]
;;;58     				Ki = Error[1] + Error[2] + Error[3];
00007e  ed902b04          VLDR     d2,[r0,#0x10]
000082  eeb00a42          VMOV.F32 s0,s4
000086  eef00a62          VMOV.F32 s1,s5
00008a  ed902b02          VLDR     d2,[r0,#8]
00008e  eeb01a42          VMOV.F32 s2,s4
000092  eef01a62          VMOV.F32 s3,s5
000096  ec532b10          VMOV     r2,r3,d0
00009a  ec510b11          VMOV     r0,r1,d1
00009e  f7fffffe          BL       __aeabi_dadd
0000a2  ec410b1a          VMOV     d10,r0,r1
0000a6  4879              LDR      r0,|L1.652|
0000a8  ed901b06          VLDR     d1,[r0,#0x18]
0000ac  eeb00a41          VMOV.F32 s0,s2
0000b0  eef00a61          VMOV.F32 s1,s3
0000b4  ec532b10          VMOV     r2,r3,d0
0000b8  ec510b1a          VMOV     r0,r1,d10
0000bc  f7fffffe          BL       __aeabi_dadd
0000c0  4a73              LDR      r2,|L1.656|
0000c2  c203              STM      r2!,{r0,r1}
;;;59     				Kd = (Error[2]-Error[1]) / .01;
0000c4  4871              LDR      r0,|L1.652|
0000c6  ed902b02          VLDR     d2,[r0,#8]
0000ca  eeb00a42          VMOV.F32 s0,s4
0000ce  eef00a62          VMOV.F32 s1,s5
0000d2  ed902b04          VLDR     d2,[r0,#0x10]
0000d6  eeb01a42          VMOV.F32 s2,s4
0000da  eef01a62          VMOV.F32 s3,s5
0000de  ec532b10          VMOV     r2,r3,d0
0000e2  ec510b11          VMOV     r0,r1,d1
0000e6  f7fffffe          BL       __aeabi_dsub
0000ea  ec410b1a          VMOV     d10,r0,r1
0000ee  ed9f0b69          VLDR     d0,|L1.660|
0000f2  ec532b10          VMOV     r2,r3,d0
0000f6  f7fffffe          BL       __aeabi_ddiv
0000fa  4a68              LDR      r2,|L1.668|
0000fc  c203              STM      r2!,{r0,r1}
;;;60     				
;;;61     				//speed corrections
;;;62     				Error[1] = uSpeed - Speed;
0000fe  ec532b19          VMOV     r2,r3,d9
000102  ec510b18          VMOV     r0,r1,d8
000106  f7fffffe          BL       __aeabi_drsub
00010a  4a60              LDR      r2,|L1.652|
00010c  e9c20102          STRD     r0,r1,[r2,#8]
;;;63     				vol = DutyC/640*10;
000110  ed9f0b63          VLDR     d0,|L1.672|
000114  ec532b10          VMOV     r2,r3,d0
000118  4863              LDR      r0,|L1.680|
00011a  ed900b00          VLDR     d0,[r0,#0]
00011e  ec510b10          VMOV     r0,r1,d0
000122  f7fffffe          BL       __aeabi_ddiv
000126  ec410b1a          VMOV     d10,r0,r1
00012a  ed9f0b60          VLDR     d0,|L1.684|
00012e  ec532b10          VMOV     r2,r3,d0
000132  f7fffffe          BL       __aeabi_dmul
000136  4a5f              LDR      r2,|L1.692|
000138  c203              STM      r2!,{r0,r1}
;;;64     				vol = vol + .035 * Error[1] + .00001247*Ki - .0000000000000000027691*Kd; 
00013a  4858              LDR      r0,|L1.668|
00013c  ed900b00          VLDR     d0,[r0,#0]
000140  ec532b10          VMOV     r2,r3,d0
000144  ed9f0b5c          VLDR     d0,|L1.696|
000148  ec510b10          VMOV     r0,r1,d0
00014c  f7fffffe          BL       __aeabi_dmul
000150  ec410b1a          VMOV     d10,r0,r1
000154  484e              LDR      r0,|L1.656|
000156  ed900b00          VLDR     d0,[r0,#0]
00015a  ec532b10          VMOV     r2,r3,d0
00015e  ed9f0b58          VLDR     d0,|L1.704|
000162  ec510b10          VMOV     r0,r1,d0
000166  f7fffffe          BL       __aeabi_dmul
00016a  ec410b1c          VMOV     d12,r0,r1
00016e  4847              LDR      r0,|L1.652|
000170  ed901b02          VLDR     d1,[r0,#8]
000174  eeb00a41          VMOV.F32 s0,s2
000178  eef00a61          VMOV.F32 s1,s3
00017c  ec532b10          VMOV     r2,r3,d0
000180  ed9f1b51          VLDR     d1,|L1.712|
000184  ec510b11          VMOV     r0,r1,d1
000188  f7fffffe          BL       __aeabi_dmul
00018c  ec410b1e          VMOV     d14,r0,r1
000190  4848              LDR      r0,|L1.692|
000192  ed900b00          VLDR     d0,[r0,#0]
000196  ec532b10          VMOV     r2,r3,d0
00019a  ec510b1e          VMOV     r0,r1,d14
00019e  f7fffffe          BL       __aeabi_dadd
0001a2  ec410b1d          VMOV     d13,r0,r1
0001a6  ec532b1c          VMOV     r2,r3,d12
0001aa  f7fffffe          BL       __aeabi_dadd
0001ae  ec410b1b          VMOV     d11,r0,r1
0001b2  ec532b1a          VMOV     r2,r3,d10
0001b6  f7fffffe          BL       __aeabi_dsub
0001ba  4a3e              LDR      r2,|L1.692|
0001bc  c203              STM      r2!,{r0,r1}
;;;65     				DutyC = vol/10*640;	
0001be  ed9f0b3b          VLDR     d0,|L1.684|
0001c2  ec532b10          VMOV     r2,r3,d0
0001c6  483b              LDR      r0,|L1.692|
0001c8  ed900b00          VLDR     d0,[r0,#0]
0001cc  ec510b10          VMOV     r0,r1,d0
0001d0  f7fffffe          BL       __aeabi_ddiv
0001d4  ec410b1a          VMOV     d10,r0,r1
0001d8  ed9f0b31          VLDR     d0,|L1.672|
0001dc  ec532b10          VMOV     r2,r3,d0
0001e0  f7fffffe          BL       __aeabi_dmul
0001e4  4a30              LDR      r2,|L1.680|
0001e6  c203              STM      r2!,{r0,r1}
;;;66     	
;;;67     				//sets limits for duty cycle
;;;68     				if (DutyC < 4){
0001e8  ed9f0b39          VLDR     d0,|L1.720|
0001ec  ec532b10          VMOV     r2,r3,d0
0001f0  482d              LDR      r0,|L1.680|
0001f2  ed900b00          VLDR     d0,[r0,#0]
0001f6  ec510b10          VMOV     r0,r1,d0
0001fa  f7fffffe          BL       __aeabi_cdcmple
0001fe  d204              BCS      |L1.522|
;;;69     					DutyC = 4;
000200  ed9f0b33          VLDR     d0,|L1.720|
000204  4828              LDR      r0,|L1.680|
000206  ed800b00          VSTR     d0,[r0,#0]
                  |L1.522|
;;;70     					}
;;;71     				if (DutyC > 640){
00020a  ed9f0b25          VLDR     d0,|L1.672|
00020e  ec532b10          VMOV     r2,r3,d0
000212  4825              LDR      r0,|L1.680|
000214  ed900b00          VLDR     d0,[r0,#0]
000218  ec510b10          VMOV     r0,r1,d0
00021c  f7fffffe          BL       __aeabi_cdrcmple
000220  d204              BCS      |L1.556|
;;;72     					DutyC = 640;
000222  ed9f0b1f          VLDR     d0,|L1.672|
000226  4820              LDR      r0,|L1.680|
000228  ed800b00          VSTR     d0,[r0,#0]
                  |L1.556|
;;;73     					}
;;;74     
;;;75     				//Set new PWM 
;;;76     				PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, DutyC);
00022c  481e              LDR      r0,|L1.680|
00022e  ed900b00          VLDR     d0,[r0,#0]
000232  ec510b10          VMOV     r0,r1,d0
000236  f7fffffe          BL       __aeabi_d2uiz
00023a  4680              MOV      r8,r0
00023c  4642              MOV      r2,r8
00023e  f44f7183          MOV      r1,#0x106
000242  4825              LDR      r0,|L1.728|
000244  f7fffffe          BL       PWMPulseWidthSet
000248  1c76              ADDS     r6,r6,#1              ;39
                  |L1.586|
00024a  2e0a              CMP      r6,#0xa               ;39
00024c  f6ffaee9          BLT      |L1.34|
;;;77     
;;;78     			}
;;;79     	
;;;80     		Speed = ReadEncoder(); //Set varible equal to the read speed from the "ReadEncoder" function.
000250  f7fffffe          BL       ReadEncoder
000254  eeb08a40          VMOV.F32 s16,s0
000258  eef08a60          VMOV.F32 s17,s1
;;;81     		printf("Speed is, IN CONTROL %.2f rps \n\n", Speed);
00025c  ec532b18          VMOV     r2,r3,d8
000260  a01e              ADR      r0,|L1.732|
000262  f7fffffe          BL       __2printf
;;;82     	
;;;83     		//will exit GPIO when SW2 is pressed
;;;84     		x = GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_0); // set x equal to the output of button SW2 		
000266  2101              MOVS     r1,#1
000268  4825              LDR      r0,|L1.768|
00026a  f7fffffe          BL       GPIOPinRead
00026e  4604              MOV      r4,r0
;;;85     			if ( x == 0){
000270  b904              CBNZ     r4,|L1.628|
;;;86     					i = 0;
000272  2700              MOVS     r7,#0
                  |L1.628|
000274  2f01              CMP      r7,#1                 ;36
000276  f43faed2          BEQ      |L1.30|
;;;87     			}
;;;88     	}
;;;89     		//turns off motor before exiting 
;;;90     		stopmotor();
00027a  f7fffffe          BL       stopmotor
;;;91     }
00027e  ecbd8b0e          VPOP     {d8-d14}
000282  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

000286  0000              DCW      0x0000
                  |L1.648|
                          DCD      speed2
                  |L1.652|
                          DCD      Error
                  |L1.656|
                          DCD      ||Ki||
                  |L1.660|
000294  47ae147b          DCFD     0x3f847ae147ae147b ; 0.01
000298  3f847ae1
                  |L1.668|
                          DCD      ||Kd||
                  |L1.672|
0002a0  00000000          DCFD     0x4084000000000000 ; 640
0002a4  40840000
                  |L1.680|
                          DCD      DutyC
                  |L1.684|
0002ac  00000000          DCFD     0x4024000000000000 ; 10
0002b0  40240000
                  |L1.692|
                          DCD      vol
                  |L1.696|
0002b8  3e591fec          DCFD     0x3c498a5a3e591fec ; 2.7691000000000002e-18
0002bc  3c498a5a
                  |L1.704|
0002c0  bff29ec3          DCFD     0x3eea26c7bff29ec3 ; 1.2469999999999999e-05
0002c4  3eea26c7
                  |L1.712|
0002c8  1eb851ec          DCFD     0x3fa1eb851eb851ec ; 0.035000000000000003
0002cc  3fa1eb85
                  |L1.720|
0002d0  00000000          DCFD     0x4010000000000000 ; 4
0002d4  40100000
                  |L1.728|
                          DCD      0x40029000
                  |L1.732|
0002dc  53706565          DCB      "Speed is, IN CONTROL %.2f rps \n\n",0
0002e0  64206973
0002e4  2c20494e
0002e8  20434f4e
0002ec  54524f4c
0002f0  20252e32
0002f4  66207270
0002f8  73200a0a
0002fc  00      
0002fd  00                DCB      0
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L1.768|
                          DCD      0x40025000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  Error
                          %        32

                          AREA ||.data||, DATA, ALIGN=3

                  Target_Speed
                          %        8
                  Period
                          DCD      0x00000000
                  Speed
                          DCD      0x00000000
                  speed2
                          %        8
                  DutyC
                          %        8
                  vol
                          %        8
                  ||Ki||
                          %        8
                  ||Kd||
                          %        8
